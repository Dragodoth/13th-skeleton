import {
  fade,
  fly,
  scale,
  slide
} from "./chunk-3437HMG2.js";
import {
  flip
} from "./chunk-XWPG6N2X.js";
import {
  cubicIn
} from "./chunk-YERFD2CZ.js";
import "./chunk-L3AU2XLF.js";
import "./chunk-RZEDAUZR.js";
import {
  get as get2,
  readable,
  writable
} from "./chunk-DT36KOCL.js";
import "./chunk-Q3HKM25F.js";
import {
  action,
  add_locations,
  afterUpdate,
  animation,
  append_styles,
  bind_checked,
  bind_files,
  bind_group,
  bind_prop,
  bind_property,
  bind_select_value,
  bind_this,
  bind_value,
  bind_window_size,
  bubble_event,
  check_target,
  cleanup_styles,
  component,
  createEventDispatcher,
  each,
  hmr,
  html,
  if_block,
  index,
  init,
  key_block,
  legacy_api,
  legacy_rest_props,
  log_if_contains_state,
  onDestroy,
  onMount,
  prop,
  remove_input_defaults,
  sanitize_slots,
  set_attribute,
  set_attributes,
  set_class,
  set_style,
  set_svg_class,
  setup_stores,
  slot,
  spread_props,
  store_get,
  store_mutate,
  store_set,
  toggle_class,
  transition,
  validate_each_keys,
  validate_store,
  wrap_snippet
} from "./chunk-YDRNRLLY.js";
import {
  append,
  comment,
  head,
  ns_template,
  set_text,
  template,
  text
} from "./chunk-XUT3HFVO.js";
import {
  $window,
  FILENAME,
  HMR,
  add_owner_effect,
  child,
  deep_read_state,
  derived_safe_equal,
  effect,
  equals,
  event,
  first_child,
  flush_sync,
  get,
  getContext,
  invalidate_inner_signals,
  legacy_pre_effect,
  legacy_pre_effect_reset,
  mark_module_end,
  mark_module_start,
  mutable_state,
  mutate,
  next,
  pop,
  push,
  replay_events,
  reset,
  set,
  setContext,
  sibling,
  strict_equals,
  template_effect,
  untrack
} from "./chunk-CQHYY2SR.js";
import {
  BROWSER
} from "./chunk-IP2U24VQ.js";
import "./chunk-E2JEHENU.js";

// node_modules/@skeletonlabs/skeleton/dist/utilities/CodeBlock/stores.js
var storeHighlightJs = writable(void 0);

// node_modules/@skeletonlabs/skeleton/dist/utilities/Popup/popup.js
var storePopup = writable(void 0);
function popup(triggerNode, args) {
  const { computePosition, autoUpdate, offset, shift, flip: flip2, arrow, size, autoPlacement, hide, inline } = get2(storePopup);
  const popupState = {
    open: false,
    autoUpdateCleanup: () => {
    }
  };
  const focusableAllowedList = ':is(a[href], button, input, textarea, select, details, [tabindex]):not([tabindex="-1"])';
  let focusablePopupElements;
  const documentationLink = "https://www.skeleton.dev/utilities/popups";
  let elemPopup;
  let elemArrow;
  function setDomElements() {
    elemPopup = document.querySelector(`[data-popup="${args.target}"]`) ?? document.createElement("div");
    elemArrow = elemPopup.querySelector(`.arrow`) ?? document.createElement("div");
  }
  setDomElements();
  function render() {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    if (!elemPopup)
      throw new Error(`The data-popup="${args.target}" element was not found. ${documentationLink}`);
    if (!computePosition)
      throw new Error(`Floating UI 'computePosition' not found for data-popup="${args.target}". ${documentationLink}`);
    if (!offset)
      throw new Error(`Floating UI 'offset' not found for data-popup="${args.target}". ${documentationLink}`);
    if (!shift)
      throw new Error(`Floating UI 'shift' not found for data-popup="${args.target}". ${documentationLink}`);
    if (!flip2)
      throw new Error(`Floating UI 'flip' not found for data-popup="${args.target}". ${documentationLink}`);
    if (!arrow)
      throw new Error(`Floating UI 'arrow' not found for data-popup="${args.target}". ${documentationLink}`);
    const optionalMiddleware = [];
    if (size)
      optionalMiddleware.push(size((_a = args.middleware) == null ? void 0 : _a.size));
    if (autoPlacement)
      optionalMiddleware.push(autoPlacement((_b = args.middleware) == null ? void 0 : _b.autoPlacement));
    if (hide)
      optionalMiddleware.push(hide((_c = args.middleware) == null ? void 0 : _c.hide));
    if (inline)
      optionalMiddleware.push(inline((_d = args.middleware) == null ? void 0 : _d.inline));
    computePosition(triggerNode, elemPopup, {
      placement: args.placement ?? "bottom",
      // Middleware - NOTE: the order matters:
      // https://floating-ui.com/docs/middleware#ordering
      middleware: [
        // https://floating-ui.com/docs/offset
        offset(((_e = args.middleware) == null ? void 0 : _e.offset) ?? 8),
        // https://floating-ui.com/docs/shift
        shift(((_f = args.middleware) == null ? void 0 : _f.shift) ?? { padding: 8 }),
        // https://floating-ui.com/docs/flip
        flip2((_g = args.middleware) == null ? void 0 : _g.flip),
        // https://floating-ui.com/docs/arrow
        arrow(((_h = args.middleware) == null ? void 0 : _h.arrow) ?? { element: elemArrow || null }),
        // Implement optional middleware
        ...optionalMiddleware
      ]
    }).then(({ x, y, placement, middlewareData }) => {
      Object.assign(elemPopup.style, {
        left: `${x}px`,
        top: `${y}px`
      });
      if (elemArrow) {
        const { x: arrowX, y: arrowY } = middlewareData.arrow;
        const staticSide = {
          top: "bottom",
          right: "left",
          bottom: "top",
          left: "right"
        }[placement.split("-")[0]];
        Object.assign(elemArrow.style, {
          left: arrowX != null ? `${arrowX}px` : "",
          top: arrowY != null ? `${arrowY}px` : "",
          right: "",
          bottom: "",
          [staticSide]: "-4px"
        });
      }
    });
  }
  function open() {
    if (!elemPopup)
      return;
    popupState.open = true;
    if (args.state)
      args.state({ state: popupState.open });
    render();
    elemPopup.style.display = "block";
    elemPopup.style.opacity = "1";
    elemPopup.style.pointerEvents = "auto";
    elemPopup.removeAttribute("inert");
    popupState.autoUpdateCleanup = autoUpdate(triggerNode, elemPopup, render);
    focusablePopupElements = Array.from(elemPopup == null ? void 0 : elemPopup.querySelectorAll(focusableAllowedList));
  }
  function close(callback) {
    if (!elemPopup)
      return;
    const cssTransitionDuration = parseFloat(window.getComputedStyle(elemPopup).transitionDuration.replace("s", "")) * 1e3;
    setTimeout(() => {
      popupState.open = false;
      if (args.state)
        args.state({ state: popupState.open });
      elemPopup.style.opacity = "0";
      elemPopup.setAttribute("inert", "");
      if (popupState.autoUpdateCleanup)
        popupState.autoUpdateCleanup();
      if (callback)
        callback();
    }, cssTransitionDuration);
  }
  function toggle() {
    popupState.open === false ? open() : close();
  }
  function onWindowClick(event2) {
    if (popupState.open === false)
      return;
    if (triggerNode.contains(event2.target))
      return;
    if (elemPopup && elemPopup.contains(event2.target) === false) {
      close();
      return;
    }
    const closeQueryString = args.closeQuery === void 0 ? "a[href], button" : args.closeQuery;
    if (closeQueryString === "")
      return;
    const closableMenuElements = elemPopup == null ? void 0 : elemPopup.querySelectorAll(closeQueryString);
    closableMenuElements == null ? void 0 : closableMenuElements.forEach((elem) => {
      if (elem.contains(event2.target))
        close();
    });
  }
  const onWindowKeyDown = (event2) => {
    if (popupState.open === false)
      return;
    const key = event2.key;
    if (key === "Escape") {
      event2.preventDefault();
      triggerNode.focus();
      close();
      return;
    }
    focusablePopupElements = Array.from(elemPopup == null ? void 0 : elemPopup.querySelectorAll(focusableAllowedList));
    const triggerMenuFocused = popupState.open && document.activeElement === triggerNode;
    if (triggerMenuFocused && (key === "ArrowDown" || key === "Tab") && focusableAllowedList.length > 0 && focusablePopupElements.length > 0) {
      event2.preventDefault();
      focusablePopupElements[0].focus();
    }
  };
  switch (args.event) {
    case "click":
      triggerNode.addEventListener("click", toggle, true);
      window.addEventListener("click", onWindowClick, true);
      break;
    case "hover":
      triggerNode.addEventListener("mouseover", open, true);
      triggerNode.addEventListener("mouseleave", () => close(), true);
      break;
    case "focus-blur":
      triggerNode.addEventListener("focus", toggle, true);
      triggerNode.addEventListener("blur", () => close(), true);
      break;
    case "focus-click":
      triggerNode.addEventListener("focus", open, true);
      window.addEventListener("click", onWindowClick, true);
      break;
    default:
      throw new Error(`Event value of '${args.event}' is not supported. ${documentationLink}`);
  }
  window.addEventListener("keydown", onWindowKeyDown, true);
  render();
  return {
    update(newArgs) {
      close(() => {
        args = newArgs;
        render();
        setDomElements();
      });
    },
    destroy() {
      triggerNode.removeEventListener("click", toggle, true);
      triggerNode.removeEventListener("mouseover", open, true);
      triggerNode.removeEventListener("mouseleave", () => close(), true);
      triggerNode.removeEventListener("focus", toggle, true);
      triggerNode.removeEventListener("focus", open, true);
      triggerNode.removeEventListener("blur", () => close(), true);
      window.removeEventListener("click", onWindowClick, true);
      window.removeEventListener("keydown", onWindowKeyDown, true);
    }
  };
}

// node_modules/@skeletonlabs/skeleton/dist/utilities/TableOfContents/stores.js
var tocStore = writable([]);
var tocActiveId = writable(void 0);

// node_modules/@skeletonlabs/skeleton/dist/utilities/Drawer/stores.js
var DRAWER_STORE_KEY = "drawerStore";
function getDrawerStore() {
  const drawerStore = getContext(DRAWER_STORE_KEY);
  if (!drawerStore)
    throw new Error("drawerStore is not initialized. Please ensure that `initializeStores()` is invoked in the root layout file of this app!");
  return drawerStore;
}
function initializeDrawerStore() {
  const drawerStore = drawerService();
  return setContext(DRAWER_STORE_KEY, drawerStore);
}
function drawerService() {
  const { subscribe, set: set2, update } = writable({});
  return {
    subscribe,
    set: set2,
    update,
    /** Open the drawer. */
    open: (newSettings) => update(() => {
      return { open: true, ...newSettings };
    }),
    /** Close the drawer. */
    close: () => update((d) => {
      d.open = false;
      return d;
    })
  };
}

// node_modules/@skeletonlabs/skeleton/dist/utilities/Modal/stores.js
var MODAL_STORE_KEY = "modalStore";
function getModalStore() {
  const modalStore = getContext(MODAL_STORE_KEY);
  if (!modalStore)
    throw new Error("modalStore is not initialized. Please ensure that `initializeStores()` is invoked in the root layout file of this app!");
  return modalStore;
}
function initializeModalStore() {
  const modalStore = modalService();
  return setContext(MODAL_STORE_KEY, modalStore);
}
function modalService() {
  const { subscribe, set: set2, update } = writable([]);
  return {
    subscribe,
    set: set2,
    update,
    /** Append to end of queue. */
    trigger: (modal) => update((mStore) => {
      mStore.push(modal);
      return mStore;
    }),
    /**  Remove first item in queue. */
    close: () => update((mStore) => {
      if (mStore.length > 0)
        mStore.shift();
      return mStore;
    }),
    /** Remove all items from queue. */
    clear: () => set2([])
  };
}

// node_modules/@skeletonlabs/skeleton/dist/utilities/Toast/stores.js
var toastDefaults = { message: "Missing Toast Message", autohide: true, timeout: 5e3 };
var TOAST_STORE_KEY = "toastStore";
function getToastStore() {
  const toastStore = getContext(TOAST_STORE_KEY);
  if (!toastStore)
    throw new Error("toastStore is not initialized. Please ensure that `initializeStores()` is invoked in the root layout file of this app!");
  return toastStore;
}
function initializeToastStore() {
  const toastStore = toastService();
  return setContext(TOAST_STORE_KEY, toastStore);
}
function randomUUID() {
  const random = Math.random();
  return Number(random).toString(32);
}
function toastService() {
  const { subscribe, set: set2, update } = writable([]);
  const close = (id) => update((tStore) => {
    if (tStore.length > 0) {
      const index2 = tStore.findIndex((t) => t.id === id);
      const selectedToast = tStore[index2];
      if (selectedToast) {
        if (selectedToast.callback)
          selectedToast.callback({ id, status: "closed" });
        if (selectedToast.timeoutId)
          clearTimeout(selectedToast.timeoutId);
        tStore.splice(index2, 1);
      }
    }
    return tStore;
  });
  function handleAutoHide(toast) {
    if (toast.autohide === true) {
      return setTimeout(() => {
        close(toast.id);
      }, toast.timeout);
    }
  }
  return {
    subscribe,
    close,
    /** Add a new toast to the queue. */
    trigger: (toast) => {
      const id = randomUUID();
      update((tStore) => {
        if (toast && toast.callback)
          toast.callback({ id, status: "queued" });
        if (toast.hideDismiss)
          toast.autohide = true;
        const tMerged = { ...toastDefaults, ...toast, id };
        tMerged.timeoutId = handleAutoHide(tMerged);
        tStore.push(tMerged);
        return tStore;
      });
      return id;
    },
    /** Remain visible on hover */
    freeze: (index2) => update((tStore) => {
      if (tStore.length > 0)
        clearTimeout(tStore[index2].timeoutId);
      return tStore;
    }),
    /** Cancel remain visible on leave */
    unfreeze: (index2) => update((tStore) => {
      if (tStore.length > 0)
        tStore[index2].timeoutId = handleAutoHide(tStore[index2]);
      return tStore;
    }),
    /** Remove all toasts from queue */
    clear: () => set2([])
  };
}

// node_modules/@skeletonlabs/skeleton/dist/utilities/index.js
function initializeStores() {
  initializeModalStore();
  initializeToastStore();
  initializeDrawerStore();
}

// node_modules/@skeletonlabs/skeleton/dist/utilities/LocalStorageStore/LocalStorageStore.js
var stores = {};
function getStorage(type) {
  return type === "local" ? localStorage : sessionStorage;
}
function localStorageStore(key, initialValue, options) {
  const serializer = (options == null ? void 0 : options.serializer) ?? JSON;
  const storageType = (options == null ? void 0 : options.storage) ?? "local";
  function updateStorage(key2, value) {
    if (!BROWSER)
      return;
    getStorage(storageType).setItem(key2, serializer.stringify(value));
  }
  if (!stores[key]) {
    const store = writable(initialValue, (set3) => {
      const json = BROWSER ? getStorage(storageType).getItem(key) : null;
      if (json) {
        set3(serializer.parse(json));
      }
      if (BROWSER) {
        const handleStorage = (event2) => {
          if (event2.key === key)
            set3(event2.newValue ? serializer.parse(event2.newValue) : null);
        };
        window.addEventListener("storage", handleStorage);
        return () => window.removeEventListener("storage", handleStorage);
      }
    });
    const { subscribe, set: set2 } = store;
    stores[key] = {
      set(value) {
        updateStorage(key, value);
        set2(value);
      },
      update(updater) {
        const value = updater(get2(store));
        updateStorage(key, value);
        set2(value);
      },
      subscribe
    };
  }
  return stores[key];
}

// node_modules/@skeletonlabs/skeleton/dist/utilities/LightSwitch/lightswitch.js
var modeOsPrefers = localStorageStore("modeOsPrefers", false);
var modeUserPrefers = localStorageStore("modeUserPrefers", void 0);
var modeCurrent = localStorageStore("modeCurrent", false);
function getModeOsPrefers() {
  const prefersLightMode = window.matchMedia("(prefers-color-scheme: light)").matches;
  modeOsPrefers.set(prefersLightMode);
  return prefersLightMode;
}
function getModeUserPrefers() {
  return get2(modeUserPrefers);
}
function getModeAutoPrefers() {
  const os = getModeOsPrefers();
  const user = getModeUserPrefers();
  const modeValue = user !== void 0 ? user : os;
  return modeValue;
}
function setModeUserPrefers(value) {
  modeUserPrefers.set(value);
}
function setModeCurrent(value) {
  const elemHtmlClasses = document.documentElement.classList;
  const classDark = `dark`;
  value === true ? elemHtmlClasses.remove(classDark) : elemHtmlClasses.add(classDark);
  modeCurrent.set(value);
}
function setInitialClassState() {
  const elemHtmlClasses = document.documentElement.classList;
  const condLocalStorageUserPrefs = localStorage.getItem("modeUserPrefers") === "false";
  const condLocalStorageUserPrefsExists = !("modeUserPrefers" in localStorage);
  const condMatchMedia = window.matchMedia("(prefers-color-scheme: dark)").matches;
  if (condLocalStorageUserPrefs || condLocalStorageUserPrefsExists && condMatchMedia) {
    elemHtmlClasses.add("dark");
  } else {
    elemHtmlClasses.remove("dark");
  }
}
function autoModeWatcher() {
  const mql = window.matchMedia("(prefers-color-scheme: light)");
  function setMode(value) {
    const elemHtmlClasses = document.documentElement.classList;
    const classDark = `dark`;
    value === true ? elemHtmlClasses.remove(classDark) : elemHtmlClasses.add(classDark);
  }
  setMode(mql.matches);
  mql.onchange = () => {
    setMode(mql.matches);
  };
}

// node_modules/@skeletonlabs/skeleton/dist/utilities/PrefersReducedMotion/PrefersReducedMotion.js
var reducedMotionQuery = "(prefers-reduced-motion: reduce)";
function prefersReducedMotion() {
  if (!BROWSER)
    return false;
  return window.matchMedia(reducedMotionQuery).matches;
}
var prefersReducedMotionStore = readable(prefersReducedMotion(), (set2) => {
  if (BROWSER) {
    const setReducedMotion = (event2) => {
      set2(event2.matches);
    };
    const mediaQueryList = window.matchMedia(reducedMotionQuery);
    mediaQueryList.addEventListener("change", setReducedMotion);
    return () => {
      mediaQueryList.removeEventListener("change", setReducedMotion);
    };
  }
});

// node_modules/@skeletonlabs/skeleton/dist/components/Table/utils.js
function tableSourceMapper(source, keys) {
  return source.map((row) => {
    const mappedRow = {};
    keys.forEach((key) => mappedRow[key] = row[key]);
    return mappedRow;
  });
}
function tableSourceValues(source) {
  return source.map((row) => Object.values(row));
}
function tableMapperValues(source, keys) {
  return tableSourceValues(tableSourceMapper(source, keys));
}

// node_modules/@skeletonlabs/skeleton/dist/actions/Clipboard/clipboard.js
function clipboard(node, args) {
  if (!window.isSecureContext) {
    console.error("Clipboard action failed: app not running in secure context, see: https://developer.mozilla.org/en-US/docs/Web/API/Clipboard");
    return {};
  }
  const fireCopyCompleteEvent = () => {
    node.dispatchEvent(new CustomEvent("copyComplete"));
  };
  const onClick = () => {
    if (typeof args === "object") {
      if ("element" in args) {
        const element = document.querySelector(`[data-clipboard="${args.element}"]`);
        if (!element)
          throw new Error(`Missing HTMLElement with an attribute of [data-clipboard="${args.element}"]`);
        copyToClipboard(element.innerHTML, "text/html").then(fireCopyCompleteEvent);
        return;
      }
      if ("input" in args) {
        const input = document.querySelector(`[data-clipboard="${args.input}"]`);
        if (!input)
          throw new Error(`Missing HTMLInputElement with an attribute of [data-clipboard="${args.input}"]`);
        copyToClipboard(input.value).then(fireCopyCompleteEvent);
        return;
      }
    }
    copyToClipboard(args).then(fireCopyCompleteEvent);
  };
  node.addEventListener("click", onClick);
  return {
    update(newArgs) {
      args = newArgs;
    },
    destroy() {
      node.removeEventListener("click", onClick);
    }
  };
}
async function copyToClipboard(data, mimeType = "text/plain") {
  if (navigator.clipboard.write) {
    await navigator.clipboard.write([
      new ClipboardItem({
        [mimeType]: new Blob([data], {
          type: mimeType
        }),
        ["text/plain"]: new Blob([data], {
          type: "text/plain"
        })
      })
    ]);
  } else {
    await new Promise((resolve) => {
      resolve(navigator.clipboard.writeText(String(data)));
    });
  }
}

// node_modules/@skeletonlabs/skeleton/dist/actions/Filters/filter.js
function filter(node, filterName) {
  if (filterName === void 0)
    return;
  const applyFilter = () => {
    node.setAttribute("style", `filter: url("${filterName}")`);
  };
  applyFilter();
  return {
    update(newArgs) {
      filterName = newArgs;
      applyFilter();
    }
  };
}

// node_modules/@skeletonlabs/skeleton/dist/actions/FocusTrap/focusTrap.js
function focusTrap(node, enabled) {
  const elemWhitelist = 'a[href]:not([tabindex="-1"]), button:not([tabindex="-1"]), input:not([tabindex="-1"]), textarea:not([tabindex="-1"]), select:not([tabindex="-1"]), details:not([tabindex="-1"]), [tabindex]:not([tabindex="-1"])';
  let elemFirst;
  let elemLast;
  function onFirstElemKeydown(e) {
    if (e.shiftKey && e.code === "Tab") {
      e.preventDefault();
      elemLast.focus();
    }
  }
  function onLastElemKeydown(e) {
    if (!e.shiftKey && e.code === "Tab") {
      e.preventDefault();
      elemFirst.focus();
    }
  }
  const sortByTabIndex = (focusableElems) => {
    return focusableElems.filter((elem) => elem.tabIndex >= 0).sort((a, b) => {
      if (a.tabIndex === 0 && b.tabIndex > 0)
        return 1;
      else if (a.tabIndex > 0 && b.tabIndex === 0)
        return -1;
      else
        return a.tabIndex - b.tabIndex;
    });
  };
  const getFocusTrapTarget = (elemFirst2) => {
    const focusindexElements = [...node.querySelectorAll("[data-focusindex]")];
    if (!focusindexElements || focusindexElements.length === 0)
      return elemFirst2;
    return focusindexElements.sort((a, b) => {
      return +a.dataset.focusindex - +b.dataset.focusindex;
    })[0] || elemFirst2;
  };
  const onScanElements = (fromObserver) => {
    if (enabled === false)
      return;
    const focusableElems = sortByTabIndex(Array.from(node.querySelectorAll(elemWhitelist)));
    if (focusableElems.length) {
      elemFirst = focusableElems[0];
      elemLast = focusableElems[focusableElems.length - 1];
      if (!fromObserver)
        getFocusTrapTarget(elemFirst).focus();
      elemFirst.addEventListener("keydown", onFirstElemKeydown);
      elemLast.addEventListener("keydown", onLastElemKeydown);
    }
  };
  onScanElements(false);
  function onCleanUp() {
    if (elemFirst)
      elemFirst.removeEventListener("keydown", onFirstElemKeydown);
    if (elemLast)
      elemLast.removeEventListener("keydown", onLastElemKeydown);
  }
  const onObservationChange = (mutationRecords, observer2) => {
    if (mutationRecords.length) {
      onCleanUp();
      onScanElements(true);
    }
    return observer2;
  };
  const observer = new MutationObserver(onObservationChange);
  observer.observe(node, { childList: true, subtree: true });
  return {
    update(newArgs) {
      enabled = newArgs;
      newArgs ? onScanElements(false) : onCleanUp();
    },
    destroy() {
      onCleanUp();
      observer.disconnect();
    }
  };
}

// node_modules/@skeletonlabs/skeleton/dist/utilities/TableOfContents/crawler.js
function tocCrawler(node, args) {
  var _a;
  let queryElements = "h2, h3, h4, h5, h6";
  let scrollTarget = "body";
  let headings;
  let permalinks = [];
  function init2() {
    if (args == null ? void 0 : args.queryElements)
      queryElements = args.queryElements;
    if (args == null ? void 0 : args.scrollTarget)
      scrollTarget = args.scrollTarget;
    headings = node.querySelectorAll(queryElements);
    permalinks = [];
    queryHeadings();
  }
  function queryHeadings() {
    headings == null ? void 0 : headings.forEach((elemHeading) => {
      var _a2, _b, _c, _d;
      if (elemHeading.hasAttribute("data-toc-ignore"))
        return;
      if ((args == null ? void 0 : args.mode) === "generate" && !elemHeading.id) {
        const newHeadingId = (_b = (_a2 = elemHeading.firstChild) == null ? void 0 : _a2.textContent) == null ? void 0 : _b.trim().replaceAll(/[^a-zA-Z0-9 ]/g, "").replaceAll(" ", "-").toLowerCase();
        const prefix = args.prefix ? `${args.prefix}-` : "";
        const suffix = args.suffix ? `-${args.suffix}` : "";
        elemHeading.id = prefix + newHeadingId + suffix;
      }
      permalinks.push({
        element: elemHeading.nodeName.toLowerCase(),
        id: elemHeading.id,
        text: ((_d = (_c = elemHeading.firstChild) == null ? void 0 : _c.textContent) == null ? void 0 : _d.trim()) || ""
      });
    });
    tocStore.set(permalinks);
  }
  function onWindowScroll(e) {
    if (!(headings == null ? void 0 : headings.length))
      return;
    const targetElem = e.target;
    if (!(targetElem instanceof HTMLElement))
      throw new Error("scrollTarget is not an HTMLElement");
    const scrollableTop = targetElem.getBoundingClientRect().top || 0;
    const headingSizeThreshold = 40;
    for (const elemHeading of headings) {
      const headerBoundTop = elemHeading.getBoundingClientRect().top;
      const offsetTop = headerBoundTop - scrollableTop + headingSizeThreshold;
      if (offsetTop >= 0)
        return tocActiveId.set(elemHeading.id);
    }
  }
  init2();
  if (scrollTarget)
    (_a = document.querySelector(scrollTarget)) == null ? void 0 : _a.addEventListener("scroll", onWindowScroll);
  return {
    update(newArgs) {
      args = newArgs;
      init2();
    },
    destroy() {
      var _a2;
      if (scrollTarget)
        (_a2 = document.querySelector(scrollTarget)) == null ? void 0 : _a2.removeEventListener("scroll", onWindowScroll);
    }
  };
}

// node_modules/@skeletonlabs/skeleton/dist/components/Accordion/Accordion.svelte
mark_module_start();
Accordion[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/Accordion/Accordion.svelte";
var root = add_locations(template(`<div data-testid="accordion"><!></div>`), Accordion[FILENAME], [[47, 0]]);
function Accordion($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, Accordion);
  const $$stores = setup_stores();
  const $prefersReducedMotionStore = () => (validate_store(prefersReducedMotionStore, "prefersReducedMotionStore"), store_get(prefersReducedMotionStore, "$prefersReducedMotionStore", $$stores));
  const classesBase = mutable_state();
  let autocollapse = prop($$props, "autocollapse", 8, false);
  let width = prop($$props, "width", 8, "w-full");
  let spacing = prop($$props, "spacing", 8, "space-y-1");
  let disabled = prop($$props, "disabled", 8, false);
  let padding = prop($$props, "padding", 8, "py-2 px-4");
  let hover = prop($$props, "hover", 8, "hover:bg-primary-hover-token");
  let rounded = prop($$props, "rounded", 8, "rounded-container-token");
  let caretOpen = prop($$props, "caretOpen", 8, "rotate-180");
  let caretClosed = prop($$props, "caretClosed", 8, "");
  let regionControl = prop($$props, "regionControl", 8, "");
  let regionPanel = prop($$props, "regionPanel", 8, "space-y-4");
  let regionCaret = prop($$props, "regionCaret", 8, "");
  let transitions = prop($$props, "transitions", 24, () => !$prefersReducedMotionStore());
  let transitionIn = prop($$props, "transitionIn", 8, slide);
  let transitionInParams = prop($$props, "transitionInParams", 24, () => ({ duration: 200 }));
  let transitionOut = prop($$props, "transitionOut", 8, slide);
  let transitionOutParams = prop($$props, "transitionOutParams", 24, () => ({ duration: 200 }));
  const active = writable(null);
  setContext("active", active);
  setContext("autocollapse", autocollapse());
  setContext("disabled", disabled());
  setContext("padding", padding());
  setContext("hover", hover());
  setContext("rounded", rounded());
  setContext("caretOpen", caretOpen());
  setContext("caretClosed", caretClosed());
  setContext("regionControl", regionControl());
  setContext("regionPanel", regionPanel());
  setContext("regionCaret", regionCaret());
  setContext("transitions", transitions());
  setContext("transitionIn", transitionIn());
  setContext("transitionInParams", transitionInParams());
  setContext("transitionOut", transitionOut());
  setContext("transitionOutParams", transitionOutParams());
  legacy_pre_effect(
    () => (deep_read_state(width()), deep_read_state(spacing()), deep_read_state($$sanitized_props)),
    () => {
      set(classesBase, `${width()} ${spacing()} ${$$sanitized_props.class ?? ""}`);
    }
  );
  legacy_pre_effect_reset();
  init();
  var div = root();
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  template_effect(() => set_class(div, `accordion ${get(classesBase) ?? ""}`));
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Accordion = hmr(Accordion, () => Accordion[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Accordion[HMR].source;
    set(Accordion[HMR].source, module.default[HMR].original);
  });
}
var Accordion_default = Accordion;
mark_module_end(Accordion);

// node_modules/@skeletonlabs/skeleton/dist/internal/transitions.js
function dynamicTransition(node, dynParams) {
  const { transition: transition2, params, enabled } = dynParams;
  if (enabled)
    return transition2(node, params);
  if ("duration" in params)
    return transition2(node, { duration: 0 });
  return { duration: 0 };
}

// node_modules/@skeletonlabs/skeleton/dist/components/Accordion/AccordionItem.svelte
mark_module_start();
AccordionItem[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/Accordion/AccordionItem.svelte";
var root_1 = add_locations(template(`<div class="accordion-lead"><!></div>`), AccordionItem[FILENAME], [[88, 3]]);
var root_3 = add_locations(template(`<div><!></div>`), AccordionItem[FILENAME], [[100, 3]]);
var root_8 = add_locations(template(`<div><!></div>`), AccordionItem[FILENAME], [[109, 3]]);
var root_9 = add_locations(template(`<div role="region"><!></div>`), AccordionItem[FILENAME], [[114, 2]]);
var root2 = add_locations(template(`<div data-testid="accordion-item"><button type="button"><!> <div class="accordion-summary flex-1"><!></div> <!></button> <!></div>`), AccordionItem[FILENAME], [
  [
    71,
    0,
    [[73, 1, [[93, 2]]]]
  ]
]);
function AccordionItem($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, AccordionItem);
  const $$stores = setup_stores();
  const $active = () => (validate_store(active(), "active"), store_get(active(), "$active", $$stores));
  const openState = mutable_state();
  const classesBase = mutable_state();
  const classesControl = mutable_state();
  const classesCaretState = mutable_state();
  const classesControlCaret = mutable_state();
  const classesControlIcons = mutable_state();
  const classesPanel = mutable_state();
  const dispatch = createEventDispatcher();
  let open = prop($$props, "open", 12, false);
  let id = prop($$props, "id", 24, () => String(Math.random()));
  const cBase = "";
  const cControl = "text-start w-full flex items-center space-x-4";
  const cControlIcons = "fill-current w-3 transition-transform duration-[200ms]";
  const cPanel = "";
  let autocollapse = prop($$props, "autocollapse", 24, () => getContext("autocollapse"));
  let active = prop($$props, "active", 24, () => getContext("active"));
  let disabled = prop($$props, "disabled", 24, () => getContext("disabled"));
  let padding = prop($$props, "padding", 24, () => getContext("padding"));
  let hover = prop($$props, "hover", 24, () => getContext("hover"));
  let rounded = prop($$props, "rounded", 24, () => getContext("rounded"));
  let caretOpen = prop($$props, "caretOpen", 24, () => getContext("caretOpen"));
  let caretClosed = prop($$props, "caretClosed", 24, () => getContext("caretClosed"));
  let regionControl = prop($$props, "regionControl", 24, () => getContext("regionControl"));
  let regionPanel = prop($$props, "regionPanel", 24, () => getContext("regionPanel"));
  let regionCaret = prop($$props, "regionCaret", 24, () => getContext("regionCaret"));
  let transitions = prop($$props, "transitions", 24, () => getContext("transitions"));
  let transitionIn = prop($$props, "transitionIn", 24, () => getContext("transitionIn"));
  let transitionInParams = prop($$props, "transitionInParams", 24, () => getContext("transitionInParams"));
  let transitionOut = prop($$props, "transitionOut", 24, () => getContext("transitionOut"));
  let transitionOutParams = prop($$props, "transitionOutParams", 24, () => getContext("transitionOutParams"));
  const svgCaretIcon = `
		<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
			<path d="M201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z" />
		</svg>`;
  function setActive(event2) {
    if (strict_equals(autocollapse(), true)) {
      active().set(id());
    } else {
      open(!open());
    }
    onToggle(event2);
  }
  function onToggle(event2) {
    const currentOpenState = autocollapse() ? strict_equals($active(), id()) : open();
    dispatch("toggle", {
      event: event2,
      id: id(),
      panelId: `accordion-panel-${id()}`,
      open: currentOpenState,
      autocollapse: autocollapse()
    });
  }
  if (autocollapse() && open()) setActive();
  legacy_pre_effect(
    () => (deep_read_state(open()), deep_read_state(autocollapse())),
    () => {
      if (open() && autocollapse()) setActive();
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(autocollapse()), $active(), deep_read_state(id()), deep_read_state(open())),
    () => {
      set(openState, autocollapse() ? strict_equals($active(), id()) : open());
    }
  );
  legacy_pre_effect(() => deep_read_state($$sanitized_props), () => {
    set(classesBase, `${cBase} ${$$sanitized_props.class ?? ""}`);
  });
  legacy_pre_effect(
    () => (deep_read_state(padding()), deep_read_state(hover()), deep_read_state(rounded()), deep_read_state(regionControl())),
    () => {
      set(classesControl, `${cControl} ${padding()} ${hover()} ${rounded()} ${regionControl()}`);
    }
  );
  legacy_pre_effect(
    () => (get(openState), deep_read_state(caretOpen()), deep_read_state(caretClosed())),
    () => {
      set(classesCaretState, get(openState) ? caretOpen() : caretClosed());
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(regionCaret()), get(classesCaretState)),
    () => {
      set(classesControlCaret, `${cControlIcons} ${regionCaret()} ${get(classesCaretState)}`);
    }
  );
  legacy_pre_effect(() => deep_read_state(regionCaret()), () => {
    set(classesControlIcons, `${cControlIcons} ${regionCaret()}`);
  });
  legacy_pre_effect(
    () => (deep_read_state(padding()), deep_read_state(rounded()), deep_read_state(regionPanel())),
    () => {
      set(classesPanel, `${cPanel} ${padding()} ${rounded()} ${regionPanel()}`);
    }
  );
  legacy_pre_effect_reset();
  init();
  var div = root2();
  var button = child(div);
  var node = child(button);
  if_block(node, () => $$slots.lead, ($$anchor2) => {
    var div_1 = root_1();
    var node_1 = child(div_1);
    slot(node_1, $$props, "lead", {}, null);
    reset(div_1);
    append($$anchor2, div_1);
  });
  var div_2 = sibling(node, 2);
  var node_2 = child(div_2);
  slot(node_2, $$props, "summary", {}, ($$anchor2) => {
    var text2 = text("(summary)");
    append($$anchor2, text2);
  });
  reset(div_2);
  var node_3 = sibling(div_2, 2);
  if_block(
    node_3,
    () => $$slots.iconClosed || $$slots.iconOpen,
    ($$anchor2) => {
      var div_3 = root_3();
      var node_4 = child(div_3);
      if_block(
        node_4,
        () => get(openState),
        ($$anchor3) => {
          var fragment = comment();
          var node_5 = first_child(fragment);
          slot(node_5, $$props, "iconClosed", {}, ($$anchor4) => {
            var fragment_1 = comment();
            var node_6 = first_child(fragment_1);
            html(node_6, () => svgCaretIcon, false, false);
            append($$anchor4, fragment_1);
          });
          append($$anchor3, fragment);
        },
        ($$anchor3) => {
          var fragment_2 = comment();
          var node_7 = first_child(fragment_2);
          slot(node_7, $$props, "iconOpen", {}, ($$anchor4) => {
            var fragment_3 = comment();
            var node_8 = first_child(fragment_3);
            html(node_8, () => svgCaretIcon, false, false);
            append($$anchor4, fragment_3);
          });
          append($$anchor3, fragment_2);
        }
      );
      reset(div_3);
      template_effect(() => set_class(div_3, `accordion-summary-icons ${get(classesControlIcons) ?? ""}`));
      append($$anchor2, div_3);
    },
    ($$anchor2) => {
      var div_4 = root_8();
      var node_9 = child(div_4);
      html(node_9, () => svgCaretIcon, false, false);
      reset(div_4);
      template_effect(() => set_class(div_4, `accordion-summary-caret ${get(classesControlCaret) ?? ""}`));
      append($$anchor2, div_4);
    }
  );
  reset(button);
  var node_10 = sibling(button, 2);
  if_block(node_10, () => get(openState), ($$anchor2) => {
    var div_5 = root_9();
    var node_11 = child(div_5);
    slot(node_11, $$props, "content", {}, ($$anchor3) => {
      var text_1 = text("(content)");
      append($$anchor3, text_1);
    });
    reset(div_5);
    template_effect(() => {
      set_class(div_5, `accordion-panel ${get(classesPanel) ?? ""}`);
      set_attribute(div_5, "id", `accordion-panel-${id() ?? ""}`);
      set_attribute(div_5, "aria-hidden", !get(openState));
      set_attribute(div_5, "aria-labelledby", id());
    });
    transition(1, div_5, () => dynamicTransition, () => ({
      transition: transitionIn(),
      params: transitionInParams(),
      enabled: transitions()
    }));
    transition(2, div_5, () => dynamicTransition, () => ({
      transition: transitionOut(),
      params: transitionOutParams(),
      enabled: transitions()
    }));
    append($$anchor2, div_5);
  });
  reset(div);
  template_effect(() => {
    set_class(div, `accordion-item ${get(classesBase) ?? ""}`);
    set_class(button, `accordion-control ${get(classesControl) ?? ""}`);
    set_attribute(button, "id", id());
    set_attribute(button, "aria-expanded", get(openState));
    set_attribute(button, "aria-controls", `accordion-panel-${id() ?? ""}`);
    button.disabled = disabled();
  });
  event("click", button, setActive);
  event("click", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keydown", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keyup", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keypress", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AccordionItem = hmr(AccordionItem, () => AccordionItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AccordionItem[HMR].source;
    set(AccordionItem[HMR].source, module.default[HMR].original);
  });
}
var AccordionItem_default = AccordionItem;
mark_module_end(AccordionItem);

// node_modules/@skeletonlabs/skeleton/dist/components/AppBar/AppBar.svelte
mark_module_start();
AppBar[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/AppBar/AppBar.svelte";
var root_12 = add_locations(template(`<div><!></div>`), AppBar[FILENAME], [[40, 3]]);
var root_2 = add_locations(template(`<div><!></div>`), AppBar[FILENAME], [[46, 3]]);
var root_32 = add_locations(template(`<div><!></div>`), AppBar[FILENAME], [[51, 2]]);
var root3 = add_locations(template(`<div data-testid="app-bar" role="toolbar"><div><!> <div><!></div> <!></div> <!></div>`), AppBar[FILENAME], [
  [
    35,
    0,
    [[37, 1, [[43, 2]]]]
  ]
]);
function AppBar($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, AppBar);
  const classesBase = mutable_state();
  const classesRowMain = mutable_state();
  const classesRowHeadline = mutable_state();
  const classesSlotLead = mutable_state();
  const classesSlotDefault = mutable_state();
  const classesSlotTrail = mutable_state();
  let background = prop($$props, "background", 8, "bg-surface-100-800-token");
  let border = prop($$props, "border", 8, "");
  let padding = prop($$props, "padding", 8, "p-4");
  let shadow = prop($$props, "shadow", 8, "");
  let spacing = prop($$props, "spacing", 8, "space-y-4");
  let gridColumns = prop($$props, "gridColumns", 8, "grid-cols-[auto_1fr_auto]");
  let gap = prop($$props, "gap", 8, "gap-4");
  let regionRowMain = prop($$props, "regionRowMain", 8, "");
  let regionRowHeadline = prop($$props, "regionRowHeadline", 8, "");
  let slotLead = prop($$props, "slotLead", 8, "");
  let slotDefault = prop($$props, "slotDefault", 8, "");
  let slotTrail = prop($$props, "slotTrail", 8, "");
  let label = prop($$props, "label", 8, "");
  let labelledby = prop($$props, "labelledby", 8, "");
  const cBase = "flex flex-col";
  const cRowMain = "grid items-center";
  const cRowHeadline = "";
  const cSlotLead = "flex-none flex justify-between items-center";
  const cSlotDefault = "flex-auto";
  const cSlotTrail = "flex-none flex items-center space-x-4";
  legacy_pre_effect(
    () => (deep_read_state(background()), deep_read_state(border()), deep_read_state(spacing()), deep_read_state(padding()), deep_read_state(shadow()), deep_read_state($$sanitized_props)),
    () => {
      set(classesBase, `${cBase} ${background()} ${border()} ${spacing()} ${padding()} ${shadow()} ${$$sanitized_props.class ?? ""}`);
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(gridColumns()), deep_read_state(gap()), deep_read_state(regionRowMain())),
    () => {
      set(classesRowMain, `${cRowMain} ${gridColumns()} ${gap()} ${regionRowMain()}`);
    }
  );
  legacy_pre_effect(() => deep_read_state(regionRowHeadline()), () => {
    set(classesRowHeadline, `${cRowHeadline} ${regionRowHeadline()}`);
  });
  legacy_pre_effect(() => deep_read_state(slotLead()), () => {
    set(classesSlotLead, `${cSlotLead} ${slotLead()}`);
  });
  legacy_pre_effect(() => deep_read_state(slotDefault()), () => {
    set(classesSlotDefault, `${cSlotDefault} ${slotDefault()}`);
  });
  legacy_pre_effect(() => deep_read_state(slotTrail()), () => {
    set(classesSlotTrail, `${cSlotTrail} ${slotTrail()}`);
  });
  legacy_pre_effect_reset();
  init();
  var div = root3();
  var div_1 = child(div);
  var node = child(div_1);
  if_block(node, () => $$slots.lead, ($$anchor2) => {
    var div_2 = root_12();
    var node_1 = child(div_2);
    slot(node_1, $$props, "lead", {}, null);
    reset(div_2);
    template_effect(() => set_class(div_2, `app-bar-slot-lead ${get(classesSlotLead) ?? ""}`));
    append($$anchor2, div_2);
  });
  var div_3 = sibling(node, 2);
  var node_2 = child(div_3);
  slot(node_2, $$props, "default", {}, null);
  reset(div_3);
  var node_3 = sibling(div_3, 2);
  if_block(node_3, () => $$slots.trail, ($$anchor2) => {
    var div_4 = root_2();
    var node_4 = child(div_4);
    slot(node_4, $$props, "trail", {}, null);
    reset(div_4);
    template_effect(() => set_class(div_4, `app-bar-slot-trail ${get(classesSlotTrail) ?? ""}`));
    append($$anchor2, div_4);
  });
  reset(div_1);
  var node_5 = sibling(div_1, 2);
  if_block(node_5, () => $$slots.headline, ($$anchor2) => {
    var div_5 = root_32();
    var node_6 = child(div_5);
    slot(node_6, $$props, "headline", {}, null);
    reset(div_5);
    template_effect(() => set_class(div_5, `app-bar-row-headline ${get(classesRowHeadline) ?? ""}`));
    append($$anchor2, div_5);
  });
  reset(div);
  template_effect(() => {
    set_class(div, `app-bar ${get(classesBase) ?? ""}`);
    set_attribute(div, "aria-label", label());
    set_attribute(div, "aria-labelledby", labelledby());
    set_class(div_1, `app-bar-row-main ${get(classesRowMain) ?? ""}`);
    set_class(div_3, `app-bar-slot-default ${get(classesSlotDefault) ?? ""}`);
  });
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AppBar = hmr(AppBar, () => AppBar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AppBar[HMR].source;
    set(AppBar[HMR].source, module.default[HMR].original);
  });
}
var AppBar_default = AppBar;
mark_module_end(AppBar);

// node_modules/@skeletonlabs/skeleton/dist/components/AppRail/AppRail.svelte
mark_module_start();
AppRail[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/AppRail/AppRail.svelte";
var root4 = add_locations(template(`<div data-testid="app-rail"><div><!></div> <div><!></div> <div><!></div></div>`), AppRail[FILENAME], [
  [
    34,
    0,
    [[36, 1], [38, 1], [40, 1]]
  ]
]);
function AppRail($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, AppRail);
  const classesBase = mutable_state();
  const classesRegionLead = mutable_state();
  const classesRegionDefault = mutable_state();
  const classesRegionTrail = mutable_state();
  let background = prop($$props, "background", 8, "bg-surface-100-800-token");
  let border = prop($$props, "border", 8, "");
  let width = prop($$props, "width", 8, "w-20");
  let height = prop($$props, "height", 8, "h-full");
  let gap = prop($$props, "gap", 8, "gap-0");
  let regionLead = prop($$props, "regionLead", 8, "");
  let regionDefault = prop($$props, "regionDefault", 8, "");
  let regionTrail = prop($$props, "regionTrail", 8, "");
  let hover = prop($$props, "hover", 8, "bg-primary-hover-token");
  let active = prop($$props, "active", 8, "bg-primary-active-token");
  let spacing = prop($$props, "spacing", 8, "space-y-1");
  let aspectRatio = prop($$props, "aspectRatio", 8, "aspect-square");
  setContext("active", active());
  setContext("hover", hover());
  setContext("spacing", spacing());
  setContext("aspectRatio", aspectRatio());
  const cBase = "grid grid-rows-[auto_1fr_auto] overflow-y-auto";
  const cRegionLead = "box-border";
  const cRegionDefault = "box-border";
  const cRegionTrail = "box-border";
  legacy_pre_effect(
    () => (deep_read_state(background()), deep_read_state(border()), deep_read_state(width()), deep_read_state(height()), deep_read_state(gap()), deep_read_state($$sanitized_props)),
    () => {
      set(classesBase, `${cBase} ${background()} ${border()} ${width()} ${height()} ${gap()} ${$$sanitized_props.class || ""}`);
    }
  );
  legacy_pre_effect(() => deep_read_state(regionLead()), () => {
    set(classesRegionLead, `${cRegionLead} ${regionLead()}`);
  });
  legacy_pre_effect(() => deep_read_state(regionDefault()), () => {
    set(classesRegionDefault, `${cRegionDefault} ${regionDefault()}`);
  });
  legacy_pre_effect(() => deep_read_state(regionTrail()), () => {
    set(classesRegionTrail, `${cRegionTrail} ${regionTrail()}`);
  });
  legacy_pre_effect_reset();
  init();
  var div = root4();
  var div_1 = child(div);
  var node = child(div_1);
  slot(node, $$props, "lead", {}, null);
  reset(div_1);
  var div_2 = sibling(div_1, 2);
  var node_1 = child(div_2);
  slot(node_1, $$props, "default", {}, null);
  reset(div_2);
  var div_3 = sibling(div_2, 2);
  var node_2 = child(div_3);
  slot(node_2, $$props, "trail", {}, null);
  reset(div_3);
  reset(div);
  template_effect(() => {
    set_class(div, `app-rail ${get(classesBase) ?? ""}`);
    set_class(div_1, `app-bar-lead ${get(classesRegionLead) ?? ""}`);
    set_class(div_2, `app-bar-default ${get(classesRegionDefault) ?? ""}`);
    set_class(div_3, `app-bar-trail ${get(classesRegionTrail) ?? ""}`);
  });
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AppRail = hmr(AppRail, () => AppRail[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AppRail[HMR].source;
    set(AppRail[HMR].source, module.default[HMR].original);
  });
}
var AppRail_default = AppRail;
mark_module_end(AppRail);

// node_modules/@skeletonlabs/skeleton/dist/components/AppRail/AppRailTile.svelte
mark_module_start();
AppRailTile[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/AppRail/AppRailTile.svelte";
var root_13 = add_locations(template(`<div><!></div>`), AppRailTile[FILENAME], [[56, 21]]);
var root5 = add_locations(template(`<label data-testid="app-rail-tile"><button tabindex="0"><div class="h-0 w-0 overflow-hidden"><input></div> <div><!> <div><!></div></div></button></label>`), AppRailTile[FILENAME], [
  [
    45,
    0,
    [
      [
        49,
        1,
        [
          [51, 2, [[52, 3]]],
          [55, 2, [[57, 3]]]
        ]
      ]
    ]
  ]
]);
function AppRailTile($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "group",
    "name",
    "value",
    "title",
    "regionLead",
    "regionLabel",
    "hover",
    "active",
    "spacing",
    "width",
    "aspectRatio"
  ]);
  push($$props, false, AppRailTile);
  const classActive = mutable_state();
  const classesBase = mutable_state();
  const classesWrapper = mutable_state();
  const classesInterface = mutable_state();
  const classesLead = mutable_state();
  const classesLabel = mutable_state();
  const binding_group = [];
  let group = prop($$props, "group", 12);
  let name = prop($$props, "name", 8);
  let value = prop($$props, "value", 8);
  let title = prop($$props, "title", 8, "");
  let regionLead = prop($$props, "regionLead", 8, "");
  let regionLabel = prop($$props, "regionLabel", 8, "");
  let hover = prop($$props, "hover", 24, () => getContext("hover"));
  let active = prop($$props, "active", 24, () => getContext("active"));
  let spacing = prop($$props, "spacing", 24, () => getContext("spacing"));
  let width = prop($$props, "width", 24, () => getContext("width"));
  let aspectRatio = prop($$props, "aspectRatio", 24, () => getContext("aspectRatio"));
  const cBase = "cursor-pointer";
  const cWrapper = "flex flex-col justify-center items-stretch w-full";
  const cInterface = "text-center";
  const cLabel = "font-bold text-xs";
  let elemInput = mutable_state();
  function onKeyDown(event2) {
    if (["Enter", "Space"].includes(event2.code)) {
      event2.preventDefault();
      selectElemInput();
    }
  }
  function selectElemInput() {
    get(elemInput).click();
  }
  function prunedRestProps() {
    delete $$restProps.class;
    return $$restProps;
  }
  legacy_pre_effect(
    () => (deep_read_state(group()), deep_read_state(value()), deep_read_state(active())),
    () => {
      set(classActive, strict_equals(group(), value()) ? active() : "");
    }
  );
  legacy_pre_effect(() => deep_read_state($$sanitized_props), () => {
    set(classesBase, `${cBase} ${$$sanitized_props.class || ""}`);
  });
  legacy_pre_effect(
    () => (deep_read_state(aspectRatio()), deep_read_state(width()), deep_read_state(hover()), get(classActive)),
    () => {
      set(classesWrapper, `${cWrapper} ${aspectRatio()} ${width()} ${hover()} ${get(classActive)}`);
    }
  );
  legacy_pre_effect(() => deep_read_state(spacing()), () => {
    set(classesInterface, `${cInterface} ${spacing()}`);
  });
  legacy_pre_effect(() => deep_read_state(regionLead()), () => {
    set(classesLead, `${regionLead()}`);
  });
  legacy_pre_effect(() => deep_read_state(regionLabel()), () => {
    set(classesLabel, `${cLabel} ${regionLabel()}`);
  });
  legacy_pre_effect_reset();
  init();
  var label = root5();
  var button = child(label);
  var div = child(button);
  var input = child(div);
  remove_input_defaults(input);
  const spread_with_call = derived_safe_equal(prunedRestProps);
  let attributes;
  bind_this(input, ($$value) => set(elemInput, $$value), () => get(elemInput));
  reset(div);
  var div_1 = sibling(div, 2);
  var node = child(div_1);
  if_block(node, () => $$slots.lead, ($$anchor2) => {
    var div_2 = root_13();
    var node_1 = child(div_2);
    slot(node_1, $$props, "lead", {}, null);
    reset(div_2);
    template_effect(() => set_class(div_2, `app-rail-lead ${get(classesLead) ?? ""}`));
    append($$anchor2, div_2);
  });
  var div_3 = sibling(node, 2);
  var node_2 = child(div_3);
  slot(node_2, $$props, "default", {}, null);
  reset(div_3);
  reset(div_1);
  reset(button);
  reset(label);
  template_effect(() => {
    set_class(label, `app-rail-tile ${get(classesBase) ?? ""}`);
    set_attribute(label, "title", title());
    set_class(button, `app-rail-wrapper ${get(classesWrapper) ?? ""}`);
    attributes = set_attributes(input, attributes, {
      type: "radio",
      name: name(),
      value: value(),
      ...get(spread_with_call),
      tabindex: "-1"
    });
    set_class(div_1, `app-rail-interface ${get(classesInterface) ?? ""}`);
    set_class(div_3, `app-rail-label ${get(classesLabel) ?? ""}`);
  });
  bind_group(
    binding_group,
    [],
    input,
    () => {
      value();
      return group();
    },
    group
  );
  event("click", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("change", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("click", button, selectElemInput);
  event("click", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keydown", button, onKeyDown);
  event("keyup", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keypress", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseover", label, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseleave", label, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("focus", label, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("blur", label, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, label);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AppRailTile = hmr(AppRailTile, () => AppRailTile[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AppRailTile[HMR].source;
    set(AppRailTile[HMR].source, module.default[HMR].original);
  });
}
var AppRailTile_default = AppRailTile;
mark_module_end(AppRailTile);

// node_modules/@skeletonlabs/skeleton/dist/components/AppRail/AppRailAnchor.svelte
mark_module_start();
AppRailAnchor[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/AppRail/AppRailAnchor.svelte";
var root_14 = add_locations(template(`<div><!></div>`), AppRailAnchor[FILENAME], [[30, 20]]);
var root6 = add_locations(template(`<a><div><!> <div><!></div></div></a>`), AppRailAnchor[FILENAME], [
  [
    28,
    0,
    [[29, 1, [[31, 2]]]]
  ]
]);
function AppRailAnchor($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "selected",
    "regionLead",
    "regionLabel",
    "hover",
    "active",
    "spacing",
    "aspectRatio"
  ]);
  push($$props, false, AppRailAnchor);
  const classActive = mutable_state();
  const classesBase = mutable_state();
  const classesWrapper = mutable_state();
  const classesLead = mutable_state();
  const classesLabel = mutable_state();
  let selected = prop($$props, "selected", 8, false);
  let regionLead = prop($$props, "regionLead", 8, "flex justify-center items-center");
  let regionLabel = prop($$props, "regionLabel", 8, "");
  let hover = prop($$props, "hover", 24, () => getContext("hover"));
  let active = prop($$props, "active", 24, () => getContext("active"));
  let spacing = prop($$props, "spacing", 24, () => getContext("spacing"));
  let aspectRatio = prop($$props, "aspectRatio", 24, () => getContext("aspectRatio"));
  const cBase = "unstyled";
  const cWrapper = "w-full flex flex-col justify-center items-stretch text-center space-y-1";
  const cLabel = "font-bold text-xs";
  function prunedRestProps() {
    delete $$restProps.class;
    return $$restProps;
  }
  legacy_pre_effect(
    () => (deep_read_state(selected()), deep_read_state(active())),
    () => {
      set(classActive, selected() ? active() : "");
    }
  );
  legacy_pre_effect(() => deep_read_state($$sanitized_props), () => {
    set(classesBase, `${cBase} ${$$sanitized_props.class || ""}`);
  });
  legacy_pre_effect(
    () => (deep_read_state(aspectRatio()), deep_read_state(hover()), deep_read_state(spacing()), get(classActive)),
    () => {
      set(classesWrapper, `${cWrapper} ${aspectRatio()} ${hover()} ${spacing()} ${get(classActive)}`);
    }
  );
  legacy_pre_effect(() => deep_read_state(regionLead()), () => {
    set(classesLead, `${regionLead()}`);
  });
  legacy_pre_effect(() => deep_read_state(regionLabel()), () => {
    set(classesLabel, `${cLabel} ${regionLabel()}`);
  });
  legacy_pre_effect_reset();
  init();
  var a = root6();
  const spread_with_call = derived_safe_equal(prunedRestProps);
  let attributes;
  var div = child(a);
  var node = child(div);
  if_block(node, () => $$slots.lead, ($$anchor2) => {
    var div_1 = root_14();
    var node_1 = child(div_1);
    slot(node_1, $$props, "lead", {}, null);
    reset(div_1);
    template_effect(() => set_class(div_1, `app-rail-lead ${get(classesLead) ?? ""}`));
    append($$anchor2, div_1);
  });
  var div_2 = sibling(node, 2);
  var node_2 = child(div_2);
  slot(node_2, $$props, "default", {}, null);
  reset(div_2);
  reset(div);
  reset(a);
  template_effect(() => {
    attributes = set_attributes(a, attributes, {
      class: `app-rail-anchor ${get(classesBase) ?? ""}`,
      href: $$sanitized_props.href,
      ...get(spread_with_call),
      "data-testid": "app-rail-anchor"
    });
    set_class(div, `app-rail-wrapper ${get(classesWrapper) ?? ""}`);
    set_class(div_2, `app-rail-label ${get(classesLabel) ?? ""}`);
  });
  event("click", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, a);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AppRailAnchor = hmr(AppRailAnchor, () => AppRailAnchor[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AppRailAnchor[HMR].source;
    set(AppRailAnchor[HMR].source, module.default[HMR].original);
  });
}
var AppRailAnchor_default = AppRailAnchor;
mark_module_end(AppRailAnchor);

// node_modules/@skeletonlabs/skeleton/dist/components/AppShell/AppShell.svelte
mark_module_start();
AppShell[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/AppShell/AppShell.svelte";
var root_15 = add_locations(template(`<header id="shell-header"><!></header>`), AppShell[FILENAME], [[36, 2]]);
var root_22 = add_locations(template(`<aside id="sidebar-left"><!></aside>`), AppShell[FILENAME], [[43, 3]]);
var root_33 = add_locations(template(`<header id="page-header"><!></header>`), AppShell[FILENAME], [[50, 4]]);
var root_5 = add_locations(template(`<footer id="page-footer"><!></footer>`), AppShell[FILENAME], [[58, 4]]);
var root_7 = add_locations(template(`<aside id="sidebar-right"><!></aside>`), AppShell[FILENAME], [[64, 3]]);
var root_82 = add_locations(template(`<footer id="shell-footer"><!></footer>`), AppShell[FILENAME], [[70, 2]]);
var root7 = add_locations(template(`<div id="appShell" data-testid="app-shell"><!> <div><!> <div id="page"><!> <main id="page-content"><!></main> <!></div> <!></div> <!></div>`), AppShell[FILENAME], [
  [
    33,
    0,
    [
      [
        40,
        1,
        [[47, 2, [[54, 3]]]]
      ]
    ]
  ]
]);
function AppShell($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, AppShell);
  const classesBase = mutable_state();
  const classesHeader = mutable_state();
  const classesSidebarLeft = mutable_state();
  const classesSidebarRight = mutable_state();
  const classesPageHeader = mutable_state();
  const classesPageContent = mutable_state();
  const classesPageFooter = mutable_state();
  const classesFooter = mutable_state();
  let scrollbarGutter = prop($$props, "scrollbarGutter", 8, "auto");
  let regionPage = prop($$props, "regionPage", 8, "");
  let slotHeader = prop($$props, "slotHeader", 8, "z-10");
  let slotSidebarLeft = prop($$props, "slotSidebarLeft", 8, "w-auto");
  let slotSidebarRight = prop($$props, "slotSidebarRight", 8, "w-auto");
  let slotPageHeader = prop($$props, "slotPageHeader", 8, "");
  let slotPageContent = prop($$props, "slotPageContent", 8, "");
  let slotPageFooter = prop($$props, "slotPageFooter", 8, "");
  let slotFooter = prop($$props, "slotFooter", 8, "");
  const cBaseAppShell = "w-full h-full flex flex-col overflow-hidden";
  const cContentArea = "w-full h-full flex overflow-hidden";
  const cPage = "flex-1 overflow-x-hidden flex flex-col";
  const cSidebarLeft = "flex-none overflow-x-hidden overflow-y-auto";
  const cSidebarRight = "flex-none overflow-x-hidden overflow-y-auto";
  legacy_pre_effect(() => deep_read_state($$sanitized_props), () => {
    set(classesBase, `${cBaseAppShell} ${$$sanitized_props.class ?? ""}`);
  });
  legacy_pre_effect(() => deep_read_state(slotHeader()), () => {
    set(classesHeader, `${slotHeader()}`);
  });
  legacy_pre_effect(() => deep_read_state(slotSidebarLeft()), () => {
    set(classesSidebarLeft, `${cSidebarLeft} ${slotSidebarLeft()}`);
  });
  legacy_pre_effect(() => deep_read_state(slotSidebarRight()), () => {
    set(classesSidebarRight, `${cSidebarRight} ${slotSidebarRight()}`);
  });
  legacy_pre_effect(() => deep_read_state(slotPageHeader()), () => {
    set(classesPageHeader, `${slotPageHeader()}`);
  });
  legacy_pre_effect(() => deep_read_state(slotPageContent()), () => {
    set(classesPageContent, `${slotPageContent()}`);
  });
  legacy_pre_effect(() => deep_read_state(slotPageFooter()), () => {
    set(classesPageFooter, `${slotPageFooter()}`);
  });
  legacy_pre_effect(() => deep_read_state(slotFooter()), () => {
    set(classesFooter, `${slotFooter()}`);
  });
  legacy_pre_effect_reset();
  init();
  var div = root7();
  var node = child(div);
  if_block(node, () => $$slots.header, ($$anchor2) => {
    var header = root_15();
    var node_1 = child(header);
    slot(node_1, $$props, "header", {}, null);
    reset(header);
    template_effect(() => set_class(header, `flex-none ${get(classesHeader) ?? ""}`));
    append($$anchor2, header);
  });
  var div_1 = sibling(node, 2);
  set_class(div_1, `flex-auto ${cContentArea ?? ""}`);
  var node_2 = child(div_1);
  if_block(node_2, () => $$slots.sidebarLeft, ($$anchor2) => {
    var aside = root_22();
    var node_3 = child(aside);
    slot(node_3, $$props, "sidebarLeft", {}, null);
    reset(aside);
    template_effect(() => set_class(aside, get(classesSidebarLeft)));
    append($$anchor2, aside);
  });
  var div_2 = sibling(node_2, 2);
  var node_4 = child(div_2);
  if_block(node_4, () => $$slots.pageHeader, ($$anchor2) => {
    var header_1 = root_33();
    var node_5 = child(header_1);
    slot(node_5, $$props, "pageHeader", {}, ($$anchor3) => {
      var text2 = text("(slot:header)");
      append($$anchor3, text2);
    });
    reset(header_1);
    template_effect(() => set_class(header_1, `flex-none ${get(classesPageHeader) ?? ""}`));
    append($$anchor2, header_1);
  });
  var main = sibling(node_4, 2);
  var node_6 = child(main);
  slot(node_6, $$props, "default", {}, null);
  reset(main);
  var node_7 = sibling(main, 2);
  if_block(node_7, () => $$slots.pageFooter, ($$anchor2) => {
    var footer = root_5();
    var node_8 = child(footer);
    slot(node_8, $$props, "pageFooter", {}, ($$anchor3) => {
      var text_1 = text("(slot:footer)");
      append($$anchor3, text_1);
    });
    reset(footer);
    template_effect(() => set_class(footer, `flex-none ${get(classesPageFooter) ?? ""}`));
    append($$anchor2, footer);
  });
  reset(div_2);
  var node_9 = sibling(div_2, 2);
  if_block(node_9, () => $$slots.sidebarRight, ($$anchor2) => {
    var aside_1 = root_7();
    var node_10 = child(aside_1);
    slot(node_10, $$props, "sidebarRight", {}, null);
    reset(aside_1);
    template_effect(() => set_class(aside_1, get(classesSidebarRight)));
    append($$anchor2, aside_1);
  });
  reset(div_1);
  var node_11 = sibling(div_1, 2);
  if_block(node_11, () => $$slots.footer, ($$anchor2) => {
    var footer_1 = root_82();
    var node_12 = child(footer_1);
    slot(node_12, $$props, "footer", {}, null);
    reset(footer_1);
    template_effect(() => set_class(footer_1, `flex-none ${get(classesFooter) ?? ""}`));
    append($$anchor2, footer_1);
  });
  reset(div);
  template_effect(() => {
    set_class(div, get(classesBase));
    set_class(div_2, `${regionPage() ?? ""} ${cPage ?? ""}`);
    set_style(div_2, "scrollbar-gutter", scrollbarGutter());
    set_class(main, `flex-auto ${get(classesPageContent) ?? ""}`);
  });
  event("scroll", div_2, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AppShell = hmr(AppShell, () => AppShell[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AppShell[HMR].source;
    set(AppShell[HMR].source, module.default[HMR].original);
  });
}
var AppShell_default = AppShell;
mark_module_end(AppShell);

// node_modules/@skeletonlabs/skeleton/dist/components/Autocomplete/Autocomplete.svelte
mark_module_start();
Autocomplete[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/Autocomplete/Autocomplete.svelte";
var root_23 = add_locations(template(`<li><button type="button"><!></button></li>`), Autocomplete[FILENAME], [[83, 5, [[88, 6]]]]);
var root_16 = add_locations(template(`<nav><ul></ul></nav>`), Autocomplete[FILENAME], [[80, 2, [[81, 3]]]]);
var root_34 = add_locations(template(`<div><!></div>`), Autocomplete[FILENAME], [[96, 2]]);
var root8 = add_locations(template(`<div data-testid="autocomplete"><!></div>`), Autocomplete[FILENAME], [[78, 0]]);
function Autocomplete($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, Autocomplete);
  const $$stores = setup_stores();
  const $prefersReducedMotionStore = () => (validate_store(prefersReducedMotionStore, "prefersReducedMotionStore"), store_get(prefersReducedMotionStore, "$prefersReducedMotionStore", $$stores));
  const listedOptions = mutable_state();
  const optionsFiltered = mutable_state();
  const sliceLimit = mutable_state();
  const classesBase = mutable_state();
  const classesNav = mutable_state();
  const classesList = mutable_state();
  const classesItem = mutable_state();
  const classesButton = mutable_state();
  const classesEmpty = mutable_state();
  const dispatch = createEventDispatcher();
  let input = prop($$props, "input", 24, () => void 0);
  let options = prop($$props, "options", 24, () => []);
  let limit = prop($$props, "limit", 24, () => void 0);
  let allowlist = prop($$props, "allowlist", 24, () => []);
  let denylist = prop($$props, "denylist", 24, () => []);
  let emptyState = prop($$props, "emptyState", 8, "No Results Found.");
  let regionNav = prop($$props, "regionNav", 8, "");
  let regionList = prop($$props, "regionList", 8, "list-nav");
  let regionItem = prop($$props, "regionItem", 8, "");
  let regionButton = prop($$props, "regionButton", 8, "w-full");
  let regionEmpty = prop($$props, "regionEmpty", 8, "text-center");
  let filter2 = prop($$props, "filter", 8, filterOptions);
  let transitions = prop($$props, "transitions", 24, () => !$prefersReducedMotionStore());
  let transitionIn = prop($$props, "transitionIn", 8, slide);
  let transitionInParams = prop($$props, "transitionInParams", 24, () => ({ duration: 200 }));
  let transitionOut = prop($$props, "transitionOut", 8, slide);
  let transitionOutParams = prop($$props, "transitionOutParams", 24, () => ({ duration: 200 }));
  function filterByAllowDeny(allowlist2, denylist2) {
    let _options = [...options()];
    if (allowlist2.length) {
      _options = _options.filter((option) => allowlist2.includes(option.value));
    }
    if (denylist2.length) {
      _options = _options.filter((option) => !denylist2.includes(option.value));
    }
    if (!allowlist2.length && !denylist2.length) {
      _options = options();
    }
    set(listedOptions, _options);
  }
  function filterOptions() {
    let _options = [...get(listedOptions)];
    _options = _options.filter((option) => {
      const inputFormatted = String(input()).toLowerCase().trim();
      let optionFormatted = JSON.stringify([option.label, option.value, option.keywords]).toLowerCase();
      if (optionFormatted.includes(inputFormatted)) return option;
    });
    return _options;
  }
  function onSelection(option) {
    dispatch("selection", option);
  }
  legacy_pre_effect(() => deep_read_state(options()), () => {
    set(listedOptions, options());
  });
  legacy_pre_effect(
    () => (deep_read_state(allowlist()), deep_read_state(denylist())),
    () => {
      filterByAllowDeny(allowlist(), denylist());
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(input()), deep_read_state(filter2()), get(listedOptions)),
    () => {
      set(optionsFiltered, input() ? filter2()() : get(listedOptions));
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(limit()), get(optionsFiltered)),
    () => {
      set(sliceLimit, limit() ?? get(optionsFiltered).length);
    }
  );
  legacy_pre_effect(() => deep_read_state($$sanitized_props), () => {
    set(classesBase, `${$$sanitized_props.class ?? ""}`);
  });
  legacy_pre_effect(() => deep_read_state(regionNav()), () => {
    set(classesNav, `${regionNav()}`);
  });
  legacy_pre_effect(() => deep_read_state(regionList()), () => {
    set(classesList, `${regionList()}`);
  });
  legacy_pre_effect(() => deep_read_state(regionItem()), () => {
    set(classesItem, `${regionItem()}`);
  });
  legacy_pre_effect(() => deep_read_state(regionButton()), () => {
    set(classesButton, `${regionButton()}`);
  });
  legacy_pre_effect(() => deep_read_state(regionEmpty()), () => {
    set(classesEmpty, `${regionEmpty()}`);
  });
  legacy_pre_effect_reset();
  init();
  var div = root8();
  var node = child(div);
  if_block(
    node,
    () => get(optionsFiltered).length > 0,
    ($$anchor2) => {
      var nav = root_16();
      var ul = child(nav);
      validate_each_keys(() => get(optionsFiltered).slice(0, get(sliceLimit)), (option) => option);
      each(ul, 5, () => get(optionsFiltered).slice(0, get(sliceLimit)), (option) => option, ($$anchor3, option) => {
        var li = root_23();
        var button = child(li);
        var node_1 = child(button);
        html(node_1, () => get(option).label, false, false);
        reset(button);
        reset(li);
        template_effect(() => {
          set_class(li, `autocomplete-item ${get(classesItem) ?? ""}`);
          set_class(button, `autocomplete-button ${get(classesButton) ?? ""}`);
        });
        event("click", button, () => onSelection(get(option)));
        event("click", button, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("keypress", button, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        transition(1, li, () => dynamicTransition, () => ({
          transition: transitionIn(),
          params: transitionInParams(),
          enabled: transitions()
        }));
        transition(2, li, () => dynamicTransition, () => ({
          transition: transitionOut(),
          params: transitionOutParams(),
          enabled: transitions()
        }));
        append($$anchor3, li);
      });
      reset(ul);
      reset(nav);
      template_effect(() => {
        set_class(nav, `autocomplete-nav ${get(classesNav) ?? ""}`);
        set_class(ul, `autocomplete-list ${get(classesList) ?? ""}`);
      });
      append($$anchor2, nav);
    },
    ($$anchor2) => {
      var div_1 = root_34();
      var node_2 = child(div_1);
      html(node_2, emptyState, false, false);
      reset(div_1);
      template_effect(() => set_class(div_1, `autocomplete-empty ${get(classesEmpty) ?? ""}`));
      append($$anchor2, div_1);
    }
  );
  reset(div);
  template_effect(() => set_class(div, `autocomplete ${get(classesBase) ?? ""}`));
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Autocomplete = hmr(Autocomplete, () => Autocomplete[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Autocomplete[HMR].source;
    set(Autocomplete[HMR].source, module.default[HMR].original);
  });
}
var Autocomplete_default = Autocomplete;
mark_module_end(Autocomplete);

// node_modules/@skeletonlabs/skeleton/dist/components/Avatar/Avatar.svelte
mark_module_start();
Avatar[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/Avatar/Avatar.svelte";
var root_17 = add_locations(template(`<img>`), Avatar[FILENAME], [[27, 2]]);
var root_35 = add_locations(template(`<svg class="avatar-initials w-full h-full" viewBox="0 0 512 512"><text x="50%" y="50%" dominant-baseline="central" text-anchor="middle" font-weight="bold"> </text></svg>`), Avatar[FILENAME], [[36, 2, [[37, 3]]]]);
var root9 = add_locations(template(`<figure><!></figure>`), Avatar[FILENAME], [[25, 0]]);
function Avatar($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "initials",
    "fill",
    "fontSize",
    "src",
    "fallback",
    "action",
    "actionParams",
    "background",
    "width",
    "border",
    "rounded",
    "shadow",
    "cursor"
  ]);
  push($$props, false, Avatar);
  const classesBase = mutable_state();
  let initials = prop($$props, "initials", 8, "");
  let fill = prop($$props, "fill", 8, "fill-token");
  let fontSize = prop($$props, "fontSize", 8, 150);
  let src = prop($$props, "src", 12, "");
  let fallback = prop($$props, "fallback", 8, "");
  let action2 = prop($$props, "action", 8, () => {
  });
  let actionParams = prop($$props, "actionParams", 8, "");
  let background = prop($$props, "background", 8, "bg-surface-400-500-token");
  let width = prop($$props, "width", 8, "w-16");
  let border = prop($$props, "border", 8, "");
  let rounded = prop($$props, "rounded", 8, "rounded-full");
  let shadow = prop($$props, "shadow", 8, "");
  let cursor = prop($$props, "cursor", 8, "");
  let cBase = "flex aspect-square text-surface-50 font-semibold justify-center items-center overflow-hidden isolate";
  let cImage = "w-full object-cover";
  function prunedRestProps() {
    delete $$restProps.class;
    return $$restProps;
  }
  legacy_pre_effect(
    () => (deep_read_state(background()), deep_read_state(width()), deep_read_state(border()), deep_read_state(rounded()), deep_read_state(shadow()), deep_read_state(cursor()), deep_read_state($$sanitized_props)),
    () => {
      set(classesBase, `${cBase} ${background()} ${width()} ${border()} ${rounded()} ${shadow()} ${cursor()} ${$$sanitized_props.class ?? ""}`);
    }
  );
  legacy_pre_effect_reset();
  init();
  var figure = root9();
  const spread_with_call = derived_safe_equal(prunedRestProps);
  let attributes;
  var node = child(figure);
  if_block(
    node,
    () => src() || fallback(),
    ($$anchor2) => {
      var img = root_17();
      set_class(img, `avatar-image ${cImage ?? ""}`);
      action(img, ($$node, $$action_arg) => action2()($$node, $$action_arg), actionParams);
      effect(() => event("error", img, () => src(fallback())));
      template_effect(() => {
        set_attribute(img, "style", $$sanitized_props.style ?? "");
        set_attribute(img, "src", src());
        set_attribute(img, "alt", $$sanitized_props.alt || "");
      });
      replay_events(img);
      append($$anchor2, img);
    },
    ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      if_block(
        node_1,
        initials,
        ($$anchor3) => {
          var svg = root_35();
          var text2 = child(svg);
          var text_1 = child(text2, true);
          template_effect(() => set_text(text_1, String(initials()).substring(0, 2).toUpperCase()));
          reset(text2);
          reset(svg);
          template_effect(() => {
            set_attribute(text2, "font-size", fontSize());
            set_svg_class(text2, `avatar-text ${fill() ?? ""}`);
          });
          append($$anchor3, svg);
        },
        ($$anchor3) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          slot(node_2, $$props, "default", {}, null);
          append($$anchor3, fragment_1);
        },
        true
      );
      append($$anchor2, fragment);
    }
  );
  reset(figure);
  template_effect(() => attributes = set_attributes(figure, attributes, {
    class: `avatar ${get(classesBase) ?? ""}`,
    "data-testid": "avatar",
    ...get(spread_with_call)
  }));
  append($$anchor, figure);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Avatar = hmr(Avatar, () => Avatar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Avatar[HMR].source;
    set(Avatar[HMR].source, module.default[HMR].original);
  });
}
var Avatar_default = Avatar;
mark_module_end(Avatar);

// node_modules/@skeletonlabs/skeleton/dist/components/ConicGradient/settings.js
var tailwindDefaultColors = [
  {
    label: "slate",
    shades: {
      "50": { hex: "#f8fafc", rgb: "248 250 252" },
      "100": { hex: "#f1f5f9", rgb: "241 245 249" },
      "200": { hex: "#e2e8f0", rgb: "226 232 240" },
      "300": { hex: "#cbd5e1", rgb: "203 213 225" },
      "400": { hex: "#94a3b8", rgb: "148 163 184" },
      "500": { hex: "#64748b", rgb: "100 116 139" },
      "600": { hex: "#475569", rgb: "71 85 105" },
      "700": { hex: "#334155", rgb: "51 65 85" },
      "800": { hex: "#1e293b", rgb: "30 41 59" },
      "900": { hex: "#0f172a", rgb: "15 23 42" }
    }
  },
  {
    label: "gray",
    shades: {
      "50": { hex: "#f9fafb", rgb: "249 250 251" },
      "100": { hex: "#f3f4f6", rgb: "243 244 246" },
      "200": { hex: "#e5e7eb", rgb: "229 231 235" },
      "300": { hex: "#d1d5db", rgb: "209 213 219" },
      "400": { hex: "#9ca3af", rgb: "156 163 175" },
      "500": { hex: "#6b7280", rgb: "107 114 128" },
      "600": { hex: "#4b5563", rgb: "75 85 99" },
      "700": { hex: "#374151", rgb: "55 65 81" },
      "800": { hex: "#1f2937", rgb: "31 41 55" },
      "900": { hex: "#111827", rgb: "17 24 39" }
    }
  },
  {
    label: "zinc",
    shades: {
      "50": { hex: "#fafafa", rgb: "250 250 250" },
      "100": { hex: "#f4f4f5", rgb: "244 244 245" },
      "200": { hex: "#e4e4e7", rgb: "228 228 231" },
      "300": { hex: "#d4d4d8", rgb: "212 212 216" },
      "400": { hex: "#a1a1aa", rgb: "161 161 170" },
      "500": { hex: "#71717a", rgb: "113 113 122" },
      "600": { hex: "#52525b", rgb: "82 82 91" },
      "700": { hex: "#3f3f46", rgb: "63 63 70" },
      "800": { hex: "#27272a", rgb: "39 39 42" },
      "900": { hex: "#18181b", rgb: "24 24 27" }
    }
  },
  {
    label: "neutral",
    shades: {
      "50": { hex: "#fafafa", rgb: "250 250 250" },
      "100": { hex: "#f5f5f5", rgb: "245 245 245" },
      "200": { hex: "#e5e5e5", rgb: "229 229 229" },
      "300": { hex: "#d4d4d4", rgb: "212 212 212" },
      "400": { hex: "#a3a3a3", rgb: "163 163 163" },
      "500": { hex: "#737373", rgb: "115 115 115" },
      "600": { hex: "#525252", rgb: "82 82 82" },
      "700": { hex: "#404040", rgb: "64 64 64" },
      "800": { hex: "#262626", rgb: "38 38 38" },
      "900": { hex: "#171717", rgb: "23 23 23" }
    }
  },
  {
    label: "stone",
    shades: {
      "50": { hex: "#fafaf9", rgb: "250 250 249" },
      "100": { hex: "#f5f5f4", rgb: "245 245 244" },
      "200": { hex: "#e7e5e4", rgb: "231 229 228" },
      "300": { hex: "#d6d3d1", rgb: "214 211 209" },
      "400": { hex: "#a8a29e", rgb: "168 162 158" },
      "500": { hex: "#78716c", rgb: "120 113 108" },
      "600": { hex: "#57534e", rgb: "87 83 78" },
      "700": { hex: "#44403c", rgb: "68 64 60" },
      "800": { hex: "#292524", rgb: "41 37 36" },
      "900": { hex: "#1c1917", rgb: "28 25 23" }
    }
  },
  {
    label: "red",
    shades: {
      "50": { hex: "#fef2f2", rgb: "254 242 242" },
      "100": { hex: "#fee2e2", rgb: "254 226 226" },
      "200": { hex: "#fecaca", rgb: "254 202 202" },
      "300": { hex: "#fca5a5", rgb: "252 165 165" },
      "400": { hex: "#f87171", rgb: "248 113 113" },
      "500": { hex: "#ef4444", rgb: "239 68 68" },
      "600": { hex: "#dc2626", rgb: "220 38 38" },
      "700": { hex: "#b91c1c", rgb: "185 28 28" },
      "800": { hex: "#991b1b", rgb: "153 27 27" },
      "900": { hex: "#7f1d1d", rgb: "127 29 29" }
    }
  },
  {
    label: "orange",
    shades: {
      "50": { hex: "#fff7ed", rgb: "255 247 237" },
      "100": { hex: "#ffedd5", rgb: "255 237 213" },
      "200": { hex: "#fed7aa", rgb: "254 215 170" },
      "300": { hex: "#fdba74", rgb: "253 186 116" },
      "400": { hex: "#fb923c", rgb: "251 146 60" },
      "500": { hex: "#f97316", rgb: "249 115 22" },
      "600": { hex: "#ea580c", rgb: "234 88 12" },
      "700": { hex: "#c2410c", rgb: "194 65 12" },
      "800": { hex: "#9a3412", rgb: "154 52 18" },
      "900": { hex: "#7c2d12", rgb: "124 45 18" }
    }
  },
  {
    label: "amber",
    shades: {
      "50": { hex: "#fffbeb", rgb: "255 251 235" },
      "100": { hex: "#fef3c7", rgb: "254 243 199" },
      "200": { hex: "#fde68a", rgb: "253 230 138" },
      "300": { hex: "#fcd34d", rgb: "252 211 77" },
      "400": { hex: "#fbbf24", rgb: "251 191 36" },
      "500": { hex: "#f59e0b", rgb: "245 158 11" },
      "600": { hex: "#d97706", rgb: "217 119 6" },
      "700": { hex: "#b45309", rgb: "180 83 9" },
      "800": { hex: "#92400e", rgb: "146 64 14" },
      "900": { hex: "#78350f", rgb: "120 53 15" }
    }
  },
  {
    label: "yellow",
    shades: {
      "50": { hex: "#fefce8", rgb: "254 252 232" },
      "100": { hex: "#fef9c3", rgb: "254 249 195" },
      "200": { hex: "#fef08a", rgb: "254 240 138" },
      "300": { hex: "#fde047", rgb: "253 224 71" },
      "400": { hex: "#facc15", rgb: "250 204 21" },
      "500": { hex: "#eab308", rgb: "234 179 8" },
      "600": { hex: "#ca8a04", rgb: "202 138 4" },
      "700": { hex: "#a16207", rgb: "161 98 7" },
      "800": { hex: "#854d0e", rgb: "133 77 14" },
      "900": { hex: "#713f12", rgb: "113 63 18" }
    }
  },
  {
    label: "lime",
    shades: {
      "50": { hex: "#f7fee7", rgb: "247 254 231" },
      "100": { hex: "#ecfccb", rgb: "236 252 203" },
      "200": { hex: "#d9f99d", rgb: "217 249 157" },
      "300": { hex: "#bef264", rgb: "190 242 100" },
      "400": { hex: "#a3e635", rgb: "163 230 53" },
      "500": { hex: "#84cc16", rgb: "132 204 22" },
      "600": { hex: "#65a30d", rgb: "101 163 13" },
      "700": { hex: "#4d7c0f", rgb: "77 124 15" },
      "800": { hex: "#3f6212", rgb: "63 98 18" },
      "900": { hex: "#365314", rgb: "54 83 20" }
    }
  },
  {
    label: "green",
    shades: {
      "50": { hex: "#f0fdf4", rgb: "240 253 244" },
      "100": { hex: "#dcfce7", rgb: "220 252 231" },
      "200": { hex: "#bbf7d0", rgb: "187 247 208" },
      "300": { hex: "#86efac", rgb: "134 239 172" },
      "400": { hex: "#4ade80", rgb: "74 222 128" },
      "500": { hex: "#22c55e", rgb: "34 197 94" },
      "600": { hex: "#16a34a", rgb: "22 163 74" },
      "700": { hex: "#15803d", rgb: "21 128 61" },
      "800": { hex: "#166534", rgb: "22 101 52" },
      "900": { hex: "#14532d", rgb: "20 83 45" }
    }
  },
  {
    label: "emerald",
    shades: {
      "50": { hex: "#ecfdf5", rgb: "236 253 245" },
      "100": { hex: "#d1fae5", rgb: "209 250 229" },
      "200": { hex: "#a7f3d0", rgb: "167 243 208" },
      "300": { hex: "#6ee7b7", rgb: "110 231 183" },
      "400": { hex: "#34d399", rgb: "52 211 153" },
      "500": { hex: "#10b981", rgb: "16 185 129" },
      "600": { hex: "#059669", rgb: "5 150 105" },
      "700": { hex: "#047857", rgb: "4 120 87" },
      "800": { hex: "#065f46", rgb: "6 95 70" },
      "900": { hex: "#064e3b", rgb: "6 78 59" }
    }
  },
  {
    label: "teal",
    shades: {
      "50": { hex: "#f0fdfa", rgb: "240 253 250" },
      "100": { hex: "#ccfbf1", rgb: "204 251 241" },
      "200": { hex: "#99f6e4", rgb: "153 246 228" },
      "300": { hex: "#5eead4", rgb: "94 234 212" },
      "400": { hex: "#2dd4bf", rgb: "45 212 191" },
      "500": { hex: "#14b8a6", rgb: "20 184 166" },
      "600": { hex: "#0d9488", rgb: "13 148 136" },
      "700": { hex: "#0f766e", rgb: "15 118 110" },
      "800": { hex: "#115e59", rgb: "17 94 89" },
      "900": { hex: "#134e4a", rgb: "19 78 74" }
    }
  },
  {
    label: "cyan",
    shades: {
      "50": { hex: "#ecfeff", rgb: "236 254 255" },
      "100": { hex: "#cffafe", rgb: "207 250 254" },
      "200": { hex: "#a5f3fc", rgb: "165 243 252" },
      "300": { hex: "#67e8f9", rgb: "103 232 249" },
      "400": { hex: "#22d3ee", rgb: "34 211 238" },
      "500": { hex: "#06b6d4", rgb: "6 182 212" },
      "600": { hex: "#0891b2", rgb: "8 145 178" },
      "700": { hex: "#0e7490", rgb: "14 116 144" },
      "800": { hex: "#155e75", rgb: "21 94 117" },
      "900": { hex: "#164e63", rgb: "22 78 99" }
    }
  },
  {
    label: "sky",
    shades: {
      "50": { hex: "#f0f9ff", rgb: "240 249 255" },
      "100": { hex: "#e0f2fe", rgb: "224 242 254" },
      "200": { hex: "#bae6fd", rgb: "186 230 253" },
      "300": { hex: "#7dd3fc", rgb: "125 211 252" },
      "400": { hex: "#38bdf8", rgb: "56 189 248" },
      "500": { hex: "#0ea5e9", rgb: "14 165 233" },
      "600": { hex: "#0284c7", rgb: "2 132 199" },
      "700": { hex: "#0369a1", rgb: "3 105 161" },
      "800": { hex: "#075985", rgb: "7 89 133" },
      "900": { hex: "#0c4a6e", rgb: "12 74 110" }
    }
  },
  {
    label: "blue",
    shades: {
      "50": { hex: "#eff6ff", rgb: "239 246 255" },
      "100": { hex: "#dbeafe", rgb: "219 234 254" },
      "200": { hex: "#bfdbfe", rgb: "191 219 254" },
      "300": { hex: "#93c5fd", rgb: "147 197 253" },
      "400": { hex: "#60a5fa", rgb: "96 165 250" },
      "500": { hex: "#3b82f6", rgb: "59 130 246" },
      "600": { hex: "#2563eb", rgb: "37 99 235" },
      "700": { hex: "#1d4ed8", rgb: "29 78 216" },
      "800": { hex: "#1e40af", rgb: "30 64 175" },
      "900": { hex: "#1e3a8a", rgb: "30 58 138" }
    }
  },
  {
    label: "indigo",
    shades: {
      "50": { hex: "#eef2ff", rgb: "238 242 255" },
      "100": { hex: "#e0e7ff", rgb: "224 231 255" },
      "200": { hex: "#c7d2fe", rgb: "199 210 254" },
      "300": { hex: "#a5b4fc", rgb: "165 180 252" },
      "400": { hex: "#818cf8", rgb: "129 140 248" },
      "500": { hex: "#6366f1", rgb: "99 102 241" },
      "600": { hex: "#4f46e5", rgb: "79 70 229" },
      "700": { hex: "#4338ca", rgb: "67 56 202" },
      "800": { hex: "#3730a3", rgb: "55 48 163" },
      "900": { hex: "#312e81", rgb: "49 46 129" }
    }
  },
  {
    label: "violet",
    shades: {
      "50": { hex: "#f5f3ff", rgb: "245 243 255" },
      "100": { hex: "#ede9fe", rgb: "237 233 254" },
      "200": { hex: "#ddd6fe", rgb: "221 214 254" },
      "300": { hex: "#c4b5fd", rgb: "196 181 253" },
      "400": { hex: "#a78bfa", rgb: "167 139 250" },
      "500": { hex: "#8b5cf6", rgb: "139 92 246" },
      "600": { hex: "#7c3aed", rgb: "124 58 237" },
      "700": { hex: "#6d28d9", rgb: "109 40 217" },
      "800": { hex: "#5b21b6", rgb: "91 33 182" },
      "900": { hex: "#4c1d95", rgb: "76 29 149" }
    }
  },
  {
    label: "purple",
    shades: {
      "50": { hex: "#faf5ff", rgb: "250 245 255" },
      "100": { hex: "#f3e8ff", rgb: "243 232 255" },
      "200": { hex: "#e9d5ff", rgb: "233 213 255" },
      "300": { hex: "#d8b4fe", rgb: "216 180 254" },
      "400": { hex: "#c084fc", rgb: "192 132 252" },
      "500": { hex: "#a855f7", rgb: "168 85 247" },
      "600": { hex: "#9333ea", rgb: "147 51 234" },
      "700": { hex: "#7e22ce", rgb: "126 34 206" },
      "800": { hex: "#6b21a8", rgb: "107 33 168" },
      "900": { hex: "#581c87", rgb: "88 28 135" }
    }
  },
  {
    label: "fuchsia",
    shades: {
      "50": { hex: "#fdf4ff", rgb: "253 244 255" },
      "100": { hex: "#fae8ff", rgb: "250 232 255" },
      "200": { hex: "#f5d0fe", rgb: "245 208 254" },
      "300": { hex: "#f0abfc", rgb: "240 171 252" },
      "400": { hex: "#e879f9", rgb: "232 121 249" },
      "500": { hex: "#d946ef", rgb: "217 70 239" },
      "600": { hex: "#c026d3", rgb: "192 38 211" },
      "700": { hex: "#a21caf", rgb: "162 28 175" },
      "800": { hex: "#86198f", rgb: "134 25 143" },
      "900": { hex: "#701a75", rgb: "112 26 117" }
    }
  },
  {
    label: "pink",
    shades: {
      "50": { hex: "#fdf2f8", rgb: "253 242 248" },
      "100": { hex: "#fce7f3", rgb: "252 231 243" },
      "200": { hex: "#fbcfe8", rgb: "251 207 232" },
      "300": { hex: "#f9a8d4", rgb: "249 168 212" },
      "400": { hex: "#f472b6", rgb: "244 114 182" },
      "500": { hex: "#ec4899", rgb: "236 72 153" },
      "600": { hex: "#db2777", rgb: "219 39 119" },
      "700": { hex: "#be185d", rgb: "190 24 93" },
      "800": { hex: "#9d174d", rgb: "157 23 77" },
      "900": { hex: "#831843", rgb: "131 24 67" }
    }
  },
  {
    label: "rose",
    shades: {
      "50": { hex: "#fff1f2", rgb: "255 241 242" },
      "100": { hex: "#ffe4e6", rgb: "255 228 230" },
      "200": { hex: "#fecdd3", rgb: "254 205 211" },
      "300": { hex: "#fda4af", rgb: "253 164 175" },
      "400": { hex: "#fb7185", rgb: "251 113 133" },
      "500": { hex: "#f43f5e", rgb: "244 63 94" },
      "600": { hex: "#e11d48", rgb: "225 29 72" },
      "700": { hex: "#be123c", rgb: "190 18 60" },
      "800": { hex: "#9f1239", rgb: "159 18 57" },
      "900": { hex: "#881337", rgb: "136 19 55" }
    }
  }
];

// node_modules/@skeletonlabs/skeleton/dist/components/ConicGradient/ConicGradient.svelte
mark_module_start();
ConicGradient[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/ConicGradient/ConicGradient.svelte";
var root_18 = add_locations(template(`<figcaption><!></figcaption>`), ConicGradient[FILENAME], [[57, 2]]);
var root_24 = add_locations(template(`<div></div>`), ConicGradient[FILENAME], [[61, 2]]);
var root_4 = add_locations(template(`<li><span></span> <span class="conic-label flex-auto"> </span> <strong class="conic-value"> </strong></li>`), ConicGradient[FILENAME], [
  [
    67,
    4,
    [[68, 5], [69, 5], [70, 5]]
  ]
]);
var root_36 = add_locations(template(`<ul></ul>`), ConicGradient[FILENAME], [[65, 2]]);
var root10 = add_locations(template(`<figure data-testid="conic-gradient"><!> <!> <!></figure>`), ConicGradient[FILENAME], [[54, 0]]);
function ConicGradient($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, ConicGradient);
  const classesBase = mutable_state();
  const classesCaption = mutable_state();
  const classesCone = mutable_state();
  const classesLegend = mutable_state();
  let stops = prop($$props, "stops", 24, () => [
    {
      color: ["neutral", 500],
      start: 0,
      end: 100
    }
  ]);
  let legend = prop($$props, "legend", 8, false);
  let spin = prop($$props, "spin", 8, false);
  let width = prop($$props, "width", 8, "w-24");
  let hover = prop($$props, "hover", 8, "bg-primary-hover-token");
  let digits = prop($$props, "digits", 8, 0);
  let regionCaption = prop($$props, "regionCaption", 8, "");
  let regionCone = prop($$props, "regionCone", 8, "");
  let regionLegend = prop($$props, "regionLegend", 8, "");
  let cone = mutable_state();
  let generatedLegendList = mutable_state();
  const cBase = "flex flex-col items-center space-y-4 w-";
  const cCaption = "text-center";
  const cCone = "block aspect-square rounded-full";
  const cLegend = "text-sm w-full";
  const cSwatch = "block aspect-square bg-black w-5 rounded-full mr-2";
  function setColorValue(color) {
    if (strict_equals(typeof color, "string")) return color;
    const colorSet = tailwindDefaultColors.find((c) => strict_equals(c.label, color[0]));
    return colorSet == null ? void 0 : colorSet.shades[color[1]].hex;
  }
  function genConicGradient() {
    let d = stops().map((v) => `${setColorValue(v.color)} ${v.start}% ${v.end}%`);
    set(cone, `conic-gradient(${d.join(", ")})`);
  }
  function genLegend() {
    if (!legend()) return;
    set(generatedLegendList, stops().map((v) => {
      return {
        label: v.label,
        color: setColorValue(v.color),
        value: (v.end - v.start).toFixed(digits())
      };
    }));
  }
  afterUpdate(() => {
    genConicGradient();
    genLegend();
  });
  legacy_pre_effect(() => deep_read_state($$sanitized_props), () => {
    set(classesBase, `${cBase} ${$$sanitized_props.class ?? ""}`);
  });
  legacy_pre_effect(() => deep_read_state(regionCaption()), () => {
    set(classesCaption, `${cCaption} ${regionCaption()}`);
  });
  legacy_pre_effect(
    () => (deep_read_state(width()), deep_read_state(regionCone())),
    () => {
      set(classesCone, `${cCone} ${width()} ${regionCone()}`);
    }
  );
  legacy_pre_effect(() => deep_read_state(regionLegend()), () => {
    set(classesLegend, `${cLegend} ${regionLegend()}`);
  });
  legacy_pre_effect_reset();
  init();
  var figure = root10();
  var node = child(figure);
  if_block(node, () => $$slots.default, ($$anchor2) => {
    var figcaption = root_18();
    var node_1 = child(figcaption);
    slot(node_1, $$props, "default", {}, null);
    reset(figcaption);
    template_effect(() => set_class(figcaption, `conic-caption ${get(classesCaption) ?? ""}`));
    append($$anchor2, figcaption);
  });
  var node_2 = sibling(node, 2);
  if_block(node_2, () => get(cone), ($$anchor2) => {
    var div = root_24();
    template_effect(() => {
      set_class(div, `conic-cone ${get(classesCone) ?? ""}`);
      toggle_class(div, "animate-spin", spin());
      set_style(div, "background", get(cone));
    });
    append($$anchor2, div);
  });
  var node_3 = sibling(node_2, 2);
  if_block(node_3, () => legend() && get(generatedLegendList), ($$anchor2) => {
    var ul = root_36();
    each(ul, 5, () => get(generatedLegendList), index, ($$anchor3, $$item) => {
      let color = () => get($$item).color;
      color();
      let label = () => get($$item).label;
      label();
      let value = () => get($$item).value;
      value();
      var li = root_4();
      var span = child(li);
      set_class(span, `conic-swatch ${cSwatch ?? ""}`);
      var span_1 = sibling(span, 2);
      var text2 = child(span_1, true);
      reset(span_1);
      var strong = sibling(span_1, 2);
      var text_1 = child(strong);
      reset(strong);
      reset(li);
      template_effect(() => {
        set_class(li, `conic-item ${hover() ?? ""}`);
        set_style(span, "background", color());
        set_text(text2, label());
        set_text(text_1, `${value() ?? ""}%`);
      });
      append($$anchor3, li);
    });
    reset(ul);
    template_effect(() => set_class(ul, `conic-list list ${get(classesLegend) ?? ""}`));
    append($$anchor2, ul);
  });
  reset(figure);
  template_effect(() => set_class(figure, `conic-gradient ${get(classesBase) ?? ""}`));
  append($$anchor, figure);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ConicGradient = hmr(ConicGradient, () => ConicGradient[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ConicGradient[HMR].source;
    set(ConicGradient[HMR].source, module.default[HMR].original);
  });
}
var ConicGradient_default = ConicGradient;
mark_module_end(ConicGradient);

// node_modules/@skeletonlabs/skeleton/dist/components/FileButton/FileButton.svelte
mark_module_start();
FileButton[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/FileButton/FileButton.svelte";
var root11 = add_locations(template(`<div data-testid="file-button"><div class="w-0 h-0 overflow-hidden"><input></div> <button type="button"><!></button></div>`), FileButton[FILENAME], [
  [
    20,
    0,
    [
      [22, 1, [[23, 2]]],
      [26, 1]
    ]
  ]
]);
function FileButton($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "files",
    "fileInput",
    "name",
    "width",
    "button"
  ]);
  push($$props, false, FileButton);
  const classesBase = mutable_state();
  const classesButton = mutable_state();
  let files = prop($$props, "files", 28, () => void 0);
  let fileInput = prop($$props, "fileInput", 28, () => void 0);
  let name = prop($$props, "name", 8);
  let width = prop($$props, "width", 8, "");
  let button = prop($$props, "button", 8, "btn variant-filled");
  function onButtonClick() {
    if (fileInput()) fileInput().click();
  }
  function prunedRestProps() {
    delete $$restProps.class;
    return $$restProps;
  }
  legacy_pre_effect(() => deep_read_state($$sanitized_props), () => {
    set(classesBase, `${$$sanitized_props.class ?? ""}`);
  });
  legacy_pre_effect(
    () => (deep_read_state(button()), deep_read_state(width())),
    () => {
      set(classesButton, `${button()} ${width()}`);
    }
  );
  legacy_pre_effect_reset();
  init();
  var div = root11();
  var div_1 = child(div);
  var input = child(div_1);
  remove_input_defaults(input);
  const spread_with_call = derived_safe_equal(prunedRestProps);
  let attributes;
  bind_this(input, ($$value) => fileInput($$value), () => fileInput());
  reset(div_1);
  var button_1 = sibling(div_1, 2);
  var node = child(button_1);
  slot(node, $$props, "default", {}, ($$anchor2) => {
    var text2 = text("Select a File");
    append($$anchor2, text2);
  });
  reset(button_1);
  reset(div);
  template_effect(() => {
    set_class(div, `file-button ${get(classesBase) ?? ""}`);
    attributes = set_attributes(input, attributes, {
      type: "file",
      name: name(),
      ...get(spread_with_call)
    });
    set_class(button_1, `file-button-btn ${get(classesButton) ?? ""}`);
    button_1.disabled = $$restProps.disabled;
  });
  bind_files(input, files);
  event("change", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("click", button_1, onButtonClick);
  event("keydown", button_1, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keyup", button_1, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keypress", button_1, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileButton = hmr(FileButton, () => FileButton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileButton[HMR].source;
    set(FileButton[HMR].source, module.default[HMR].original);
  });
}
var FileButton_default = FileButton;
mark_module_end(FileButton);

// node_modules/@skeletonlabs/skeleton/dist/components/FileDropzone/FileDropzone.svelte
mark_module_start();
FileDropzone[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/FileDropzone/FileDropzone.svelte";
var root_19 = add_locations(template(`<div><!></div>`), FileDropzone[FILENAME], [[54, 21]]);
var root_25 = add_locations(template(`<strong>Upload a file</strong> or drag and drop`, 1), FileDropzone[FILENAME], [[57, 25]]);
var root_37 = add_locations(template(`<small><!></small>`), FileDropzone[FILENAME], [[60, 21]]);
var root12 = add_locations(template(`<div data-testid="file-dropzone"><input> <div><div><!> <div><!></div> <!></div></div></div>`), FileDropzone[FILENAME], [
  [
    27,
    0,
    [
      [30, 1],
      [
        51,
        1,
        [[52, 2, [[56, 3]]]]
      ]
    ]
  ]
]);
function FileDropzone($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "files",
    "fileInput",
    "name",
    "border",
    "padding",
    "rounded",
    "regionInterface",
    "regionInterfaceText",
    "slotLead",
    "slotMessage",
    "slotMeta"
  ]);
  push($$props, false, FileDropzone);
  const classesBase = mutable_state();
  const classesInput = mutable_state();
  const classesInterface = mutable_state();
  let files = prop($$props, "files", 28, () => void 0);
  let fileInput = prop($$props, "fileInput", 28, () => void 0);
  let name = prop($$props, "name", 8);
  let border = prop($$props, "border", 8, "border-2 border-dashed");
  let padding = prop($$props, "padding", 8, "p-4 py-8");
  let rounded = prop($$props, "rounded", 8, "rounded-container-token");
  let regionInterface = prop($$props, "regionInterface", 8, "");
  let regionInterfaceText = prop($$props, "regionInterfaceText", 8, "");
  let slotLead = prop($$props, "slotLead", 8, "mb-4");
  let slotMessage = prop($$props, "slotMessage", 8, "");
  let slotMeta = prop($$props, "slotMeta", 8, "opacity-75");
  const cBase = "textarea relative flex justify-center items-center";
  const cInput = "w-full absolute top-0 left-0 right-0 bottom-0 z-[1] opacity-0 disabled:!opacity-0 cursor-pointer";
  const cInterface = "flex justify-center items-center text-center";
  function prunedRestProps() {
    delete $$restProps.class;
    return $$restProps;
  }
  legacy_pre_effect(
    () => (deep_read_state(border()), deep_read_state(padding()), deep_read_state(rounded()), deep_read_state($$sanitized_props)),
    () => {
      set(classesBase, `${cBase} ${border()} ${padding()} ${rounded()} ${$$sanitized_props.class ?? ""}`);
    }
  );
  legacy_pre_effect(() => {
  }, () => {
    set(classesInput, `${cInput}`);
  });
  legacy_pre_effect(() => {
  }, () => {
    set(classesInterface, `${cInterface}`);
  });
  legacy_pre_effect_reset();
  init();
  var div = root12();
  var input = child(div);
  remove_input_defaults(input);
  const spread_with_call = derived_safe_equal(prunedRestProps);
  let attributes;
  bind_this(input, ($$value) => fileInput($$value), () => fileInput());
  var div_1 = sibling(input, 2);
  var div_2 = child(div_1);
  var node = child(div_2);
  if_block(node, () => $$slots.lead, ($$anchor2) => {
    var div_3 = root_19();
    var node_1 = child(div_3);
    slot(node_1, $$props, "lead", {}, null);
    reset(div_3);
    template_effect(() => set_class(div_3, `dropzone-lead ${slotLead() ?? ""}`));
    append($$anchor2, div_3);
  });
  var div_4 = sibling(node, 2);
  var node_2 = child(div_4);
  slot(node_2, $$props, "message", {}, ($$anchor2) => {
    var fragment = root_25();
    next();
    append($$anchor2, fragment);
  });
  reset(div_4);
  var node_3 = sibling(div_4, 2);
  if_block(node_3, () => $$slots.meta, ($$anchor2) => {
    var small = root_37();
    var node_4 = child(small);
    slot(node_4, $$props, "meta", {}, null);
    reset(small);
    template_effect(() => set_class(small, `dropzone-meta ${slotMeta() ?? ""}`));
    append($$anchor2, small);
  });
  reset(div_2);
  reset(div_1);
  reset(div);
  template_effect(() => {
    set_class(div, `dropzone ${get(classesBase) ?? ""}`);
    toggle_class(div, "opacity-50", $$restProps.disabled);
    attributes = set_attributes(input, attributes, {
      type: "file",
      name: name(),
      class: `dropzone-input ${get(classesInput) ?? ""}`,
      ...get(spread_with_call)
    });
    set_class(div_1, `dropzone-interface ${get(classesInterface) ?? ""} ${regionInterface() ?? ""}`);
    set_class(div_2, `dropzone-interface-text ${regionInterfaceText() ?? ""}`);
    set_class(div_4, `dropzone-message ${slotMessage() ?? ""}`);
  });
  bind_files(input, files);
  event("change", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("dragenter", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("dragover", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("dragleave", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("drop", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("click", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keydown", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keyup", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keypress", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("focus", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("focusin", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("focusout", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileDropzone = hmr(FileDropzone, () => FileDropzone[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileDropzone[HMR].source;
    set(FileDropzone[HMR].source, module.default[HMR].original);
  });
}
var FileDropzone_default = FileDropzone;
mark_module_end(FileDropzone);

// node_modules/@skeletonlabs/skeleton/dist/components/InputChip/InputChip.svelte
mark_module_start();
InputChip[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/InputChip/InputChip.svelte";
var root_110 = add_locations(template(`<option> </option>`), InputChip[FILENAME], [[158, 26]]);
var root_38 = add_locations(template(`<div><button type="button"><span> </span> <span>✕</span></button></div>`), InputChip[FILENAME], [
  [
    185,
    5,
    [
      [186, 6, [[197, 7], [198, 7]]]
    ]
  ]
]);
var root_26 = add_locations(template(`<div></div>`), InputChip[FILENAME], [[178, 3]]);
var root13 = add_locations(template(`<div><div class="h-0 overflow-hidden"><select multiple tabindex="-1"></select></div> <div><input> <!></div></div>`), InputChip[FILENAME], [
  [
    153,
    0,
    [
      [155, 1, [[156, 2]]],
      [162, 1, [[164, 2]]]
    ]
  ]
]);
function InputChip($$anchor, $$props) {
  var _a;
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "addChip",
    "removeChip",
    "input",
    "name",
    "value",
    "whitelist",
    "max",
    "minlength",
    "maxlength",
    "allowUpperCase",
    "allowDuplicates",
    "validation",
    "duration",
    "required",
    "chips",
    "invalid",
    "padding",
    "rounded",
    "regionChipWrapper",
    "regionChipList",
    "regionInput",
    "label",
    "transitions",
    "listTransitionIn",
    "listTransitionInParams",
    "listTransitionOut",
    "listTransitionOutParams",
    "chipTransitionIn",
    "chipTransitionInParams",
    "chipTransitionOut",
    "chipTransitionOutParams"
  ]);
  push($$props, false, InputChip);
  const $$stores = setup_stores();
  const $prefersReducedMotionStore = () => (validate_store(prefersReducedMotionStore, "prefersReducedMotionStore"), store_get(prefersReducedMotionStore, "$prefersReducedMotionStore", $$stores));
  const classesInvalid = mutable_state();
  const classesBase = mutable_state();
  const classesChipWrapper = mutable_state();
  const classesChipList = mutable_state();
  const classesInput = mutable_state();
  const dispatch = createEventDispatcher();
  let input = prop($$props, "input", 12, "");
  let name = prop($$props, "name", 8);
  let value = prop($$props, "value", 28, () => []);
  let whitelist = prop($$props, "whitelist", 24, () => []);
  let max = prop($$props, "max", 24, () => -1);
  let minlength = prop($$props, "minlength", 24, () => -1);
  let maxlength = prop($$props, "maxlength", 24, () => -1);
  let allowUpperCase = prop($$props, "allowUpperCase", 8, false);
  let allowDuplicates = prop($$props, "allowDuplicates", 8, false);
  let validation = prop($$props, "validation", 8, () => true);
  let duration = prop($$props, "duration", 8, 150);
  let required = prop($$props, "required", 8, false);
  let chips = prop($$props, "chips", 8, "variant-filled");
  let invalid = prop($$props, "invalid", 8, "input-error");
  let padding = prop($$props, "padding", 8, "p-2");
  let rounded = prop($$props, "rounded", 8, "rounded-container-token");
  let regionChipWrapper = prop($$props, "regionChipWrapper", 8, "");
  let regionChipList = prop($$props, "regionChipList", 8, "");
  let regionInput = prop($$props, "regionInput", 8, "");
  let label = prop($$props, "label", 8, "Chips select");
  let transitions = prop($$props, "transitions", 24, () => !$prefersReducedMotionStore());
  let listTransitionIn = prop($$props, "listTransitionIn", 8, fly);
  let listTransitionInParams = prop($$props, "listTransitionInParams", 24, () => ({ duration: 150, opacity: 0, y: -20 }));
  let listTransitionOut = prop($$props, "listTransitionOut", 8, fly);
  let listTransitionOutParams = prop($$props, "listTransitionOutParams", 24, () => ({ duration: 150, opacity: 0, y: -20 }));
  let chipTransitionIn = prop($$props, "chipTransitionIn", 8, scale);
  let chipTransitionInParams = prop($$props, "chipTransitionInParams", 24, () => ({ duration: 150, opacity: 0 }));
  let chipTransitionOut = prop($$props, "chipTransitionOut", 8, scale);
  let chipTransitionOutParams = prop($$props, "chipTransitionOutParams", 24, () => ({ duration: 150, opacity: 0 }));
  const cBase = "textarea cursor-pointer";
  const cChipWrapper = "space-y-4";
  const cChipList = "flex flex-wrap gap-2";
  const cInputField = "unstyled bg-transparent border-0 !ring-0 p-0 w-full";
  let inputValid = mutable_state(true);
  let chipValues = mutable_state(((_a = value()) == null ? void 0 : _a.map((val) => {
    return { val, id: Math.random() };
  })) || []);
  function resetFormHandler() {
    value([]);
  }
  let selectElement = mutable_state();
  onMount(() => {
    if (!get(selectElement).form) return;
    const externalForm = get(selectElement).form;
    externalForm.addEventListener("reset", resetFormHandler);
    return () => {
      externalForm.removeEventListener("reset", resetFormHandler);
    };
  });
  function validateCustom(chip) {
    return strict_equals(validation(), void 0) || validation()(chip);
  }
  function validateCount() {
    return strict_equals(max(), -1) || value().length < max();
  }
  function validateLength(chip) {
    return (strict_equals(minlength(), -1) || chip.length >= minlength()) && (strict_equals(maxlength(), -1) || chip.length <= maxlength());
  }
  function validateWhiteList(chip) {
    return strict_equals(whitelist().length, 0) || whitelist().includes(chip);
  }
  function validateDuplicates(chip) {
    return allowDuplicates() || !value().includes(chip);
  }
  function validate(chip = "") {
    if (!chip && !input()) return false;
    chip = strict_equals(chip, "", false) ? chip.trim() : input().trim();
    return validateCustom(chip) && validateCount() && validateLength(chip) && validateWhiteList(chip) && validateDuplicates(chip);
  }
  function addChipCommon(chip) {
    chip = allowUpperCase() ? chip : chip.toLowerCase();
    value().push(chip);
    value(value());
    get(chipValues).push({ val: chip, id: Math.random() });
    set(chipValues, get(chipValues));
  }
  function removeChipCommon(chip) {
    let chipIndex = value().indexOf(chip);
    value().splice(chipIndex, 1);
    value(value());
    get(chipValues).splice(chipIndex, 1);
    set(chipValues, get(chipValues));
  }
  function onKeyHandler(event2) {
    if (strict_equals(event2.key, "Enter", false)) return;
    event2.preventDefault();
    set(inputValid, validate());
    if (strict_equals(get(inputValid), false)) {
      dispatch("invalid", { event: event2, input: input() });
      return;
    }
    addChipCommon(input());
    dispatch("add", {
      event: event2,
      chipIndex: value().length - 1,
      chipValue: input()
    });
    input("");
  }
  function removeChipInternally(event2, chipIndex, chipValue) {
    if ($$restProps.disabled) return;
    removeChipCommon(chipValue);
    dispatch("remove", { event: event2, chipIndex, chipValue });
  }
  function addChip(chip) {
    set(inputValid, validate(chip));
    if (strict_equals(get(inputValid), false)) {
      dispatch("invalidManually", { input: chip });
      return;
    }
    addChipCommon(chip);
    dispatch("addManually", {
      chipIndex: value().length - 1,
      chipValue: chip
    });
  }
  function removeChip(chip) {
    if ($$restProps.disabled) return;
    removeChipCommon(chip);
    dispatch("removeManually", { chipValue: chip });
  }
  function prunedRestProps() {
    delete $$restProps.class;
    return $$restProps;
  }
  legacy_pre_effect(
    () => (get(inputValid), deep_read_state(invalid())),
    () => {
      set(classesInvalid, strict_equals(get(inputValid), false) ? invalid() : "");
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(padding()), deep_read_state(rounded()), deep_read_state($$sanitized_props), get(classesInvalid)),
    () => {
      set(classesBase, `${cBase} ${padding()} ${rounded()} ${$$sanitized_props.class ?? ""} ${get(classesInvalid)}`);
    }
  );
  legacy_pre_effect(() => deep_read_state(regionChipWrapper()), () => {
    set(classesChipWrapper, `${cChipWrapper} ${regionChipWrapper()}`);
  });
  legacy_pre_effect(() => deep_read_state(regionChipList()), () => {
    set(classesChipList, `${cChipList} ${regionChipList()}`);
  });
  legacy_pre_effect(() => deep_read_state(regionInput()), () => {
    set(classesInput, `${cInputField} ${regionInput()}`);
  });
  legacy_pre_effect(
    () => (get(chipValues), deep_read_state(value())),
    () => {
      var _a2;
      set(chipValues, ((_a2 = value()) == null ? void 0 : _a2.map((val, i) => {
        var _a3;
        if (strict_equals((_a3 = get(chipValues)[i]) == null ? void 0 : _a3.val, val)) return get(chipValues)[i];
        return { id: Math.random(), val };
      })) || []);
    }
  );
  legacy_pre_effect_reset();
  init();
  var div = root13();
  var div_1 = child(div);
  var select = child(div_1);
  template_effect(() => {
    value();
    invalidate_inner_signals(() => {
      get(selectElement);
      name();
      required();
      label();
    });
  });
  each(select, 5, value, index, ($$anchor2, option) => {
    var option_1 = root_110();
    var option_1_value = {};
    var text2 = child(option_1, true);
    reset(option_1);
    template_effect(() => {
      if (option_1_value !== (option_1_value = get(option))) {
        option_1.value = null == (option_1.__value = get(option)) ? "" : get(option);
      }
      set_text(text2, get(option));
    });
    append($$anchor2, option_1);
  });
  reset(select);
  bind_this(select, ($$value) => set(selectElement, $$value), () => get(selectElement));
  reset(div_1);
  var div_2 = sibling(div_1, 2);
  var input_1 = child(div_2);
  remove_input_defaults(input_1);
  const spread_with_call = derived_safe_equal(prunedRestProps);
  let attributes;
  var node = sibling(input_1, 2);
  if_block(node, () => get(chipValues).length, ($$anchor2) => {
    var div_3 = root_26();
    validate_each_keys(() => get(chipValues), ({ id, val }) => id);
    each(div_3, 15, () => get(chipValues), ({ id, val }) => id, ($$anchor3, $$item, i) => {
      let id = () => get($$item).id;
      id();
      let val = () => get($$item).val;
      val();
      var div_4 = root_38();
      var button = child(div_4);
      var span = child(button);
      var text_1 = child(span, true);
      reset(span);
      next(2);
      reset(button);
      reset(div_4);
      template_effect(() => {
        set_class(button, `chip ${chips() ?? ""}`);
        set_text(text_1, val());
      });
      event("click", button, (e) => removeChipInternally(e, get(i), val()));
      event("click", button, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keypress", button, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keydown", button, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keyup", button, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      transition(1, button, () => dynamicTransition, () => ({
        transition: chipTransitionIn(),
        params: chipTransitionInParams(),
        enabled: transitions()
      }));
      transition(2, button, () => dynamicTransition, () => ({
        transition: chipTransitionOut(),
        params: chipTransitionOutParams(),
        enabled: transitions()
      }));
      animation(div_4, () => flip, () => ({ duration: duration() }));
      append($$anchor3, div_4);
    });
    reset(div_3);
    template_effect(() => set_class(div_3, `input-chip-list ${get(classesChipList) ?? ""}`));
    transition(1, div_3, () => dynamicTransition, () => ({
      transition: listTransitionIn(),
      params: listTransitionInParams(),
      enabled: transitions()
    }));
    transition(2, div_3, () => dynamicTransition, () => ({
      transition: listTransitionOut(),
      params: listTransitionOutParams(),
      enabled: transitions()
    }));
    append($$anchor2, div_3);
  });
  reset(div_2);
  reset(div);
  template_effect(() => {
    set_class(div, `input-chip ${get(classesBase) ?? ""}`);
    toggle_class(div, "opacity-50", $$restProps.disabled);
    set_attribute(select, "name", name());
    select.required = required();
    set_attribute(select, "aria-label", label());
    set_class(div_2, `input-chip-wrapper ${get(classesChipWrapper) ?? ""}`);
    attributes = set_attributes(input_1, attributes, {
      type: "text",
      placeholder: $$restProps.placeholder ?? "Enter values...",
      class: `input-chip-field ${get(classesInput) ?? ""}`,
      disabled: $$restProps.disabled,
      ...get(spread_with_call)
    });
  });
  bind_select_value(select, value);
  bind_value(input_1, input);
  event("keydown", input_1, onKeyHandler);
  event("input", input_1, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("focus", input_1, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("blur", input_1, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, div);
  bind_prop($$props, "addChip", addChip);
  bind_prop($$props, "removeChip", removeChip);
  return pop({
    get addChip() {
      return addChip;
    },
    get removeChip() {
      return removeChip;
    },
    ...legacy_api()
  });
}
if (import.meta.hot) {
  InputChip = hmr(InputChip, () => InputChip[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = InputChip[HMR].source;
    set(InputChip[HMR].source, module.default[HMR].original);
  });
}
var InputChip_default = InputChip;
mark_module_end(InputChip);

// node_modules/@skeletonlabs/skeleton/dist/components/ListBox/ListBox.svelte
mark_module_start();
ListBox[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/ListBox/ListBox.svelte";
var root14 = add_locations(template(`<div role="listbox" data-testid="listbox"><!></div>`), ListBox[FILENAME], [[27, 0]]);
function ListBox($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, ListBox);
  const classesBase = mutable_state();
  let multiple = prop($$props, "multiple", 8, false);
  let disabled = prop($$props, "disabled", 8, false);
  let spacing = prop($$props, "spacing", 8, "space-y-1");
  let rounded = prop($$props, "rounded", 8, "rounded-token");
  let active = prop($$props, "active", 8, "variant-filled");
  let hover = prop($$props, "hover", 8, "hover:variant-soft");
  let padding = prop($$props, "padding", 8, "px-4 py-2");
  let regionLead = prop($$props, "regionLead", 8, "");
  let regionDefault = prop($$props, "regionDefault", 8, "");
  let regionTrail = prop($$props, "regionTrail", 8, "");
  let labelledby = prop($$props, "labelledby", 8, "");
  setContext("disabled", disabled());
  setContext("multiple", multiple());
  setContext("rounded", rounded());
  setContext("active", active());
  setContext("hover", hover());
  setContext("padding", padding());
  setContext("regionLead", regionLead());
  setContext("regionDefault", regionDefault());
  setContext("regionTrail", regionTrail());
  const cBase = "";
  legacy_pre_effect(
    () => (deep_read_state(spacing()), deep_read_state(rounded()), deep_read_state($$sanitized_props)),
    () => {
      set(classesBase, `${cBase} ${spacing()} ${rounded()} ${$$sanitized_props.class ?? ""}`);
    }
  );
  legacy_pre_effect_reset();
  init();
  var div = root14();
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  template_effect(() => {
    set_class(div, `listbox ${get(classesBase) ?? ""}`);
    set_attribute(div, "aria-labelledby", labelledby());
  });
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ListBox = hmr(ListBox, () => ListBox[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ListBox[HMR].source;
    set(ListBox[HMR].source, module.default[HMR].original);
  });
}
var ListBox_default = ListBox;
mark_module_end(ListBox);

// node_modules/@skeletonlabs/skeleton/dist/components/ListBox/ListBoxItem.svelte
mark_module_start();
ListBoxItem[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/ListBox/ListBoxItem.svelte";
var root_111 = add_locations(template(`<input type="checkbox" tabindex="-1">`), ListBoxItem[FILENAME], [[102, 4]]);
var root_27 = add_locations(template(`<input type="radio" tabindex="-1">`), ListBoxItem[FILENAME], [[104, 4]]);
var root_39 = add_locations(template(`<div><!></div>`), ListBoxItem[FILENAME], [[110, 21]]);
var root_42 = add_locations(template(`<div><!></div>`), ListBoxItem[FILENAME], [[114, 22]]);
var root15 = add_locations(template(`<label><div data-testid="listbox-item" role="option" tabindex="0"><div class="h-0 w-0 overflow-hidden"><!></div> <div><!> <div><!></div> <!></div></div></label>`), ListBoxItem[FILENAME], [
  [
    86,
    0,
    [
      [
        88,
        1,
        [
          [100, 2],
          [108, 2, [[112, 3]]]
        ]
      ]
    ]
  ]
]);
function ListBoxItem($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, ListBoxItem);
  const selected = mutable_state();
  const classesActive = mutable_state();
  const classesDisabled = mutable_state();
  const classesBase = mutable_state();
  const classesLabel = mutable_state();
  const classesRegionLead = mutable_state();
  const classesRegionDefault = mutable_state();
  const classesRegionTrail = mutable_state();
  const binding_group = [];
  let group = prop($$props, "group", 12);
  let name = prop($$props, "name", 8);
  let value = prop($$props, "value", 8);
  let disabled = prop($$props, "disabled", 24, () => getContext("disabled"));
  let multiple = prop($$props, "multiple", 24, () => getContext("multiple"));
  let rounded = prop($$props, "rounded", 24, () => getContext("rounded"));
  let active = prop($$props, "active", 24, () => getContext("active"));
  let hover = prop($$props, "hover", 24, () => getContext("hover"));
  let padding = prop($$props, "padding", 24, () => getContext("padding"));
  let regionLead = prop($$props, "regionLead", 24, () => getContext("regionLead"));
  let regionDefault = prop($$props, "regionDefault", 24, () => getContext("regionDefault"));
  let regionTrail = prop($$props, "regionTrail", 24, () => getContext("regionTrail"));
  const cBase = "cursor-pointer -outline-offset-[3px]";
  const cDisabled = "opacity-50 !cursor-default";
  const cLabel = "flex items-center space-x-4";
  let checked = mutable_state();
  let elemInput = mutable_state();
  function areDeeplyEqual(param1, param2) {
    if (strict_equals(param1, param2)) return true;
    if (!(param1 instanceof Object) || !(param2 instanceof Object)) return false;
    const keys1 = Object.keys(param1);
    const keys2 = Object.keys(param2);
    if (strict_equals(keys1.length, keys2.length, false)) return false;
    for (const key of keys1) {
      const value1 = param1[key];
      const value2 = param2[key];
      if (!areDeeplyEqual(value1, value2)) return false;
    }
    return true;
  }
  function updateCheckbox(group2) {
    set(checked, group2.indexOf(value()) >= 0);
  }
  function updateGroup(checked2) {
    const index2 = group().indexOf(value());
    if (checked2) {
      if (index2 < 0) {
        group().push(value());
        group(group());
      }
    } else {
      if (index2 >= 0) {
        group().splice(index2, 1);
        group(group());
      }
    }
  }
  function onKeyDown(event2) {
    if (["Enter", "Space"].includes(event2.code)) {
      event2.preventDefault();
      get(elemInput).click();
    }
  }
  const cRegionLead = "";
  const cRegionDefault = "flex-1";
  const cRegionTrail = "";
  legacy_pre_effect(
    () => (deep_read_state(multiple()), deep_read_state(group())),
    () => {
      if (multiple()) updateCheckbox(group());
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(multiple()), get(checked)),
    () => {
      if (multiple()) updateGroup(get(checked));
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(multiple()), deep_read_state(group()), deep_read_state(value())),
    () => {
      set(selected, multiple() ? group().some((groupVal) => areDeeplyEqual(value(), groupVal)) : areDeeplyEqual(group(), value()));
    }
  );
  legacy_pre_effect(
    () => (get(selected), deep_read_state(active()), deep_read_state(disabled()), deep_read_state(hover())),
    () => {
      set(classesActive, get(selected) ? active() : !disabled() ? hover() : "");
    }
  );
  legacy_pre_effect(() => deep_read_state(disabled()), () => {
    set(classesDisabled, disabled() ? cDisabled : "");
  });
  legacy_pre_effect(
    () => (get(classesDisabled), deep_read_state(rounded()), deep_read_state(padding()), get(classesActive), deep_read_state($$sanitized_props)),
    () => {
      set(classesBase, `${cBase} ${get(classesDisabled)} ${rounded()} ${padding()} ${get(classesActive)} ${$$sanitized_props.class ?? ""}`);
    }
  );
  legacy_pre_effect(() => {
  }, () => {
    set(classesLabel, `${cLabel}`);
  });
  legacy_pre_effect(() => deep_read_state(regionLead()), () => {
    set(classesRegionLead, `${cRegionLead} ${regionLead()}`);
  });
  legacy_pre_effect(() => deep_read_state(regionDefault()), () => {
    set(classesRegionDefault, `${cRegionDefault} ${regionDefault()}`);
  });
  legacy_pre_effect(() => deep_read_state(regionTrail()), () => {
    set(classesRegionTrail, `${cRegionTrail} ${regionTrail()}`);
  });
  legacy_pre_effect_reset();
  init();
  var label = root15();
  var div = child(label);
  var div_1 = child(div);
  var node = child(div_1);
  if_block(
    node,
    multiple,
    ($$anchor2) => {
      var input = root_111();
      remove_input_defaults(input);
      var input_value;
      bind_this(input, ($$value) => set(elemInput, $$value), () => get(elemInput));
      template_effect(() => {
        input.disabled = disabled();
        set_attribute(input, "name", name());
        if (input_value !== (input_value = value())) {
          input.value = null == (input.__value = value()) ? "" : value();
        }
      });
      bind_checked(input, () => get(checked), ($$value) => set(checked, $$value));
      event("click", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("change", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      append($$anchor2, input);
    },
    ($$anchor2) => {
      var input_1 = root_27();
      remove_input_defaults(input_1);
      var input_1_value;
      bind_this(input_1, ($$value) => set(elemInput, $$value), () => get(elemInput));
      template_effect(() => {
        input_1.disabled = disabled();
        set_attribute(input_1, "name", name());
        if (input_1_value !== (input_1_value = value())) {
          input_1.value = null == (input_1.__value = value()) ? "" : value();
        }
      });
      bind_group(
        binding_group,
        [],
        input_1,
        () => {
          value();
          return group();
        },
        group
      );
      event("click", input_1, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("change", input_1, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      append($$anchor2, input_1);
    }
  );
  reset(div_1);
  var div_2 = sibling(div_1, 2);
  var node_1 = child(div_2);
  if_block(node_1, () => $$slots.lead, ($$anchor2) => {
    var div_3 = root_39();
    var node_2 = child(div_3);
    slot(node_2, $$props, "lead", {}, null);
    reset(div_3);
    template_effect(() => set_class(div_3, `listbox-label-lead ${get(classesRegionLead) ?? ""}`));
    append($$anchor2, div_3);
  });
  var div_4 = sibling(node_1, 2);
  var node_3 = child(div_4);
  slot(node_3, $$props, "default", {}, null);
  reset(div_4);
  var node_4 = sibling(div_4, 2);
  if_block(node_4, () => $$slots.trail, ($$anchor2) => {
    var div_5 = root_42();
    var node_5 = child(div_5);
    slot(node_5, $$props, "trail", {}, null);
    reset(div_5);
    template_effect(() => set_class(div_5, `listbox-label-trail ${get(classesRegionTrail) ?? ""}`));
    append($$anchor2, div_5);
  });
  reset(div_2);
  reset(div);
  reset(label);
  template_effect(() => {
    set_class(div, `listbox-item ${get(classesBase) ?? ""}`);
    set_attribute(div, "aria-selected", get(selected));
    set_class(div_2, `listbox-label ${get(classesLabel) ?? ""}`);
    set_class(div_4, `listbox-label-content ${get(classesRegionDefault) ?? ""}`);
  });
  event("keydown", div, onKeyDown);
  event("keydown", div, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keyup", div, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keypress", div, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, label);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ListBoxItem = hmr(ListBoxItem, () => ListBoxItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ListBoxItem[HMR].source;
    set(ListBoxItem[HMR].source, module.default[HMR].original);
  });
}
var ListBoxItem_default = ListBoxItem;
mark_module_end(ListBoxItem);

// node_modules/@skeletonlabs/skeleton/dist/components/Paginator/icons.js
var leftArrow = `<svg xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 448 512"><!--! Font Awesome Free 6.4.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. --><path d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.2 288 416 288c17.7 0 32-14.3 32-32s-14.3-32-32-32l-306.7 0L214.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160z"/></svg>`;
var rightArrow = `<svg xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 448 512"><!--! Font Awesome Free 6.4.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. --><path d="M438.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L338.8 224 32 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l306.7 0L233.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l160-160z"/></svg>`;
var leftAngles = `<svg xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 512 512"><!--! Font Awesome Free 6.4.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. --><path d="M41.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.3 256 246.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160zm352-160l-160 160c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L301.3 256 438.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0z"/></svg>`;
var rightAngles = `<svg xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 512 512"><!--! Font Awesome Free 6.4.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. --><path d="M470.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L402.7 256 265.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l160-160zm-352 160l160-160c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L210.7 256 73.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0z"/></svg>`;

// node_modules/@skeletonlabs/skeleton/dist/components/Paginator/Paginator.svelte
mark_module_start();
Paginator[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/Paginator/Paginator.svelte";
var root_28 = add_locations(template(`<option> </option>`), Paginator[FILENAME], [[111, 38]]);
var root_112 = add_locations(template(`<label><select aria-label="Select Amount"></select></label>`), Paginator[FILENAME], [[103, 2, [[104, 3]]]]);
var root_310 = add_locations(template(`<button type="button"><!></button>`), Paginator[FILENAME], [[119, 3]]);
var root_43 = add_locations(template(`<button type="button"><!></button>`), Paginator[FILENAME], [[133, 3]]);
var root_52 = add_locations(template(`<button type="button"> <span class="opacity-50"> </span></button>`), Paginator[FILENAME], [[148, 3, [[149, 121]]]]);
var root_72 = add_locations(template(`<button type="button"> </button>`), Paginator[FILENAME], [[156, 4]]);
var root_83 = add_locations(template(`<button type="button"><!></button>`), Paginator[FILENAME], [[163, 3]]);
var root_92 = add_locations(template(`<button type="button"><!></button>`), Paginator[FILENAME], [[177, 3]]);
var root16 = add_locations(template(`<div data-testid="paginator"><!> <div><!> <!> <!> <!> <!></div></div>`), Paginator[FILENAME], [[100, 0, [[116, 1]]]]);
function Paginator($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, Paginator);
  const classesButtonActive = mutable_state();
  const classesBase = mutable_state();
  const classesLabel = mutable_state();
  const classesSelect = mutable_state();
  const classesControls = mutable_state();
  const dispatch = createEventDispatcher();
  let settings = prop($$props, "settings", 28, () => ({
    page: 0,
    limit: 5,
    size: 0,
    amounts: [1, 2, 5, 10]
  }));
  let disabled = prop($$props, "disabled", 8, false);
  let showPreviousNextButtons = prop($$props, "showPreviousNextButtons", 8, true);
  let showFirstLastButtons = prop($$props, "showFirstLastButtons", 8, false);
  let showNumerals = prop($$props, "showNumerals", 8, false);
  let maxNumerals = prop($$props, "maxNumerals", 8, 1);
  let justify = prop($$props, "justify", 8, "justify-between");
  let select = prop($$props, "select", 8, "select min-w-[150px]");
  let amountText = prop($$props, "amountText", 8, "Items");
  let regionControl = prop($$props, "regionControl", 8, "btn-group");
  let controlVariant = prop($$props, "controlVariant", 8, "variant-filled");
  let controlSeparator = prop($$props, "controlSeparator", 8, "");
  let active = prop($$props, "active", 8, "variant-filled-primary");
  let buttonClasses = prop($$props, "buttonClasses", 8, "!px-3 !py-1.5 fill-current");
  let buttonTextPrevious = prop($$props, "buttonTextPrevious", 8, leftArrow);
  let buttonTextNext = prop($$props, "buttonTextNext", 8, rightArrow);
  let buttonTextFirst = prop($$props, "buttonTextFirst", 8, leftAngles);
  let buttonTextLast = prop($$props, "buttonTextLast", 8, rightAngles);
  let separatorText = prop($$props, "separatorText", 8, "of");
  let labelFirst = prop($$props, "labelFirst", 8, "First page");
  let labelPrevious = prop($$props, "labelPrevious", 8, "Previous page");
  let labelNext = prop($$props, "labelNext", 8, "Next page");
  let labelLast = prop($$props, "labelLast", 8, "Last page");
  const cBase = "flex flex-col md:flex-row items-center space-y-4 md:space-y-0 md:space-x-4";
  const cLabel = "w-full md:w-auto";
  let lastPage = mutable_state(Math.max(0, Math.ceil(settings().size / settings().limit - 1)));
  let controlPages = mutable_state(getNumerals());
  function onChangeLength() {
    dispatch("amount", settings().limit);
    set(lastPage, Math.max(0, Math.ceil(settings().size / settings().limit - 1)));
    if (settings().page > get(lastPage)) {
      settings(settings().page = get(lastPage), true);
    }
    set(controlPages, getNumerals());
  }
  function gotoPage(page) {
    if (page < 0) return;
    settings(settings().page = page, true);
    dispatch("page", settings().page);
    set(controlPages, getNumerals());
  }
  function getFullNumerals() {
    const pages = [];
    for (let index2 = 0; index2 <= get(lastPage); (index2 += 1) - 1) {
      pages.push(index2);
    }
    return pages;
  }
  function getNumerals() {
    const pages = [];
    const isWithinLeftSection = settings().page < maxNumerals() + 2;
    const isWithinRightSection = settings().page > get(lastPage) - (maxNumerals() + 2);
    if (get(lastPage) <= maxNumerals() * 2 + 1) return getFullNumerals();
    pages.push(0);
    if (!isWithinLeftSection) pages.push(-1);
    if (isWithinLeftSection || isWithinRightSection) {
      const sectionStart = isWithinLeftSection ? 1 : get(lastPage) - (maxNumerals() + 2);
      const sectionEnd = isWithinRightSection ? get(lastPage) - 1 : maxNumerals() + 2;
      for (let i = sectionStart; i <= sectionEnd; (i += 1) - 1) {
        pages.push(i);
      }
    } else {
      for (let i = settings().page - maxNumerals(); i <= settings().page + maxNumerals(); (i += 1) - 1) {
        pages.push(i);
      }
    }
    if (!isWithinRightSection) pages.push(-1);
    pages.push(get(lastPage));
    return pages;
  }
  function updateSize(size) {
    set(lastPage, Math.max(0, Math.ceil(size / settings().limit - 1)));
    set(controlPages, getNumerals());
  }
  legacy_pre_effect(
    () => (deep_read_state(settings()), deep_read_state(active())),
    () => {
      set(classesButtonActive, (page) => {
        return strict_equals(page, settings().page) ? `${active()} pointer-events-none` : "";
      });
    }
  );
  legacy_pre_effect(() => deep_read_state(maxNumerals()), () => {
    maxNumerals(), onChangeLength();
  });
  legacy_pre_effect(() => deep_read_state(settings()), () => {
    updateSize(settings().size);
  });
  legacy_pre_effect(
    () => (deep_read_state(justify()), deep_read_state($$sanitized_props)),
    () => {
      set(classesBase, `${cBase} ${justify()} ${$$sanitized_props.class ?? ""}`);
    }
  );
  legacy_pre_effect(() => {
  }, () => {
    set(classesLabel, `${cLabel}`);
  });
  legacy_pre_effect(() => deep_read_state(select()), () => {
    set(classesSelect, `${select()}`);
  });
  legacy_pre_effect(
    () => (deep_read_state(regionControl()), deep_read_state(controlVariant()), deep_read_state(controlSeparator())),
    () => {
      set(classesControls, `${regionControl()} ${controlVariant()} ${controlSeparator()}`);
    }
  );
  legacy_pre_effect_reset();
  init();
  var div = root16();
  var node = child(div);
  if_block(node, () => settings().amounts.length, ($$anchor2) => {
    var label = root_112();
    var select_1 = child(label);
    template_effect(() => {
      settings().limit;
      invalidate_inner_signals(() => {
        onChangeLength;
        get(classesSelect);
        disabled();
        amountText();
      });
    });
    each(select_1, 5, () => settings().amounts, index, ($$anchor3, amount) => {
      var option = root_28();
      var option_value = {};
      var text2 = child(option);
      reset(option);
      template_effect(() => {
        if (option_value !== (option_value = get(amount))) {
          option.value = null == (option.__value = get(amount)) ? "" : get(amount);
        }
        set_text(text2, `${get(amount) ?? ""} ${amountText() ?? ""}`);
      });
      append($$anchor3, option);
    });
    reset(select_1);
    reset(label);
    template_effect(() => {
      set_class(label, `paginator-label ${get(classesLabel) ?? ""}`);
      set_class(select_1, `paginator-select ${get(classesSelect) ?? ""}`);
      select_1.disabled = disabled();
    });
    bind_select_value(select_1, () => settings().limit, ($$value) => settings(settings().limit = $$value, true));
    event("change", select_1, onChangeLength);
    append($$anchor2, label);
  });
  var div_1 = sibling(node, 2);
  var node_1 = child(div_1);
  if_block(node_1, showFirstLastButtons, ($$anchor2) => {
    var button = root_310();
    var node_2 = child(button);
    html(node_2, buttonTextFirst, false, false);
    reset(button);
    template_effect(() => {
      set_attribute(button, "aria-label", labelFirst());
      set_class(button, buttonClasses());
      button.disabled = disabled() || strict_equals(settings().page, 0);
    });
    event("click", button, () => {
      gotoPage(0);
    });
    append($$anchor2, button);
  });
  var node_3 = sibling(node_1, 2);
  if_block(node_3, showPreviousNextButtons, ($$anchor2) => {
    var button_1 = root_43();
    var node_4 = child(button_1);
    html(node_4, buttonTextPrevious, false, false);
    reset(button_1);
    template_effect(() => {
      set_attribute(button_1, "aria-label", labelPrevious());
      set_class(button_1, buttonClasses());
      button_1.disabled = disabled() || strict_equals(settings().page, 0);
    });
    event("click", button_1, () => {
      gotoPage(settings().page - 1);
    });
    append($$anchor2, button_1);
  });
  var node_5 = sibling(node_3, 2);
  if_block(
    node_5,
    () => strict_equals(showNumerals(), false),
    ($$anchor2) => {
      var button_2 = root_52();
      var text_1 = child(button_2);
      template_effect(() => set_text(text_1, `${settings().page * settings().limit + 1}-${Math.min(settings().page * settings().limit + settings().limit, settings().size) ?? ""} `));
      var span = sibling(text_1);
      var text_2 = child(span);
      reset(span);
      reset(button_2);
      template_effect(() => {
        set_class(button_2, `${buttonClasses() ?? ""} pointer-events-none !text-sm`);
        set_text(text_2, `${separatorText() ?? ""} ${settings().size ?? ""}`);
      });
      append($$anchor2, button_2);
    },
    ($$anchor2) => {
      var fragment = comment();
      var node_6 = first_child(fragment);
      each(node_6, 1, () => get(controlPages), index, ($$anchor3, page) => {
        var button_3 = root_72();
        const class_derived = derived_safe_equal(() => `${buttonClasses() ?? ""} ${get(classesButtonActive)(get(page)) ?? ""}`);
        var text_3 = child(button_3, true);
        reset(button_3);
        template_effect(() => {
          button_3.disabled = disabled();
          set_class(button_3, get(class_derived));
          set_text(text_3, get(page) >= 0 ? get(page) + 1 : "...");
        });
        event("click", button_3, () => gotoPage(get(page)));
        append($$anchor3, button_3);
      });
      append($$anchor2, fragment);
    }
  );
  var node_7 = sibling(node_5, 2);
  if_block(node_7, showPreviousNextButtons, ($$anchor2) => {
    var button_4 = root_83();
    var node_8 = child(button_4);
    html(node_8, buttonTextNext, false, false);
    reset(button_4);
    template_effect(() => {
      set_attribute(button_4, "aria-label", labelNext());
      set_class(button_4, buttonClasses());
      button_4.disabled = disabled() || (settings().page + 1) * settings().limit >= settings().size;
    });
    event("click", button_4, () => {
      gotoPage(settings().page + 1);
    });
    append($$anchor2, button_4);
  });
  var node_9 = sibling(node_7, 2);
  if_block(node_9, showFirstLastButtons, ($$anchor2) => {
    var button_5 = root_92();
    var node_10 = child(button_5);
    html(node_10, buttonTextLast, false, false);
    reset(button_5);
    template_effect(() => {
      set_attribute(button_5, "aria-label", labelLast());
      set_class(button_5, buttonClasses());
      button_5.disabled = disabled() || (settings().page + 1) * settings().limit >= settings().size;
    });
    event("click", button_5, () => {
      gotoPage(get(lastPage));
    });
    append($$anchor2, button_5);
  });
  reset(div_1);
  reset(div);
  template_effect(() => {
    set_class(div, `paginator ${get(classesBase) ?? ""}`);
    set_class(div_1, `paginator-controls ${get(classesControls) ?? ""}`);
  });
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Paginator = hmr(Paginator, () => Paginator[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Paginator[HMR].source;
    set(Paginator[HMR].source, module.default[HMR].original);
  });
}
var Paginator_default = Paginator;
mark_module_end(Paginator);

// node_modules/@skeletonlabs/skeleton/dist/components/ProgressBar/ProgressBar.svelte
mark_module_start();
ProgressBar[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/ProgressBar/ProgressBar.svelte";
var root17 = add_locations(template(`<div data-testid="progress-bar" role="progressbar"><div></div></div>`), ProgressBar[FILENAME], [[26, 0, [[36, 1]]]]);
var $$css = {
  hash: "s-RgZvmUCyIirC",
  code: "\n	.anim-indeterminate.s-RgZvmUCyIirC {\n		transform-origin: 0% 50%;\n		animation: s-RgZvmUCyIirC-anim-indeterminate 2s infinite linear;\n	}\n	/* prettier-ignore */\n	@keyframes s-RgZvmUCyIirC-anim-indeterminate {\n		0% { transform: translateX(0) scaleX(0); }\n		40% { transform: translateX(0) scaleX(0.4); }\n		100% { transform: translateX(100%) scaleX(0.5); }\n	}\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvZ3Jlc3NCYXIuc3ZlbHRlIiwibWFwcGluZ3MiOiIiLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbIlByb2dyZXNzQmFyLnN2ZWx0ZSJdfQ== */"
};
function ProgressBar($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, ProgressBar);
  append_styles($$anchor, $$css);
  const fillPercent = mutable_state();
  const indeterminate = mutable_state();
  const classesIndeterminate = mutable_state();
  const classesTrack = mutable_state();
  const classesMeter = mutable_state();
  let value = prop($$props, "value", 24, () => void 0);
  let min = prop($$props, "min", 8, 0);
  let max = prop($$props, "max", 8, 100);
  let height = prop($$props, "height", 8, "h-2");
  let rounded = prop($$props, "rounded", 8, "rounded-token");
  let transition2 = prop($$props, "transition", 8, "transition-[width]");
  let animIndeterminate = prop($$props, "animIndeterminate", 8, "anim-indeterminate");
  let meter = prop($$props, "meter", 8, "bg-surface-900-50-token");
  let track = prop($$props, "track", 8, "bg-surface-200-700-token");
  let labelledby = prop($$props, "labelledby", 8, "");
  const cTrack = "w-full overflow-hidden";
  const cMeter = "h-full";
  legacy_pre_effect(
    () => (deep_read_state(value()), deep_read_state(min()), deep_read_state(max())),
    () => {
      set(fillPercent, value() ? 100 * (value() - min()) / (max() - min()) : 0);
    }
  );
  legacy_pre_effect(() => deep_read_state(value()), () => {
    set(indeterminate, strict_equals(value(), void 0) || value() < 0);
  });
  legacy_pre_effect(
    () => (get(indeterminate), deep_read_state(animIndeterminate())),
    () => {
      set(classesIndeterminate, get(indeterminate) ? animIndeterminate() : "");
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(track()), deep_read_state(height()), deep_read_state(rounded()), deep_read_state($$sanitized_props)),
    () => {
      set(classesTrack, `${cTrack} ${track()} ${height()} ${rounded()} ${$$sanitized_props.class ?? ""}`);
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(meter()), deep_read_state(rounded()), get(classesIndeterminate), deep_read_state(transition2())),
    () => {
      set(classesMeter, `${cMeter} ${meter()} ${rounded()} ${get(classesIndeterminate)} ${transition2()}`);
    }
  );
  legacy_pre_effect_reset();
  init();
  var div = root17();
  var div_1 = child(div);
  reset(div);
  template_effect(() => {
    set_class(div, `progress-bar ${get(classesTrack) ?? ""} s-RgZvmUCyIirC`);
    set_attribute(div, "aria-labelledby", labelledby());
    set_attribute(div, "aria-valuenow", value());
    set_attribute(div, "aria-valuemin", min());
    set_attribute(div, "aria-valuemax", max() - min());
    set_class(div_1, `progress-bar-meter ${get(classesMeter) ?? ""} s-RgZvmUCyIirC`);
    set_style(div_1, "width", `${(get(indeterminate) ? 100 : get(fillPercent)) ?? ""}%`);
  });
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ProgressBar = hmr(ProgressBar, () => ProgressBar[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-RgZvmUCyIirC");
    module.default[HMR].source = ProgressBar[HMR].source;
    set(ProgressBar[HMR].source, module.default[HMR].original);
  });
}
var ProgressBar_default = ProgressBar;
mark_module_end(ProgressBar);

// node_modules/@skeletonlabs/skeleton/dist/components/ProgressRadial/ProgressRadial.svelte
mark_module_start();
ProgressRadial[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/ProgressRadial/ProgressRadial.svelte";
var root_113 = add_locations(ns_template(`<text x="50%" y="50%" text-anchor="middle" dominant-baseline="middle" font-weight="bold"><!></text>`), ProgressRadial[FILENAME], [[62, 3]]);
var root18 = add_locations(template(`<figure data-testid="progress-radial" role="meter"><svg class="rounded-full"><circle cx="50%" cy="50%"></circle><circle cx="50%" cy="50%"></circle><!></svg></figure>`), ProgressRadial[FILENAME], [
  [
    32,
    0,
    [
      [43, 1, [[45, 2], [48, 2]]]
    ]
  ]
]);
function ProgressRadial($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, ProgressRadial);
  const classesBase = mutable_state();
  let value = prop($$props, "value", 24, () => void 0);
  let stroke = prop($$props, "stroke", 8, 40);
  let font = prop($$props, "font", 8, 56);
  let strokeLinecap = prop($$props, "strokeLinecap", 8, "butt");
  let transition2 = prop($$props, "transition", 8, "transition-[stroke-dashoffset]");
  let width = prop($$props, "width", 8, "w-36");
  let meter = prop($$props, "meter", 8, "stroke-surface-900 dark:stroke-surface-50");
  let track = prop($$props, "track", 8, "stroke-surface-500/30");
  let fill = prop($$props, "fill", 8, "fill-token");
  let labelledby = prop($$props, "labelledby", 8, "");
  const cBase = "progress-radial relative overflow-hidden";
  const cBaseTrack = "fill-transparent";
  const cBaseMeter = "fill-transparent -rotate-90 origin-[50%_50%]";
  const baseSize = 512;
  const radius = baseSize / 2 - stroke() / 2;
  let circumference = mutable_state(radius);
  let dashoffset = mutable_state();
  function setProgress(percent) {
    set(circumference, radius * 2 * Math.PI);
    set(dashoffset, get(circumference) - percent / 100 * get(circumference));
  }
  setProgress(0);
  afterUpdate(() => {
    setProgress(strict_equals(value(), void 0) ? 25 : value());
  });
  legacy_pre_effect(
    () => (deep_read_state(width()), deep_read_state($$sanitized_props)),
    () => {
      set(classesBase, `${cBase} ${width()} ${$$sanitized_props.class ?? ""}`);
    }
  );
  legacy_pre_effect_reset();
  init();
  var figure = root18();
  set_attribute(figure, "aria-valuemin", 0);
  set_attribute(figure, "aria-valuemax", 100);
  var svg = child(figure);
  set_attribute(svg, "viewBox", `0 0 ${baseSize ?? ""} ${baseSize ?? ""}`);
  var circle = child(svg);
  set_attribute(circle, "r", radius);
  var circle_1 = sibling(circle);
  set_attribute(circle_1, "r", radius);
  var node = sibling(circle_1);
  if_block(node, () => equals(value(), void 0, false) && value() >= 0 && $$slots.default, ($$anchor2) => {
    var text2 = root_113();
    var node_1 = child(text2);
    slot(node_1, $$props, "default", {}, null);
    reset(text2);
    template_effect(() => {
      set_attribute(text2, "font-size", font());
      set_svg_class(text2, `progress-radial-text ${fill() ?? ""}`);
    });
    append($$anchor2, text2);
  });
  reset(svg);
  reset(figure);
  template_effect(() => {
    set_class(figure, `progress-radial ${get(classesBase) ?? ""}`);
    set_attribute(figure, "aria-labelledby", labelledby());
    set_attribute(figure, "aria-valuenow", value() || 0);
    set_attribute(figure, "aria-valuetext", value() ? `${value()}%` : "Indeterminate Spinner");
    toggle_class(svg, "animate-spin", strict_equals(value(), void 0));
    set_svg_class(circle, `progress-radial-track ${cBaseTrack ?? ""} ${track() ?? ""}`);
    set_attribute(circle, "stroke-width", stroke());
    set_svg_class(circle_1, `progress-radial-meter ${cBaseMeter ?? ""} ${meter() ?? ""} ${transition2() ?? ""}`);
    set_attribute(circle_1, "stroke-width", stroke());
    set_attribute(circle_1, "stroke-linecap", strokeLinecap());
    set_style(circle_1, "stroke-dasharray", `${get(circumference) ?? ""}
			${get(circumference) ?? ""}`);
    set_style(circle_1, "stroke-dashoffset", get(dashoffset));
  });
  append($$anchor, figure);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ProgressRadial = hmr(ProgressRadial, () => ProgressRadial[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ProgressRadial[HMR].source;
    set(ProgressRadial[HMR].source, module.default[HMR].original);
  });
}
var ProgressRadial_default = ProgressRadial;
mark_module_end(ProgressRadial);

// node_modules/@skeletonlabs/skeleton/dist/components/Ratings/Ratings.svelte
mark_module_start();
Ratings[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/Ratings/Ratings.svelte";
var root_29 = add_locations(template(`<button type="button"><!></button>`), Ratings[FILENAME], [[31, 3]]);
var root_73 = add_locations(template(`<span><!></span>`), Ratings[FILENAME], [[41, 3]]);
var root19 = add_locations(template(`<div data-testid="rating-bar"></div>`), Ratings[FILENAME], [[27, 0]]);
function Ratings($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, Ratings);
  const classesBase = mutable_state();
  let value = prop($$props, "value", 8, 0);
  let max = prop($$props, "max", 8, 5);
  let interactive = prop($$props, "interactive", 8, false);
  let text2 = prop($$props, "text", 8, "text-token");
  let fill = prop($$props, "fill", 8, "fill-token");
  let justify = prop($$props, "justify", 8, "justify-center");
  let spacing = prop($$props, "spacing", 8, "space-x-2");
  let regionIcon = prop($$props, "regionIcon", 8, "");
  const dispatch = createEventDispatcher();
  function iconClick(index2) {
    dispatch("icon", { index: index2 + 1 });
  }
  function isFull(value2, index2) {
    return Math.floor(value2) >= index2 + 1;
  }
  function isHalf(value2, index2) {
    return strict_equals(value2, index2 + 0.5);
  }
  const cBase = "w-full flex";
  legacy_pre_effect(
    () => (deep_read_state(text2()), deep_read_state(fill()), deep_read_state(justify()), deep_read_state(spacing()), deep_read_state($$sanitized_props)),
    () => {
      set(classesBase, `${cBase} ${text2()} ${fill()} ${justify()} ${spacing()} ${$$sanitized_props.class ?? ""}`);
    }
  );
  legacy_pre_effect_reset();
  init();
  var div = root19();
  each(div, 5, () => ({ length: max() }), index, ($$anchor2, _, i) => {
    var fragment = comment();
    var node = first_child(fragment);
    if_block(
      node,
      interactive,
      ($$anchor3) => {
        var button = root_29();
        var node_1 = child(button);
        if_block(
          node_1,
          () => isFull(value(), i),
          ($$anchor4) => {
            var fragment_1 = comment();
            var node_2 = first_child(fragment_1);
            slot(node_2, $$props, "full", {}, null);
            append($$anchor4, fragment_1);
          },
          ($$anchor4) => {
            var fragment_2 = comment();
            var node_3 = first_child(fragment_2);
            if_block(
              node_3,
              () => isHalf(value(), i),
              ($$anchor5) => {
                var fragment_3 = comment();
                var node_4 = first_child(fragment_3);
                slot(node_4, $$props, "half", {}, null);
                append($$anchor5, fragment_3);
              },
              ($$anchor5) => {
                var fragment_4 = comment();
                var node_5 = first_child(fragment_4);
                slot(node_5, $$props, "empty", {}, null);
                append($$anchor5, fragment_4);
              },
              true
            );
            append($$anchor4, fragment_2);
          }
        );
        reset(button);
        template_effect(() => set_class(button, `rating-icon ${regionIcon() ?? ""}`));
        event("click", button, () => iconClick(i));
        append($$anchor3, button);
      },
      ($$anchor3) => {
        var span = root_73();
        var node_6 = child(span);
        if_block(
          node_6,
          () => isFull(value(), i),
          ($$anchor4) => {
            var fragment_5 = comment();
            var node_7 = first_child(fragment_5);
            slot(node_7, $$props, "full", {}, null);
            append($$anchor4, fragment_5);
          },
          ($$anchor4) => {
            var fragment_6 = comment();
            var node_8 = first_child(fragment_6);
            if_block(
              node_8,
              () => isHalf(value(), i),
              ($$anchor5) => {
                var fragment_7 = comment();
                var node_9 = first_child(fragment_7);
                slot(node_9, $$props, "half", {}, null);
                append($$anchor5, fragment_7);
              },
              ($$anchor5) => {
                var fragment_8 = comment();
                var node_10 = first_child(fragment_8);
                slot(node_10, $$props, "empty", {}, null);
                append($$anchor5, fragment_8);
              },
              true
            );
            append($$anchor4, fragment_6);
          }
        );
        reset(span);
        template_effect(() => set_class(span, `rating-icon ${regionIcon() ?? ""}`));
        append($$anchor3, span);
      }
    );
    append($$anchor2, fragment);
  });
  reset(div);
  template_effect(() => set_class(div, `ratings ${get(classesBase) ?? ""}`));
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ratings = hmr(Ratings, () => Ratings[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ratings[HMR].source;
    set(Ratings[HMR].source, module.default[HMR].original);
  });
}
var Ratings_default = Ratings;
mark_module_end(Ratings);

// node_modules/@skeletonlabs/skeleton/dist/components/Radio/RadioGroup.svelte
mark_module_start();
RadioGroup[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/Radio/RadioGroup.svelte";
var root20 = add_locations(template(`<div data-testid="radio-group" role="radiogroup"><!></div>`), RadioGroup[FILENAME], [[27, 0]]);
function RadioGroup($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, RadioGroup);
  const classesBase = mutable_state();
  let display = prop($$props, "display", 8, "inline-flex");
  let flexDirection = prop($$props, "flexDirection", 8, "flex-row");
  let gap = prop($$props, "gap", 8, "gap-1");
  let background = prop($$props, "background", 8, "bg-surface-200-700-token");
  let border = prop($$props, "border", 8, "border-token border-surface-400-500-token");
  let rounded = prop($$props, "rounded", 8, "rounded-token");
  let padding = prop($$props, "padding", 8, "px-4 py-1");
  let active = prop($$props, "active", 8, "variant-filled");
  let hover = prop($$props, "hover", 8, "hover:variant-soft");
  let color = prop($$props, "color", 8, "");
  let fill = prop($$props, "fill", 8, "");
  let regionLabel = prop($$props, "regionLabel", 8, "");
  let labelledby = prop($$props, "labelledby", 8, "");
  setContext("rounded", rounded());
  setContext("padding", padding());
  setContext("active", active());
  setContext("hover", hover());
  setContext("color", color());
  setContext("fill", fill());
  setContext("regionLabel", regionLabel());
  const cBase = "p-1";
  legacy_pre_effect(
    () => (deep_read_state(display()), deep_read_state(flexDirection()), deep_read_state(gap()), deep_read_state(background()), deep_read_state(border()), deep_read_state(rounded()), deep_read_state($$sanitized_props)),
    () => {
      set(classesBase, `${cBase} ${display()} ${flexDirection()} ${gap()} ${background()} ${border()} ${rounded()} ${$$sanitized_props.class ?? ""}`);
    }
  );
  legacy_pre_effect_reset();
  init();
  var div = root20();
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  template_effect(() => {
    set_class(div, `radio-group ${get(classesBase) ?? ""}`);
    set_attribute(div, "aria-labelledby", labelledby());
  });
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RadioGroup = hmr(RadioGroup, () => RadioGroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RadioGroup[HMR].source;
    set(RadioGroup[HMR].source, module.default[HMR].original);
  });
}
var RadioGroup_default = RadioGroup;
mark_module_end(RadioGroup);

// node_modules/@skeletonlabs/skeleton/dist/components/Radio/RadioItem.svelte
mark_module_start();
RadioItem[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/Radio/RadioItem.svelte";
var root21 = add_locations(template(`<label><div data-testid="radio-item" role="radio" tabindex="0"><div class="h-0 w-0 overflow-hidden"><input></div> <!></div></label>`), RadioItem[FILENAME], [
  [
    40,
    0,
    [
      [
        42,
        1,
        [[56, 2, [[57, 3]]]]
      ]
    ]
  ]
]);
function RadioItem($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "group",
    "name",
    "value",
    "title",
    "label",
    "rounded",
    "padding",
    "active",
    "hover",
    "color",
    "fill",
    "regionLabel"
  ]);
  push($$props, false, RadioItem);
  const checked = mutable_state();
  const classesActive = mutable_state();
  const classesDisabled = mutable_state();
  const classsBase = mutable_state();
  const classesWrapper = mutable_state();
  const binding_group = [];
  let group = prop($$props, "group", 12);
  let name = prop($$props, "name", 8);
  let value = prop($$props, "value", 8);
  let title = prop($$props, "title", 8, "");
  let label = prop($$props, "label", 8, "");
  let rounded = prop($$props, "rounded", 24, () => getContext("rounded"));
  let padding = prop($$props, "padding", 24, () => getContext("padding"));
  let active = prop($$props, "active", 24, () => getContext("active"));
  let hover = prop($$props, "hover", 24, () => getContext("hover"));
  let color = prop($$props, "color", 24, () => getContext("color"));
  let fill = prop($$props, "fill", 24, () => getContext("fill"));
  let regionLabel = prop($$props, "regionLabel", 24, () => getContext("regionLabel"));
  const cBase = "flex-auto";
  const cWrapper = "text-base text-center cursor-pointer";
  const cDisabled = "opacity-50 cursor-not-allowed";
  let elemInput = mutable_state();
  function onKeyDown(event2) {
    if (["Enter", "Space"].includes(event2.code)) {
      event2.preventDefault();
      get(elemInput).click();
    }
  }
  function prunedRestProps() {
    delete $$restProps.class;
    return $$restProps;
  }
  legacy_pre_effect(
    () => (deep_read_state(value()), deep_read_state(group())),
    () => {
      set(checked, strict_equals(value(), group()));
    }
  );
  legacy_pre_effect(
    () => (get(checked), deep_read_state(active()), deep_read_state(color()), deep_read_state(fill()), deep_read_state(hover())),
    () => {
      set(classesActive, get(checked) ? `${active()} ${color()} ${fill()}` : hover());
    }
  );
  legacy_pre_effect(() => deep_read_state($$sanitized_props), () => {
    set(classesDisabled, $$sanitized_props.disabled ? cDisabled : "");
  });
  legacy_pre_effect(() => {
  }, () => {
    set(classsBase, `${cBase}`);
  });
  legacy_pre_effect(
    () => (deep_read_state(padding()), deep_read_state(rounded()), get(classesActive), get(classesDisabled), deep_read_state($$sanitized_props)),
    () => {
      set(classesWrapper, `${cWrapper} ${padding()} ${rounded()} ${get(classesActive)} ${get(classesDisabled)} ${$$sanitized_props.class ?? ""}`);
    }
  );
  legacy_pre_effect_reset();
  init();
  var label_1 = root21();
  var div = child(label_1);
  var div_1 = child(div);
  var input = child(div_1);
  remove_input_defaults(input);
  const spread_with_call = derived_safe_equal(prunedRestProps);
  let attributes;
  bind_this(input, ($$value) => set(elemInput, $$value), () => get(elemInput));
  reset(div_1);
  var node = sibling(div_1, 2);
  slot(node, $$props, "default", {}, null);
  reset(div);
  reset(label_1);
  template_effect(() => {
    set_class(label_1, `radio-label ${get(classsBase) ?? ""} ${regionLabel() ?? ""}`);
    set_class(div, `radio-item ${get(classesWrapper) ?? ""}`);
    set_attribute(div, "aria-checked", get(checked));
    set_attribute(div, "aria-label", label());
    set_attribute(div, "title", title());
    attributes = set_attributes(input, attributes, {
      type: "radio",
      name: name(),
      value: value(),
      ...get(spread_with_call),
      tabindex: "-1"
    });
  });
  bind_group(
    binding_group,
    [],
    input,
    () => {
      value();
      return group();
    },
    group
  );
  event("click", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("change", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keydown", div, onKeyDown);
  event("keydown", div, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keyup", div, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keypress", div, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, label_1);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RadioItem = hmr(RadioItem, () => RadioItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RadioItem[HMR].source;
    set(RadioItem[HMR].source, module.default[HMR].original);
  });
}
var RadioItem_default = RadioItem;
mark_module_end(RadioItem);

// node_modules/@skeletonlabs/skeleton/dist/components/RangeSlider/RangeSlider.svelte
mark_module_start();
RangeSlider[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/RangeSlider/RangeSlider.svelte";
var root_114 = add_locations(template(`<label><!></label>`), RangeSlider[FILENAME], [[38, 22]]);
var root_311 = add_locations(template(`<option></option>`), RangeSlider[FILENAME], [[64, 5]]);
var root_210 = add_locations(template(`<datalist class="range-slider-ticks"></datalist>`), RangeSlider[FILENAME], [[62, 3]]);
var root_44 = add_locations(template(`<div class="range-slider-trail"><!></div>`), RangeSlider[FILENAME], [[71, 20]]);
var root22 = add_locations(template(`<div data-testid="range-slider"><!> <div><input> <!></div> <!></div>`), RangeSlider[FILENAME], [
  [
    36,
    0,
    [[41, 1, [[43, 2]]]]
  ]
]);
function RangeSlider($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "name",
    "id",
    "value",
    "min",
    "max",
    "step",
    "ticked",
    "accent",
    "label"
  ]);
  push($$props, false, RangeSlider);
  const classesBase = mutable_state();
  const classesInput = mutable_state();
  let name = prop($$props, "name", 8);
  let id = prop($$props, "id", 24, () => String(Math.random()));
  let value = prop($$props, "value", 12, 0);
  let min = prop($$props, "min", 8, 0);
  let max = prop($$props, "max", 8, 100);
  let step = prop($$props, "step", 8, 1);
  let ticked = prop($$props, "ticked", 8, false);
  let accent = prop($$props, "accent", 8, "accent-surface-900 dark:accent-surface-50");
  let label = prop($$props, "label", 8, "");
  const cBase = "space-y-2";
  const cBaseLabel = "";
  const cBaseContent = "flex justify-center py-2";
  const cBaseInput = "w-full h-2";
  let tickmarks = mutable_state();
  function setTicks() {
    if (equals(ticked(), false)) return;
    set(tickmarks, Array.from({ length: max() - min() + 1 }, (_, i) => i + min()));
  }
  if (ticked()) setTicks();
  afterUpdate(() => {
    setTicks();
  });
  function prunedRestProps() {
    delete $$restProps.class;
    return $$restProps;
  }
  legacy_pre_effect(() => deep_read_state($$sanitized_props), () => {
    set(classesBase, `${cBase} ${$$sanitized_props.class ?? ""}`);
  });
  legacy_pre_effect(() => deep_read_state(accent()), () => {
    set(classesInput, `${cBaseInput} ${accent()}`);
  });
  legacy_pre_effect_reset();
  init();
  var div = root22();
  var node = child(div);
  if_block(node, () => $$slots.default, ($$anchor2) => {
    var label_1 = root_114();
    set_class(label_1, `range-slider-label ${cBaseLabel ?? ""}`);
    var node_1 = child(label_1);
    slot(node_1, $$props, "default", {}, null);
    reset(label_1);
    template_effect(() => set_attribute(label_1, "for", id()));
    append($$anchor2, label_1);
  });
  var div_1 = sibling(node, 2);
  set_class(div_1, `range-content ${cBaseContent ?? ""}`);
  var input = child(div_1);
  remove_input_defaults(input);
  const spread_with_call = derived_safe_equal(prunedRestProps);
  let attributes;
  var node_2 = sibling(input, 2);
  if_block(node_2, () => ticked() && get(tickmarks) && get(tickmarks).length, ($$anchor2) => {
    var datalist = root_210();
    each(datalist, 5, () => get(tickmarks), index, ($$anchor3, tm) => {
      var option = root_311();
      var option_value = {};
      template_effect(() => {
        if (option_value !== (option_value = get(tm))) {
          option.value = null == (option.__value = get(tm)) ? "" : get(tm);
        }
        set_attribute(option, "label", get(tm));
      });
      append($$anchor3, option);
    });
    reset(datalist);
    template_effect(() => set_attribute(datalist, "id", `tickmarks-${id() ?? ""}`));
    append($$anchor2, datalist);
  });
  reset(div_1);
  var node_3 = sibling(div_1, 2);
  if_block(node_3, () => $$slots.trail, ($$anchor2) => {
    var div_2 = root_44();
    var node_4 = child(div_2);
    slot(node_4, $$props, "trail", {}, null);
    reset(div_2);
    append($$anchor2, div_2);
  });
  reset(div);
  template_effect(() => {
    set_class(div, `range-slider ${get(classesBase) ?? ""}`);
    attributes = set_attributes(input, attributes, {
      type: "range",
      id: id(),
      name: name(),
      class: `range-slider-input ${get(classesInput) ?? ""}`,
      list: `tickmarks-${id() ?? ""}`,
      "aria-label": label(),
      min: min(),
      max: max(),
      step: step(),
      ...get(spread_with_call)
    });
  });
  bind_value(input, value);
  event("click", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("change", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("blur", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RangeSlider = hmr(RangeSlider, () => RangeSlider[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RangeSlider[HMR].source;
    set(RangeSlider[HMR].source, module.default[HMR].original);
  });
}
var RangeSlider_default = RangeSlider;
mark_module_end(RangeSlider);

// node_modules/@skeletonlabs/skeleton/dist/components/SlideToggle/SlideToggle.svelte
mark_module_start();
SlideToggle[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/SlideToggle/SlideToggle.svelte";
var root_115 = add_locations(template(`<div class="slide-toggle-text ml-3"><!></div>`), SlideToggle[FILENAME], [[89, 23]]);
var root23 = add_locations(template(`<div data-testid="slide-toggle" role="switch" tabindex="0"><label><input> <div><div></div></div> <!></label></div>`), SlideToggle[FILENAME], [
  [
    56,
    0,
    [
      [
        66,
        1,
        [
          [68, 2],
          [85, 2, [[86, 3]]]
        ]
      ]
    ]
  ]
]);
function SlideToggle($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "name",
    "checked",
    "size",
    "background",
    "active",
    "border",
    "rounded",
    "label"
  ]);
  push($$props, false, SlideToggle);
  const cTrackActive = mutable_state();
  const cThumbBackground = mutable_state();
  const cThumbPos = mutable_state();
  const classesDisabled = mutable_state();
  const classesBase = mutable_state();
  const classesLabel = mutable_state();
  const classesTrack = mutable_state();
  const classesThumb = mutable_state();
  const dispatch = createEventDispatcher();
  let name = prop($$props, "name", 8);
  let checked = prop($$props, "checked", 12, false);
  let size = prop($$props, "size", 8, "md");
  let background = prop($$props, "background", 8, "bg-surface-400 dark:bg-surface-700");
  let active = prop($$props, "active", 8, "bg-surface-900 dark:bg-surface-300");
  let border = prop($$props, "border", 8, "");
  let rounded = prop($$props, "rounded", 8, "rounded-full");
  let label = prop($$props, "label", 8, "");
  const cBase = "inline-block";
  const cLabel = "unstyled flex items-center";
  const cTrack = "flex transition-all duration-[200ms] cursor-pointer";
  const cThumb = "w-[50%] h-full scale-[0.8] transition-all duration-[200ms] shadow";
  let trackSize = mutable_state();
  switch (size()) {
    case "sm":
      set(trackSize, "w-12 h-6");
      break;
    case "lg":
      set(trackSize, "w-20 h-10");
      break;
    default:
      set(trackSize, "w-16 h-8");
  }
  function onKeyDown(event2) {
    if (["Enter", "Space"].includes(event2.code)) {
      event2.preventDefault();
      dispatch("keyup", event2);
      const inputElem = event2.currentTarget.firstChild;
      inputElem.click();
    }
  }
  function prunedRestProps() {
    delete $$restProps.class;
    return $$restProps;
  }
  legacy_pre_effect(
    () => (deep_read_state(checked()), deep_read_state(active()), deep_read_state(background())),
    () => {
      set(cTrackActive, checked() ? active() : `${background()} cursor-pointer`);
    }
  );
  legacy_pre_effect(() => deep_read_state(checked()), () => {
    set(cThumbBackground, checked() ? "bg-white/75" : "bg-white");
  });
  legacy_pre_effect(() => deep_read_state(checked()), () => {
    set(cThumbPos, checked() ? "translate-x-full" : "");
  });
  legacy_pre_effect(() => deep_read_state($$sanitized_props), () => {
    set(classesDisabled, strict_equals($$sanitized_props.disabled, true) ? "opacity-50" : "hover:brightness-[105%] dark:hover:brightness-110 cursor-pointer");
  });
  legacy_pre_effect(
    () => (deep_read_state(rounded()), get(classesDisabled), deep_read_state($$sanitized_props)),
    () => {
      set(classesBase, `${cBase} ${rounded()} ${get(classesDisabled)} ${$$sanitized_props.class ?? ""}`);
    }
  );
  legacy_pre_effect(() => {
  }, () => {
    set(classesLabel, `${cLabel}`);
  });
  legacy_pre_effect(
    () => (deep_read_state(border()), deep_read_state(rounded()), get(trackSize), get(cTrackActive)),
    () => {
      set(classesTrack, `${cTrack} ${border()} ${rounded()} ${get(trackSize)} ${get(cTrackActive)}`);
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(rounded()), get(cThumbBackground), get(cThumbPos)),
    () => {
      set(classesThumb, `${cThumb} ${rounded()} ${get(cThumbBackground)} ${get(cThumbPos)}`);
    }
  );
  legacy_pre_effect_reset();
  init();
  var div = root23();
  var label_1 = child(div);
  var input = child(label_1);
  remove_input_defaults(input);
  const spread_with_call = derived_safe_equal(prunedRestProps);
  let attributes;
  var div_1 = sibling(input, 2);
  var div_2 = child(div_1);
  reset(div_1);
  var node = sibling(div_1, 2);
  if_block(node, () => $$slots.default, ($$anchor2) => {
    var div_3 = root_115();
    var node_1 = child(div_3);
    slot(node_1, $$props, "default", {}, null);
    reset(div_3);
    append($$anchor2, div_3);
  });
  reset(label_1);
  reset(div);
  template_effect(() => {
    set_attribute(div, "id", label());
    set_class(div, `slide-toggle ${get(classesBase) ?? ""}`);
    set_attribute(div, "aria-label", label());
    set_attribute(div, "aria-checked", checked());
    set_class(label_1, `slide-toggle-label ${get(classesLabel) ?? ""}`);
    attributes = set_attributes(input, attributes, {
      type: "checkbox",
      class: "slide-toggle-input hidden",
      name: name(),
      ...get(spread_with_call),
      disabled: $$sanitized_props.disabled
    });
    set_class(div_1, `slide-toggle-track ${get(classesTrack) ?? ""}`);
    toggle_class(div_1, "cursor-not-allowed", $$sanitized_props.disabled);
    set_class(div_2, `slide-toggle-thumb ${get(classesThumb) ?? ""}`);
    toggle_class(div_2, "cursor-not-allowed", $$sanitized_props.disabled);
  });
  bind_checked(input, checked);
  event("click", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keydown", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keyup", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keypress", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseover", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("change", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("focus", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("blur", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keydown", div, onKeyDown);
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SlideToggle = hmr(SlideToggle, () => SlideToggle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SlideToggle[HMR].source;
    set(SlideToggle[HMR].source, module.default[HMR].original);
  });
}
var SlideToggle_default = SlideToggle;
mark_module_end(SlideToggle);

// node_modules/@skeletonlabs/skeleton/dist/components/Stepper/Stepper.svelte
mark_module_start();
Stepper[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/Stepper/Stepper.svelte";
var root_211 = add_locations(template(`<div><span> </span></div>`), Stepper[FILENAME], [[97, 4, [[98, 5]]]]);
var root_116 = add_locations(template(`<header></header>`), Stepper[FILENAME], [[91, 2]]);
var root24 = add_locations(template(`<div data-testid="stepper"><!> <div><!></div></div>`), Stepper[FILENAME], [[88, 0, [[104, 1]]]]);
function Stepper($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, Stepper);
  const $$stores = setup_stores();
  const $prefersReducedMotionStore = () => (validate_store(prefersReducedMotionStore, "prefersReducedMotionStore"), store_get(prefersReducedMotionStore, "$prefersReducedMotionStore", $$stores));
  const $state = () => (validate_store(state, "state"), store_get(state, "$state", $$stores));
  const isActive = mutable_state();
  const classesBase = mutable_state();
  const classesHeader = mutable_state();
  const classesHeaderStep = mutable_state();
  const classesBadge = mutable_state();
  const classesContent = mutable_state();
  const dispatch = createEventDispatcher();
  let gap = prop($$props, "gap", 8, "gap-4");
  let stepTerm = prop($$props, "stepTerm", 8, "Step");
  let badge = prop($$props, "badge", 8, "variant-filled-surface");
  let active = prop($$props, "active", 8, "variant-filled");
  let border = prop($$props, "border", 8, "border-surface-400-500-token");
  let start = prop($$props, "start", 8, 0);
  let justify = prop($$props, "justify", 8, "justify-between");
  let buttonBack = prop($$props, "buttonBack", 8, "variant-ghost");
  let buttonBackType = prop($$props, "buttonBackType", 8, "button");
  let buttonBackLabel = prop($$props, "buttonBackLabel", 8, "&larr; Back");
  let buttonNext = prop($$props, "buttonNext", 8, "variant-filled");
  let buttonNextType = prop($$props, "buttonNextType", 8, "button");
  let buttonNextLabel = prop($$props, "buttonNextLabel", 8, "Next &rarr;");
  let buttonComplete = prop($$props, "buttonComplete", 8, "variant-filled-primary");
  let buttonCompleteType = prop($$props, "buttonCompleteType", 8, "button");
  let buttonCompleteLabel = prop($$props, "buttonCompleteLabel", 8, "Complete");
  let regionHeader = prop($$props, "regionHeader", 8, "");
  let regionContent = prop($$props, "regionContent", 8, "");
  let transitions = prop($$props, "transitions", 24, () => !$prefersReducedMotionStore());
  let transitionIn = prop($$props, "transitionIn", 8, fade);
  let transitionInParams = prop($$props, "transitionInParams", 24, () => ({ duration: 100 }));
  let transitionOut = prop($$props, "transitionOut", 8, fade);
  let transitionOutParams = prop($$props, "transitionOutParams", 24, () => ({ duration: 100 }));
  let state = writable({ current: start(), total: 0 });
  async function onNext(locked, stepIndex) {
    await new Promise((resolve) => setTimeout(resolve));
    if (locked) return;
    store_mutate(state, untrack($state).current += 1, untrack($state));
    dispatch("next", { step: stepIndex, state: $state() });
    dispatch("step", { step: stepIndex, state: $state() });
  }
  function onBack(stepIndex) {
    store_mutate(state, untrack($state).current -= 1, untrack($state));
    dispatch("back", { step: stepIndex, state: $state() });
    dispatch("step", { step: stepIndex, state: $state() });
  }
  function onComplete(stepIndex) {
    dispatch("complete", { step: stepIndex, state: $state() });
  }
  setContext("state", state);
  setContext("stepTerm", stepTerm());
  setContext("gap", gap());
  setContext("justify", justify());
  setContext("onNext", onNext);
  setContext("onBack", onBack);
  setContext("onComplete", onComplete);
  setContext("buttonBack", buttonBack());
  setContext("buttonBackType", buttonBackType());
  setContext("buttonBackLabel", buttonBackLabel());
  setContext("buttonNext", buttonNext());
  setContext("buttonNextType", buttonNextType());
  setContext("buttonNextLabel", buttonNextLabel());
  setContext("buttonComplete", buttonComplete());
  setContext("buttonCompleteType", buttonCompleteType());
  setContext("buttonCompleteLabel", buttonCompleteLabel());
  setContext("transitions", transitions());
  setContext("transitionIn", transitionIn());
  setContext("transitionInParams", transitionInParams());
  setContext("transitionOut", transitionOut());
  setContext("transitionOutParams", transitionOutParams());
  const cBase = "space-y-4";
  const cHeader = "flex items-center border-t mt-[15px]";
  const cHeaderStep = "-mt-[15px] transition-all duration-300";
  const cContent = "";
  legacy_pre_effect(() => $state(), () => {
    set(isActive, (step) => strict_equals(step, $state().current));
  });
  legacy_pre_effect(() => deep_read_state($$sanitized_props), () => {
    set(classesBase, `${cBase} ${$$sanitized_props.class ?? ""}`);
  });
  legacy_pre_effect(
    () => (deep_read_state(border()), deep_read_state(gap()), deep_read_state(regionHeader())),
    () => {
      set(classesHeader, `${cHeader} ${border()} ${gap()} ${regionHeader()}`);
    }
  );
  legacy_pre_effect(() => {
  }, () => {
    set(classesHeaderStep, `${cHeaderStep}`);
  });
  legacy_pre_effect(
    () => (get(isActive), deep_read_state(active()), deep_read_state(badge())),
    () => {
      set(classesBadge, (step) => get(isActive)(step) ? active() : badge());
    }
  );
  legacy_pre_effect(() => deep_read_state(regionContent()), () => {
    set(classesContent, `${cContent} ${regionContent()}`);
  });
  legacy_pre_effect_reset();
  init();
  var div = root24();
  var node = child(div);
  if_block(node, () => $state().total, ($$anchor2) => {
    var header = root_116();
    each(header, 5, () => Array.from(Array($state().total).keys()), index, ($$anchor3, step) => {
      var div_1 = root_211();
      const class_directive = derived_safe_equal(() => get(isActive)(get(step)));
      var span = child(div_1);
      const class_derived = derived_safe_equal(() => `badge ${get(classesBadge)(get(step)) ?? ""}`);
      var text2 = child(span, true);
      template_effect(() => set_text(text2, get(isActive)(get(step)) ? `${stepTerm()} ${get(step) + 1}` : get(step) + 1));
      reset(span);
      reset(div_1);
      template_effect(() => {
        set_class(div_1, `stepper-header-step ${get(classesHeaderStep) ?? ""}`);
        toggle_class(div_1, "flex-1", get(class_directive));
        set_class(span, get(class_derived));
      });
      append($$anchor3, div_1);
    });
    reset(header);
    template_effect(() => set_class(header, `stepper-header ${get(classesHeader) ?? ""}`));
    transition(1, header, () => dynamicTransition, () => ({
      transition: transitionIn(),
      params: transitionInParams(),
      enabled: transitions()
    }));
    transition(2, header, () => dynamicTransition, () => ({
      transition: transitionOut(),
      params: transitionOutParams(),
      enabled: transitions()
    }));
    append($$anchor2, header);
  });
  var div_2 = sibling(node, 2);
  var node_1 = child(div_2);
  slot(node_1, $$props, "default", {}, null);
  reset(div_2);
  reset(div);
  template_effect(() => {
    set_class(div, `stepper ${get(classesBase) ?? ""}`);
    set_class(div_2, `stepper-content ${get(classesContent) ?? ""}`);
  });
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Stepper = hmr(Stepper, () => Stepper[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Stepper[HMR].source;
    set(Stepper[HMR].source, module.default[HMR].original);
  });
}
var Stepper_default = Stepper;
mark_module_end(Stepper);

// node_modules/@skeletonlabs/skeleton/dist/components/Stepper/Step.svelte
mark_module_start();
Step[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/Stepper/Step.svelte";
var root_53 = add_locations(template(`<div class="step-navigation-slot"><!></div>`), Step[FILENAME], [[67, 5]]);
var root_6 = add_locations(template(`<button><!></button>`), Step[FILENAME], [[72, 5]]);
var root_84 = add_locations(template(`<svg class="w-3 aspect-square fill-current" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M144 144v48H304V144c0-44.2-35.8-80-80-80s-80 35.8-80 80zM80 192V144C80 64.5 144.5 0 224 0s144 64.5 144 144v48h16c35.3 0 64 28.7 64 64V448c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V256c0-35.3 28.7-64 64-64H80z"></path></svg>`), Step[FILENAME], [[80, 7, [[81, 8]]]]);
var root_74 = add_locations(template(`<button><!> <span><!></span></button>`), Step[FILENAME], [[78, 5, [[86, 6]]]]);
var root_93 = add_locations(template(`<button><!></button>`), Step[FILENAME], [[90, 5]]);
var root_45 = add_locations(template(`<div><!> <!></div>`), Step[FILENAME], [[60, 3]]);
var root_117 = add_locations(template(`<div data-testid="step"><header><!></header> <div><!></div> <!></div>`), Step[FILENAME], [
  [49, 1, [[51, 2], [55, 2]]]
]);
function Step($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, Step);
  const $$stores = setup_stores();
  const $state = () => (validate_store(state(), "state"), store_get(state(), "$state", $$stores));
  const classesBase = mutable_state();
  const classesHeader = mutable_state();
  const classesContent = mutable_state();
  const classesNavigation = mutable_state();
  let locked = prop($$props, "locked", 8, false);
  let regionHeader = prop($$props, "regionHeader", 8, "");
  let regionContent = prop($$props, "regionContent", 8, "");
  let regionNavigation = prop($$props, "regionNavigation", 8, "");
  let state = prop($$props, "state", 24, () => getContext("state"));
  let stepTerm = prop($$props, "stepTerm", 24, () => getContext("stepTerm"));
  let gap = prop($$props, "gap", 24, () => getContext("gap"));
  let justify = prop($$props, "justify", 24, () => getContext("justify"));
  let onNext = prop($$props, "onNext", 24, () => getContext("onNext"));
  let onBack = prop($$props, "onBack", 24, () => getContext("onBack"));
  let onComplete = prop($$props, "onComplete", 24, () => getContext("onComplete"));
  let buttonBack = prop($$props, "buttonBack", 24, () => getContext("buttonBack"));
  let buttonBackType = prop($$props, "buttonBackType", 24, () => getContext("buttonBackType"));
  let buttonBackLabel = prop($$props, "buttonBackLabel", 24, () => getContext("buttonBackLabel"));
  let buttonNext = prop($$props, "buttonNext", 24, () => getContext("buttonNext"));
  let buttonNextType = prop($$props, "buttonNextType", 24, () => getContext("buttonNextType"));
  let buttonNextLabel = prop($$props, "buttonNextLabel", 24, () => getContext("buttonNextLabel"));
  let buttonComplete = prop($$props, "buttonComplete", 24, () => getContext("buttonComplete"));
  let buttonCompleteType = prop($$props, "buttonCompleteType", 24, () => getContext("buttonCompleteType"));
  let buttonCompleteLabel = prop($$props, "buttonCompleteLabel", 24, () => getContext("buttonCompleteLabel"));
  let transitions = prop($$props, "transitions", 24, () => getContext("transitions"));
  let transitionIn = prop($$props, "transitionIn", 24, () => getContext("transitionIn"));
  let transitionInParams = prop($$props, "transitionInParams", 24, () => getContext("transitionInParams"));
  let transitionOut = prop($$props, "transitionOut", 24, () => getContext("transitionOut"));
  let transitionOutParams = prop($$props, "transitionOutParams", 24, () => getContext("transitionOutParams"));
  const stepIndex = $state().total;
  store_mutate(state(), untrack($state).total += 1, untrack($state));
  const cBase = "space-y-4";
  const cHeader = "text-2xl font-bold";
  const cContent = "space-y-4";
  const cNavigation = "flex";
  onDestroy(() => {
    store_mutate(state(), untrack($state).total -= 1, untrack($state));
  });
  legacy_pre_effect(() => deep_read_state($$sanitized_props), () => {
    set(classesBase, `${cBase} ${$$sanitized_props.class ?? ""}`);
  });
  legacy_pre_effect(() => deep_read_state(regionHeader()), () => {
    set(classesHeader, `${cHeader} ${regionHeader()}`);
  });
  legacy_pre_effect(() => deep_read_state(regionContent()), () => {
    set(classesContent, `${cContent} ${regionContent()}`);
  });
  legacy_pre_effect(
    () => (deep_read_state(justify()), deep_read_state(gap()), deep_read_state(regionNavigation())),
    () => {
      set(classesNavigation, `${cNavigation} ${justify()} ${gap()} ${regionNavigation()}`);
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  if_block(node, () => strict_equals(stepIndex, $state().current), ($$anchor2) => {
    var div = root_117();
    var header = child(div);
    var node_1 = child(header);
    slot(node_1, $$props, "header", {}, ($$anchor3) => {
      var text2 = text();
      template_effect(() => set_text(text2, `${stepTerm() ?? ""} ${stepIndex + 1}`));
      append($$anchor3, text2);
    });
    reset(header);
    var div_1 = sibling(header, 2);
    var node_2 = child(div_1);
    slot(node_2, $$props, "default", {}, ($$anchor3) => {
      var text_1 = text();
      template_effect(() => set_text(text_1, `(${stepTerm() ?? ""} ${stepIndex + 1} Content)`));
      append($$anchor3, text_1);
    });
    reset(div_1);
    var node_3 = sibling(div_1, 2);
    if_block(node_3, () => $state().total > 1, ($$anchor3) => {
      var div_2 = root_45();
      var node_4 = child(div_2);
      if_block(
        node_4,
        () => strict_equals(stepIndex, 0) && $$slots.navigation,
        ($$anchor4) => {
          var div_3 = root_53();
          var node_5 = child(div_3);
          slot(node_5, $$props, "navigation", {}, null);
          reset(div_3);
          append($$anchor4, div_3);
        },
        ($$anchor4) => {
          var button = root_6();
          var node_6 = child(button);
          html(node_6, buttonBackLabel, false, false);
          reset(button);
          template_effect(() => {
            set_attribute(button, "type", buttonBackType());
            set_class(button, `btn ${buttonBack() ?? ""}`);
            button.disabled = strict_equals($state().current, 0);
          });
          event("click", button, () => onBack()(stepIndex));
          append($$anchor4, button);
        }
      );
      var node_7 = sibling(node_4, 2);
      if_block(
        node_7,
        () => stepIndex < $state().total - 1,
        ($$anchor4) => {
          var button_1 = root_74();
          var node_8 = child(button_1);
          if_block(node_8, locked, ($$anchor5) => {
            var svg = root_84();
            append($$anchor5, svg);
          });
          var span = sibling(node_8, 2);
          var node_9 = child(span);
          html(node_9, buttonNextLabel, false, false);
          reset(span);
          reset(button_1);
          template_effect(() => {
            set_attribute(button_1, "type", buttonNextType());
            set_class(button_1, `btn ${buttonNext() ?? ""}`);
            button_1.disabled = locked();
          });
          event("click", button_1, () => onNext()(locked(), stepIndex));
          append($$anchor4, button_1);
        },
        ($$anchor4) => {
          var button_2 = root_93();
          var node_10 = child(button_2);
          html(node_10, buttonCompleteLabel, false, false);
          reset(button_2);
          template_effect(() => {
            set_attribute(button_2, "type", buttonCompleteType());
            set_class(button_2, `btn ${buttonComplete() ?? ""}`);
            button_2.disabled = locked();
          });
          event("click", button_2, () => onComplete()(stepIndex));
          append($$anchor4, button_2);
        }
      );
      reset(div_2);
      template_effect(() => set_class(div_2, `step-navigation ${get(classesNavigation) ?? ""}`));
      transition(1, div_2, () => dynamicTransition, () => ({
        transition: transitionIn(),
        params: transitionInParams(),
        enabled: transitions()
      }));
      transition(2, div_2, () => dynamicTransition, () => ({
        transition: transitionOut(),
        params: transitionOutParams(),
        enabled: transitions()
      }));
      append($$anchor3, div_2);
    });
    reset(div);
    template_effect(() => {
      set_class(div, `step ${get(classesBase) ?? ""}`);
      set_class(header, `step-header ${get(classesHeader) ?? ""}`);
      set_class(div_1, `step-content ${get(classesContent) ?? ""}`);
    });
    append($$anchor2, div);
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Step = hmr(Step, () => Step[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Step[HMR].source;
    set(Step[HMR].source, module.default[HMR].original);
  });
}
var Step_default = Step;
mark_module_end(Step);

// node_modules/@skeletonlabs/skeleton/dist/components/Table/actions.js
function tableA11y(node) {
  const keyWhitelist = ["ArrowRight", "ArrowUp", "ArrowLeft", "ArrowDown", "Home", "End"];
  const onKeyDown = (event2) => {
    if (keyWhitelist.includes(event2.code)) {
      event2.preventDefault();
      switch (event2.code) {
        case "ArrowUp":
          a11ySetActiveCell(node, 0, -1);
          break;
        case "ArrowDown":
          a11ySetActiveCell(node, 0, 1);
          break;
        case "ArrowLeft":
          a11ySetActiveCell(node, -1, 0);
          break;
        case "ArrowRight":
          a11ySetActiveCell(node, 1, 0);
          break;
        case "Home":
          a11yJumpToOuterColumn(node, "first");
          break;
        case "End":
          a11yJumpToOuterColumn(node, "last");
          break;
        default:
          break;
      }
    }
  };
  node.addEventListener("keydown", onKeyDown);
  return {
    destroy() {
      node.removeEventListener("keydown", onKeyDown);
    }
  };
}
function a11ySetActiveCell(node, x, y) {
  const focusedElem = document.activeElement;
  if (!focusedElem || !focusedElem.parentElement || !focusedElem.parentElement.ariaRowIndex || !focusedElem.ariaColIndex)
    return;
  const focusedElemRowIndex = parseInt(focusedElem.parentElement.ariaRowIndex);
  const focusedElemColIndex = parseInt(focusedElem.ariaColIndex);
  const targetRowElement = node.querySelector(`[aria-rowindex="${focusedElemRowIndex + y}"]`);
  if (targetRowElement !== null) {
    const targetColElement = targetRowElement.querySelector(`[aria-colindex="${focusedElemColIndex + x}"]`);
    if (targetColElement !== null)
      targetColElement.focus();
  }
}
function a11yGetTargetElem(node) {
  const focusedElem = document.activeElement;
  if (!focusedElem || !focusedElem.parentElement || !focusedElem.parentElement.ariaRowIndex)
    return null;
  const focusedElemRowIndex = parseInt(focusedElem.parentElement.ariaRowIndex);
  return node.querySelector(`[aria-rowindex="${focusedElemRowIndex}"]`);
}
function a11yJumpToOuterColumn(node, type = "first") {
  const targetRowElement = a11yGetTargetElem(node);
  if (targetRowElement === null)
    return;
  const lastIndex = targetRowElement.children.length;
  const selected = type === "first" ? 1 : lastIndex;
  const targetColElement = targetRowElement.querySelector(`[aria-colindex="${selected}"]`);
  if (targetColElement === null)
    return;
  targetColElement.focus();
}

// node_modules/@skeletonlabs/skeleton/dist/components/Table/Table.svelte
mark_module_start();
Table[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/Table/Table.svelte";
var root_118 = add_locations(template(`<th role="columnheader"><!></th>`), Table[FILENAME], [[47, 5]]);
var root_312 = add_locations(template(`<td role="gridcell"><!></td>`), Table[FILENAME], [[63, 6]]);
var root_212 = add_locations(template(`<tr></tr>`), Table[FILENAME], [[56, 4]]);
var root_54 = add_locations(template(`<td><!></td>`), Table[FILENAME], [[80, 6]]);
var root_46 = add_locations(template(`<tfoot><tr></tr></tfoot>`), Table[FILENAME], [[77, 3, [[78, 4]]]]);
var root25 = add_locations(template(`<div><table><thead><tr></tr></thead><tbody></tbody><!></table></div>`), Table[FILENAME], [
  [
    33,
    0,
    [
      [
        36,
        1,
        [
          [44, 2, [[45, 3]]],
          [52, 2]
        ]
      ]
    ]
  ]
]);
function Table($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, Table);
  const classesBase = mutable_state();
  const classesTable = mutable_state();
  const dispatch = createEventDispatcher();
  let source = prop($$props, "source", 8);
  let interactive = prop($$props, "interactive", 8, false);
  let element = prop($$props, "element", 8, "table");
  let text2 = prop($$props, "text", 8, "");
  let color = prop($$props, "color", 8, "");
  let regionHead = prop($$props, "regionHead", 8, "");
  let regionHeadCell = prop($$props, "regionHeadCell", 8, "");
  let regionBody = prop($$props, "regionBody", 8, "");
  let regionCell = prop($$props, "regionCell", 8, "");
  let regionFoot = prop($$props, "regionFoot", 8, "");
  let regionFootCell = prop($$props, "regionFootCell", 8, "");
  function onRowClick(event2, rowIndex) {
    if (!interactive()) return;
    event2.preventDefault();
    event2.stopPropagation();
    const rowMetaData = source().meta ? source().meta[rowIndex] : source().body[rowIndex];
    dispatch("selected", rowMetaData);
  }
  function onRowKeydown(event2, rowIndex) {
    if (["Enter", "Space"].includes(event2.code)) onRowClick(event2, rowIndex);
  }
  legacy_pre_effect(() => deep_read_state($$sanitized_props), () => {
    set(classesBase, `${$$sanitized_props.class || ""}`);
  });
  legacy_pre_effect(
    () => (deep_read_state(element()), deep_read_state(text2()), deep_read_state(color())),
    () => {
      set(classesTable, `${element()} ${text2()} ${color()}`);
    }
  );
  legacy_pre_effect_reset();
  init();
  var div = root25();
  var table = child(div);
  var thead = child(table);
  var tr = child(thead);
  each(tr, 5, () => source().head, index, ($$anchor2, heading) => {
    var th = root_118();
    var node = child(th);
    html(node, () => get(heading), false, false);
    reset(th);
    template_effect(() => set_class(th, regionHeadCell()));
    append($$anchor2, th);
  });
  reset(tr);
  reset(thead);
  var tbody = sibling(thead);
  each(tbody, 5, () => source().body, index, ($$anchor2, row, rowIndex) => {
    var tr_1 = root_212();
    set_attribute(tr_1, "aria-rowindex", rowIndex + 1);
    each(tr_1, 5, () => get(row), index, ($$anchor3, cell, cellIndex) => {
      var td = root_312();
      set_attribute(td, "aria-colindex", cellIndex + 1);
      var node_1 = child(td);
      html(node_1, () => strict_equals(Number(get(cell)), 0) ? get(cell) : get(cell) ? get(cell) : "-", false, false);
      reset(td);
      template_effect(() => {
        set_class(td, regionCell());
        set_attribute(td, "tabindex", strict_equals(cellIndex, 0) && interactive() ? 0 : -1);
      });
      append($$anchor3, td);
    });
    reset(tr_1);
    event("click", tr_1, (e) => {
      onRowClick(e, rowIndex);
    });
    event("keydown", tr_1, (e) => {
      onRowKeydown(e, rowIndex);
    });
    append($$anchor2, tr_1);
  });
  reset(tbody);
  var node_2 = sibling(tbody);
  if_block(node_2, () => source().foot, ($$anchor2) => {
    var tfoot = root_46();
    var tr_2 = child(tfoot);
    each(tr_2, 5, () => source().foot, index, ($$anchor3, cell) => {
      var td_1 = root_54();
      var node_3 = child(td_1);
      html(node_3, () => get(cell), false, false);
      reset(td_1);
      template_effect(() => set_class(td_1, regionFootCell()));
      append($$anchor3, td_1);
    });
    reset(tr_2);
    reset(tfoot);
    template_effect(() => set_class(tfoot, `table-foot ${regionFoot() ?? ""}`));
    append($$anchor2, tfoot);
  });
  reset(table);
  action(table, ($$node) => tableA11y($$node));
  reset(div);
  template_effect(() => {
    set_class(div, `table-container ${get(classesBase) ?? ""}`);
    set_class(table, get(classesTable));
    set_attribute(table, "role", interactive() ? "grid" : "table");
    toggle_class(table, "table-interactive", interactive());
    set_class(thead, `table-head ${regionHead() ?? ""}`);
    set_class(tbody, `table-body ${regionBody() ?? ""}`);
  });
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Table = hmr(Table, () => Table[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Table[HMR].source;
    set(Table[HMR].source, module.default[HMR].original);
  });
}
var Table_default = Table;
mark_module_end(Table);

// node_modules/@skeletonlabs/skeleton/dist/components/Tab/TabGroup.svelte
mark_module_start();
TabGroup[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/Tab/TabGroup.svelte";
var root_119 = add_locations(template(`<div role="tabpanel" tabindex="0"><!></div>`), TabGroup[FILENAME], [[38, 2]]);
var root26 = add_locations(template(`<div data-testid="tab-group"><div role="tablist"><!></div> <!></div>`), TabGroup[FILENAME], [[31, 0, [[33, 1]]]]);
function TabGroup($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, TabGroup);
  const classesBase = mutable_state();
  const classesList = mutable_state();
  const classesPanel = mutable_state();
  let justify = prop($$props, "justify", 8, "justify-start");
  let border = prop($$props, "border", 8, "border-b border-surface-400-500-token");
  let active = prop($$props, "active", 8, "border-b-2 border-surface-900-50-token");
  let hover = prop($$props, "hover", 8, "hover:variant-soft");
  let flex = prop($$props, "flex", 8, "flex-none");
  let padding = prop($$props, "padding", 8, "px-4 py-2");
  let rounded = prop($$props, "rounded", 8, "rounded-tl-container-token rounded-tr-container-token");
  let spacing = prop($$props, "spacing", 8, "space-y-1");
  let regionList = prop($$props, "regionList", 8, "");
  let regionPanel = prop($$props, "regionPanel", 8, "");
  let labelledby = prop($$props, "labelledby", 8, "");
  let panel = prop($$props, "panel", 8, "");
  setContext("active", active());
  setContext("hover", hover());
  setContext("flex", flex());
  setContext("padding", padding());
  setContext("rounded", rounded());
  setContext("spacing", spacing());
  const cBase = "space-y-4";
  const cList = "flex overflow-x-auto hide-scrollbar";
  const cPanel = "";
  legacy_pre_effect(() => deep_read_state($$sanitized_props), () => {
    set(classesBase, `${cBase} ${$$sanitized_props.class ?? ""}`);
  });
  legacy_pre_effect(
    () => (deep_read_state(justify()), deep_read_state(border()), deep_read_state(regionList())),
    () => {
      set(classesList, `${cList} ${justify()} ${border()} ${regionList()}`);
    }
  );
  legacy_pre_effect(() => deep_read_state(regionPanel()), () => {
    set(classesPanel, `${cPanel} ${regionPanel()}`);
  });
  legacy_pre_effect_reset();
  init();
  var div = root26();
  var div_1 = child(div);
  var node = child(div_1);
  slot(node, $$props, "default", {}, null);
  reset(div_1);
  var node_1 = sibling(div_1, 2);
  if_block(node_1, () => $$slots.panel, ($$anchor2) => {
    var div_2 = root_119();
    var node_2 = child(div_2);
    slot(node_2, $$props, "panel", {}, null);
    reset(div_2);
    template_effect(() => {
      set_class(div_2, `tab-panel ${get(classesPanel) ?? ""}`);
      set_attribute(div_2, "aria-labelledby", panel());
    });
    append($$anchor2, div_2);
  });
  reset(div);
  template_effect(() => {
    set_class(div, `tab-group ${get(classesBase) ?? ""}`);
    set_class(div_1, `tab-list ${get(classesList) ?? ""}`);
    set_attribute(div_1, "aria-labelledby", labelledby());
  });
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TabGroup = hmr(TabGroup, () => TabGroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TabGroup[HMR].source;
    set(TabGroup[HMR].source, module.default[HMR].original);
  });
}
var TabGroup_default = TabGroup;
mark_module_end(TabGroup);

// node_modules/@skeletonlabs/skeleton/dist/components/Tab/Tab.svelte
mark_module_start();
Tab[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/Tab/Tab.svelte";
var root_120 = add_locations(template(`<div class="tab-lead"><!></div>`), Tab[FILENAME], [[91, 21]]);
var root27 = add_locations(template(`<label><div data-testid="tab" role="tab"><div class="h-0 w-0 overflow-hidden"><input></div> <div><!> <div class="tab-label"><!></div></div></div></label>`), Tab[FILENAME], [
  [
    71,
    0,
    [
      [
        73,
        1,
        [
          [86, 2, [[87, 3]]],
          [90, 2, [[92, 3]]]
        ]
      ]
    ]
  ]
]);
function Tab($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "group",
    "name",
    "value",
    "title",
    "controls",
    "regionTab",
    "active",
    "hover",
    "flex",
    "padding",
    "rounded",
    "spacing"
  ]);
  push($$props, false, Tab);
  const selected = mutable_state();
  const classesActive = mutable_state();
  const classesBase = mutable_state();
  const classesInterface = mutable_state();
  const classesTab = mutable_state();
  const binding_group = [];
  let group = prop($$props, "group", 12);
  let name = prop($$props, "name", 8);
  let value = prop($$props, "value", 8);
  let title = prop($$props, "title", 8, "");
  let controls = prop($$props, "controls", 8, "");
  let regionTab = prop($$props, "regionTab", 8, "");
  let active = prop($$props, "active", 24, () => getContext("active"));
  let hover = prop($$props, "hover", 24, () => getContext("hover"));
  let flex = prop($$props, "flex", 24, () => getContext("flex"));
  let padding = prop($$props, "padding", 24, () => getContext("padding"));
  let rounded = prop($$props, "rounded", 24, () => getContext("rounded"));
  let spacing = prop($$props, "spacing", 24, () => getContext("spacing"));
  const cBase = "text-center cursor-pointer transition-colors duration-100";
  const cInterface = "";
  let elemInput = mutable_state();
  function onKeyDown(event2) {
    if (["Enter", "Space"].includes(event2.code)) {
      event2.preventDefault();
      get(elemInput).click();
    } else if (strict_equals(event2.code, "ArrowRight")) {
      const tabList = get(elemInput).closest(".tab-list");
      if (!tabList) return;
      const tabs = Array.from(tabList.querySelectorAll(".tab"));
      const currTab = get(elemInput).closest(".tab");
      if (!currTab) return;
      const currIndex = tabs.indexOf(currTab);
      const nextIndex = currIndex + 1 >= tabs.length ? 0 : currIndex + 1;
      const nextTab = tabs[nextIndex];
      const nextTabInput = nextTab == null ? void 0 : nextTab.querySelector("input");
      if (nextTab && nextTabInput) {
        nextTabInput.click();
        nextTab.focus();
      }
    } else if (strict_equals(event2.code, "ArrowLeft")) {
      const tabList = get(elemInput).closest(".tab-list");
      if (!tabList) return;
      const tabs = Array.from(tabList.querySelectorAll(".tab"));
      const currTab = get(elemInput).closest(".tab");
      if (!currTab) return;
      const currIndex = tabs.indexOf(currTab);
      const nextIndex = currIndex - 1 < 0 ? tabs.length - 1 : currIndex - 1;
      const nextTab = tabs[nextIndex];
      const nextTabInput = nextTab == null ? void 0 : nextTab.querySelector("input");
      if (nextTab && nextTabInput) {
        nextTabInput.click();
        nextTab.focus();
      }
    }
  }
  function prunedRestProps() {
    delete $$restProps.class;
    return $$restProps;
  }
  legacy_pre_effect(
    () => (deep_read_state(value()), deep_read_state(group())),
    () => {
      set(selected, strict_equals(value(), group()));
    }
  );
  legacy_pre_effect(
    () => (get(selected), deep_read_state(active()), deep_read_state(hover())),
    () => {
      set(classesActive, get(selected) ? active() : hover());
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(flex()), deep_read_state(padding()), deep_read_state(rounded()), get(classesActive), deep_read_state($$sanitized_props)),
    () => {
      set(classesBase, `${cBase} ${flex()} ${padding()} ${rounded()} ${get(classesActive)} ${$$sanitized_props.class ?? ""}`);
    }
  );
  legacy_pre_effect(() => deep_read_state(spacing()), () => {
    set(classesInterface, `${cInterface} ${spacing()}`);
  });
  legacy_pre_effect(() => deep_read_state(regionTab()), () => {
    set(classesTab, `${regionTab()}`);
  });
  legacy_pre_effect_reset();
  init();
  var label = root27();
  var div = child(label);
  var div_1 = child(div);
  var input = child(div_1);
  remove_input_defaults(input);
  const spread_with_call = derived_safe_equal(prunedRestProps);
  let attributes;
  bind_this(input, ($$value) => set(elemInput, $$value), () => get(elemInput));
  reset(div_1);
  var div_2 = sibling(div_1, 2);
  var node = child(div_2);
  if_block(node, () => $$slots.lead, ($$anchor2) => {
    var div_3 = root_120();
    var node_1 = child(div_3);
    slot(node_1, $$props, "lead", {}, null);
    reset(div_3);
    append($$anchor2, div_3);
  });
  var div_4 = sibling(node, 2);
  var node_2 = child(div_4);
  slot(node_2, $$props, "default", {}, null);
  reset(div_4);
  reset(div_2);
  reset(div);
  reset(label);
  template_effect(() => {
    set_class(label, get(classesBase));
    set_attribute(label, "title", title());
    set_class(div, `tab ${get(classesTab) ?? ""}`);
    set_attribute(div, "aria-controls", controls());
    set_attribute(div, "aria-selected", get(selected));
    set_attribute(div, "tabindex", get(selected) ? 0 : -1);
    attributes = set_attributes(input, attributes, {
      type: "radio",
      name: name(),
      value: value(),
      ...get(spread_with_call),
      tabindex: "-1"
    });
    set_class(div_2, `tab-interface ${get(classesInterface) ?? ""}`);
  });
  bind_group(
    binding_group,
    [],
    input,
    () => {
      value();
      return group();
    },
    group
  );
  event("click", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("change", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keydown", div, onKeyDown);
  event("keydown", div, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keyup", div, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keypress", div, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, label);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tab = hmr(Tab, () => Tab[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tab[HMR].source;
    set(Tab[HMR].source, module.default[HMR].original);
  });
}
var Tab_default = Tab;
mark_module_end(Tab);

// node_modules/@skeletonlabs/skeleton/dist/components/Tab/TabAnchor.svelte
mark_module_start();
TabAnchor[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/Tab/TabAnchor.svelte";
var root_121 = add_locations(template(`<div class="tab-lead"><!></div>`), TabAnchor[FILENAME], [[42, 20]]);
var root28 = add_locations(template(`<a><div><!> <div class="tab-label"><!></div></div></a>`), TabAnchor[FILENAME], [
  [
    24,
    0,
    [[41, 1, [[43, 2]]]]
  ]
]);
function TabAnchor($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "selected",
    "controls",
    "active",
    "hover",
    "flex",
    "padding",
    "rounded",
    "spacing"
  ]);
  push($$props, false, TabAnchor);
  const classesActive = mutable_state();
  const classesBase = mutable_state();
  const classesInterface = mutable_state();
  let selected = prop($$props, "selected", 8, false);
  let controls = prop($$props, "controls", 8, "");
  let active = prop($$props, "active", 24, () => getContext("active"));
  let hover = prop($$props, "hover", 24, () => getContext("hover"));
  let flex = prop($$props, "flex", 24, () => getContext("flex"));
  let padding = prop($$props, "padding", 24, () => getContext("padding"));
  let rounded = prop($$props, "rounded", 24, () => getContext("rounded"));
  let spacing = prop($$props, "spacing", 24, () => getContext("spacing"));
  const cBase = "text-center cursor-pointer transition-colors duration-100";
  const cInterface = "";
  function prunedRestProps() {
    delete $$restProps.class;
    return $$restProps;
  }
  legacy_pre_effect(
    () => (deep_read_state(selected()), deep_read_state(active()), deep_read_state(hover())),
    () => {
      set(classesActive, selected() ? active() : hover());
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(flex()), deep_read_state(padding()), deep_read_state(rounded()), get(classesActive), deep_read_state($$sanitized_props)),
    () => {
      set(classesBase, `${cBase} ${flex()} ${padding()} ${rounded()} ${get(classesActive)} ${$$sanitized_props.class ?? ""}`);
    }
  );
  legacy_pre_effect(() => deep_read_state(spacing()), () => {
    set(classesInterface, `${cInterface} ${spacing()}`);
  });
  legacy_pre_effect_reset();
  init();
  var a = root28();
  const spread_with_call = derived_safe_equal(prunedRestProps);
  let attributes;
  var div = child(a);
  var node = child(div);
  if_block(node, () => $$slots.lead, ($$anchor2) => {
    var div_1 = root_121();
    var node_1 = child(div_1);
    slot(node_1, $$props, "lead", {}, null);
    reset(div_1);
    append($$anchor2, div_1);
  });
  var div_2 = sibling(node, 2);
  var node_2 = child(div_2);
  slot(node_2, $$props, "default", {}, null);
  reset(div_2);
  reset(div);
  reset(a);
  template_effect(() => {
    attributes = set_attributes(a, attributes, {
      class: `tab-anchor ${get(classesBase) ?? ""}`,
      href: $$sanitized_props.href,
      ...get(spread_with_call),
      "aria-controls": controls(),
      role: "button",
      "data-testid": "tab-anchor"
    });
    set_class(div, `tab-interface ${get(classesInterface) ?? ""}`);
  });
  event("click", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keydown", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keyup", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keypress", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseover", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseleave", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("focus", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("blur", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, a);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TabAnchor = hmr(TabAnchor, () => TabAnchor[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TabAnchor[HMR].source;
    set(TabAnchor[HMR].source, module.default[HMR].original);
  });
}
var TabAnchor_default = TabAnchor;
mark_module_end(TabAnchor);

// node_modules/@skeletonlabs/skeleton/dist/components/TreeView/TreeView.svelte
mark_module_start();
TreeView[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/TreeView/TreeView.svelte";
var root29 = add_locations(template(`<div data-testid="tree" role="tree"><!></div>`), TreeView[FILENAME], [[58, 0]]);
function TreeView($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, TreeView);
  const classesBase = mutable_state();
  let selection = prop($$props, "selection", 8, false);
  let multiple = prop($$props, "multiple", 8, false);
  let width = prop($$props, "width", 8, "w-full");
  let spacing = prop($$props, "spacing", 8, "space-y-1");
  let open = prop($$props, "open", 8, false);
  let disabled = prop($$props, "disabled", 8, false);
  let padding = prop($$props, "padding", 8, "py-4 px-4");
  let indent = prop($$props, "indent", 8, "ml-4");
  let hover = prop($$props, "hover", 8, "hover:variant-soft");
  let rounded = prop($$props, "rounded", 8, "rounded-container-token");
  let caretOpen = prop($$props, "caretOpen", 8, "rotate-180");
  let caretClosed = prop($$props, "caretClosed", 8, "");
  let hyphenOpacity = prop($$props, "hyphenOpacity", 8, "opacity-10");
  let regionSummary = prop($$props, "regionSummary", 8, "");
  let regionSymbol = prop($$props, "regionSymbol", 8, "");
  let regionChildren = prop($$props, "regionChildren", 8, "");
  let labelledby = prop($$props, "labelledby", 8, "");
  function expandAll() {
    const detailsElements = get(tree).querySelectorAll("details.tree-item");
    detailsElements.forEach((details) => {
      if (!details.open) {
        const summary = details.querySelector("summary.tree-item-summary");
        if (summary) summary.click();
      }
    });
  }
  function collapseAll() {
    const detailsElements = get(tree).querySelectorAll("details.tree-item");
    detailsElements.forEach((details) => {
      if (details.open) {
        const summary = details.querySelector("summary.tree-item-summary");
        if (summary) summary.click();
      }
    });
  }
  setContext("open", open());
  setContext("selection", selection());
  setContext("multiple", multiple());
  setContext("disabled", disabled());
  setContext("padding", padding());
  setContext("indent", indent());
  setContext("hover", hover());
  setContext("rounded", rounded());
  setContext("caretOpen", caretOpen());
  setContext("caretClosed", caretClosed());
  setContext("hyphenOpacity", hyphenOpacity());
  setContext("regionSummary", regionSummary());
  setContext("regionSymbol", regionSymbol());
  setContext("regionChildren", regionChildren());
  let tree = mutable_state();
  legacy_pre_effect(
    () => (deep_read_state(width()), deep_read_state(spacing()), deep_read_state($$sanitized_props)),
    () => {
      set(classesBase, `${width()} ${spacing()} ${$$sanitized_props.class ?? ""}`);
    }
  );
  legacy_pre_effect_reset();
  init();
  var div = root29();
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  bind_this(div, ($$value) => set(tree, $$value), () => get(tree));
  template_effect(() => {
    set_class(div, `tree ${get(classesBase) ?? ""}`);
    set_attribute(div, "aria-multiselectable", multiple());
    set_attribute(div, "aria-label", labelledby());
    set_attribute(div, "aria-disabled", disabled());
  });
  append($$anchor, div);
  bind_prop($$props, "expandAll", expandAll);
  bind_prop($$props, "collapseAll", collapseAll);
  return pop({
    get expandAll() {
      return expandAll;
    },
    get collapseAll() {
      return collapseAll;
    },
    ...legacy_api()
  });
}
if (import.meta.hot) {
  TreeView = hmr(TreeView, () => TreeView[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TreeView[HMR].source;
    set(TreeView[HMR].source, module.default[HMR].original);
  });
}
var TreeView_default = TreeView;
mark_module_end(TreeView);

// node_modules/@skeletonlabs/skeleton/dist/components/TreeView/TreeViewItem.svelte
mark_module_start();
TreeViewItem[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/TreeView/TreeViewItem.svelte";
var root_122 = add_locations(template(`<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z"></path></svg>`), TreeViewItem[FILENAME], [[276, 4, [[277, 5]]]]);
var root_213 = add_locations(template(`<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M432 256c0 17.7-14.3 32-32 32L48 288c-17.7 0-32-14.3-32-32s14.3-32 32-32l352 0c17.7 0 32 14.3 32 32z"></path></svg>`), TreeViewItem[FILENAME], [[282, 4, [[283, 5]]]]);
var root_47 = add_locations(template(`<input class="checkbox tree-item-checkbox" type="checkbox">`), TreeViewItem[FILENAME], [[291, 4]]);
var root_55 = add_locations(template(`<input class="radio tree-item-radio" type="radio">`), TreeViewItem[FILENAME], [[301, 4]]);
var root_62 = add_locations(template(`<div class="tree-item-lead"><!></div>`), TreeViewItem[FILENAME], [[307, 3]]);
var root30 = add_locations(template(`<details data-testid="tree-item"><summary role="treeitem"><div><!></div> <!> <!> <div class="tree-item-content"><!></div></summary> <div role="group"><!></div></details>`), TreeViewItem[FILENAME], [
  [
    260,
    0,
    [
      [261, 1, [[273, 2], [312, 2]]],
      [316, 1]
    ]
  ]
]);
function TreeViewItem($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, TreeViewItem);
  const classesCaretState = mutable_state();
  const classesDisabled = mutable_state();
  const classesBase = mutable_state();
  const classesSummary = mutable_state();
  const classesSymbol = mutable_state();
  const classesCaret = mutable_state();
  const classesHyphen = mutable_state();
  const classesChildren = mutable_state();
  const binding_group = [];
  let group = prop($$props, "group", 28, () => void 0);
  let name = prop($$props, "name", 28, () => void 0);
  let value = prop($$props, "value", 28, () => void 0);
  let checked = prop($$props, "checked", 12, false);
  let children = prop($$props, "children", 28, () => []);
  let spacing = prop($$props, "spacing", 12, "space-x-4");
  let open = prop($$props, "open", 28, () => getContext("open"));
  let selection = prop($$props, "selection", 28, () => getContext("selection"));
  let multiple = prop($$props, "multiple", 28, () => getContext("multiple"));
  let disabled = prop($$props, "disabled", 28, () => getContext("disabled"));
  let indeterminate = prop($$props, "indeterminate", 12, false);
  let padding = prop($$props, "padding", 28, () => getContext("padding"));
  let indent = prop($$props, "indent", 28, () => getContext("indent"));
  let hover = prop($$props, "hover", 28, () => getContext("hover"));
  let rounded = prop($$props, "rounded", 28, () => getContext("rounded"));
  let caretOpen = prop($$props, "caretOpen", 28, () => getContext("caretOpen"));
  let caretClosed = prop($$props, "caretClosed", 28, () => getContext("caretClosed"));
  let hyphenOpacity = prop($$props, "hyphenOpacity", 28, () => getContext("hyphenOpacity"));
  let regionSummary = prop($$props, "regionSummary", 28, () => getContext("regionSummary"));
  let regionSymbol = prop($$props, "regionSymbol", 28, () => getContext("regionSymbol"));
  let regionChildren = prop($$props, "regionChildren", 28, () => getContext("regionChildren"));
  let hideLead = prop($$props, "hideLead", 12, false);
  let hideChildren = prop($$props, "hideChildren", 12, false);
  let treeItem = mutable_state();
  let childrenDiv = mutable_state();
  function onSummaryClick(event2) {
    if (disabled()) event2.preventDefault();
  }
  function updateCheckbox(group2, indeterminate2) {
    if (!Array.isArray(group2)) return;
    checked(group2.indexOf(value()) >= 0);
    dispatch("groupChange", {
      checked: checked(),
      indeterminate: indeterminate2
    });
    dispatch("childChange");
  }
  function updateGroup(checked2, indeterminate2) {
    if (!Array.isArray(group())) return;
    const index2 = group().indexOf(value());
    if (checked2) {
      if (index2 < 0) {
        group().push(value());
        group(group());
      }
    } else {
      if (index2 >= 0) {
        group().splice(index2, 1);
        group(group());
      }
    }
    if (!indeterminate2) {
      onParentChange();
    }
  }
  function updateRadio(group2) {
    checked(strict_equals(group2, value()));
    dispatch("groupChange", { checked: checked(), indeterminate: false });
    if (group2) dispatch("childChange");
  }
  function updateRadioGroup(checked2) {
    if (checked2 && strict_equals(group(), value(), false)) group(value());
    else if (!checked2 && strict_equals(group(), value())) group("");
  }
  function onChildValueChange() {
    if (multiple()) {
      if (!Array.isArray(group())) return;
      const childrenValues = children().map((c) => c.value);
      const childrenGroup = children()[0].group;
      const index2 = group().indexOf(value());
      if (children().some((c) => c.indeterminate)) {
        indeterminate(true);
        if (index2 >= 0) {
          group().splice(index2, 1);
          group(group());
        }
      } else if (childrenValues.every((c) => Array.isArray(childrenGroup) && childrenGroup.includes(c))) {
        indeterminate(false);
        if (index2 < 0) {
          group().push(value());
          group(group());
        }
      } else if (childrenValues.some((c) => Array.isArray(childrenGroup) && childrenGroup.includes(c))) {
        indeterminate(true);
        if (index2 >= 0) {
          group().splice(index2, 1);
          group(group());
        }
      } else {
        indeterminate(false);
        if (index2 >= 0) {
          group().splice(index2, 1);
          group(group());
        }
      }
    } else {
      if (strict_equals(group(), value(), false) && children().some((c) => c.checked)) {
        group(value());
      } else if (strict_equals(group(), value()) && !children().some((c) => c.checked)) {
        group("");
      }
    }
    dispatch("childChange");
  }
  function onParentChange() {
    if (!multiple() || !children() || strict_equals(children().length, 0)) return;
    if (!Array.isArray(group())) return;
    const index2 = group().indexOf(value());
    const checkChild = (child2) => {
      if (!child2 || !Array.isArray(child2.group)) return;
      child2.indeterminate = false;
      if (child2.group.indexOf(child2.value) < 0) {
        child2.group.push(child2.value);
        child2.group = child2.group;
      }
    };
    const uncheckChild = (child2) => {
      if (!child2 || !Array.isArray(child2.group)) return;
      child2.indeterminate = false;
      const childIndex = child2.group.indexOf(child2.value);
      if (childIndex >= 0) {
        child2.group.splice(childIndex, 1);
        child2.group = child2.group;
      }
    };
    children().forEach((child2) => {
      if (!child2) return;
      index2 >= 0 ? checkChild(child2) : uncheckChild(child2);
      child2.onParentChange();
    });
  }
  const dispatch = createEventDispatcher();
  function onKeyDown(event2) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i;
    function getRootTree() {
      let currentElement = get(treeItem);
      while (strict_equals(currentElement, null, false)) {
        if (currentElement.classList.contains("tree")) return currentElement;
        currentElement = currentElement.parentElement;
      }
      return void 0;
    }
    let rootTree = void 0;
    let lastVisibleElement = null;
    switch (event2.code) {
      case "ArrowRight":
        if (!open()) open(true);
        else if ($$slots.children && !hideChildren()) {
          const child2 = get(childrenDiv).querySelector("details>summary");
          if (child2) child2.focus();
        }
        break;
      case "ArrowLeft":
        if (open()) open(false);
        else {
          const parent = (_a = get(treeItem).parentElement) == null ? void 0 : _a.parentElement;
          if (parent && strict_equals(parent.tagName, "DETAILS")) (_b = parent.querySelector("summary")) == null ? void 0 : _b.focus();
        }
        break;
      case "Home":
        event2.preventDefault();
        rootTree = getRootTree();
        if (rootTree) (_c = rootTree == null ? void 0 : rootTree.querySelector("summary")) == null ? void 0 : _c.focus();
        break;
      case "End":
        event2.preventDefault();
        rootTree = getRootTree();
        if (rootTree) {
          const detailsElements = rootTree == null ? void 0 : rootTree.querySelectorAll("details");
          if (!detailsElements) return;
          for (let i = detailsElements.length - 1; i >= 0; (i -= 1) + 1) {
            const details = detailsElements[i];
            if (((_e = (_d = details.parentElement) == null ? void 0 : _d.classList) == null ? void 0 : _e.contains("tree")) || strict_equals((_g = (_f = details.parentElement) == null ? void 0 : _f.parentElement) == null ? void 0 : _g.getAttribute("open"), null, false)) {
              lastVisibleElement = details;
              break;
            } else if (strict_equals((_i = (_h = details.parentElement) == null ? void 0 : _h.parentElement) == null ? void 0 : _i.tagName, "details", false)) {
              lastVisibleElement = details.parentElement.parentElement;
              break;
            }
          }
          if (lastVisibleElement) {
            const summary = lastVisibleElement.querySelector("summary");
            if (summary) summary.focus();
          }
        }
        break;
    }
  }
  const cBase = "";
  const cSummary = "list-none [&::-webkit-details-marker]:hidden flex items-center cursor-pointer";
  const cSymbol = "fill-current w-3 text-center transition-transform duration-[200ms]";
  const cChildren = "";
  const cDisabled = "opacity-50 !cursor-not-allowed";
  legacy_pre_effect(
    () => (deep_read_state(multiple()), deep_read_state(group()), deep_read_state(indeterminate())),
    () => {
      if (multiple()) updateCheckbox(group(), indeterminate());
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(multiple()), deep_read_state(checked()), deep_read_state(indeterminate())),
    () => {
      if (multiple()) updateGroup(checked(), indeterminate());
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(multiple()), deep_read_state(group())),
    () => {
      if (!multiple()) updateRadio(group());
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(multiple()), deep_read_state(checked())),
    () => {
      if (!multiple()) updateRadioGroup(checked());
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(multiple()), deep_read_state(group()), deep_read_state(value()), deep_read_state(children())),
    () => {
      if (!multiple() && strict_equals(group(), void 0, false)) {
        if (strict_equals(group(), value(), false)) {
          children().forEach((child2) => {
            if (child2) child2.group = "";
          });
        }
      }
    }
  );
  legacy_pre_effect(() => deep_read_state(open()), () => {
    dispatch("toggle", { open: open() });
  });
  legacy_pre_effect(() => deep_read_state(children()), () => {
    children().forEach((child2) => {
      if (child2) child2.$on("childChange", onChildValueChange);
    });
  });
  legacy_pre_effect(
    () => (deep_read_state(open()), deep_read_state(hideChildren()), deep_read_state(caretOpen()), deep_read_state(caretClosed())),
    () => {
      set(classesCaretState, open() && $$slots.children && !hideChildren() ? caretOpen() : caretClosed());
    }
  );
  legacy_pre_effect(() => deep_read_state(disabled()), () => {
    set(classesDisabled, disabled() ? cDisabled : "");
  });
  legacy_pre_effect(() => deep_read_state($$sanitized_props), () => {
    set(classesBase, `${cBase} ${$$sanitized_props.class ?? ""}`);
  });
  legacy_pre_effect(
    () => (get(classesDisabled), deep_read_state(spacing()), deep_read_state(rounded()), deep_read_state(padding()), deep_read_state(hover()), deep_read_state(regionSummary())),
    () => {
      set(classesSummary, `${cSummary} ${get(classesDisabled)} ${spacing()} ${rounded()} ${padding()} ${hover()} ${regionSummary()}`);
    }
  );
  legacy_pre_effect(() => get(classesCaretState), () => {
    set(classesCaret, `${get(classesCaretState)}`);
  });
  legacy_pre_effect(
    () => (get(classesCaret), deep_read_state(regionSymbol())),
    () => {
      set(classesSymbol, `${cSymbol} ${get(classesCaret)} ${regionSymbol()}`);
    }
  );
  legacy_pre_effect(() => deep_read_state(hyphenOpacity()), () => {
    set(classesHyphen, `${hyphenOpacity()}`);
  });
  legacy_pre_effect(
    () => (deep_read_state(indent()), deep_read_state(regionChildren())),
    () => {
      set(classesChildren, `${cChildren} ${indent()} ${regionChildren()}`);
    }
  );
  legacy_pre_effect_reset();
  init();
  var details_1 = root30();
  var summary_1 = child(details_1);
  var div = child(summary_1);
  var node = child(div);
  if_block(
    node,
    () => $$slots.children && !hideChildren(),
    ($$anchor2) => {
      var svg = root_122();
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_213();
      template_effect(() => set_svg_class(svg_1, `w-3 ${get(classesHyphen) ?? ""}`));
      append($$anchor2, svg_1);
    }
  );
  reset(div);
  var node_1 = sibling(div, 2);
  if_block(node_1, () => selection() && name() && strict_equals(group(), void 0, false), ($$anchor2) => {
    var fragment = comment();
    var node_2 = first_child(fragment);
    if_block(
      node_2,
      multiple,
      ($$anchor3) => {
        var input = root_47();
        remove_input_defaults(input);
        var input_value;
        template_effect(() => {
          set_attribute(input, "name", name());
          if (input_value !== (input_value = value())) {
            input.value = null == (input.__value = value()) ? "" : value();
          }
        });
        bind_checked(input, checked);
        bind_property("indeterminate", "change", input, indeterminate, indeterminate);
        event("change", input, onParentChange);
        append($$anchor3, input);
      },
      ($$anchor3) => {
        var input_1 = root_55();
        remove_input_defaults(input_1);
        var input_1_value;
        template_effect(() => {
          set_attribute(input_1, "name", name());
          if (input_1_value !== (input_1_value = value())) {
            input_1.value = null == (input_1.__value = value()) ? "" : value();
          }
        });
        bind_group(
          binding_group,
          [],
          input_1,
          () => {
            value();
            return group();
          },
          group
        );
        append($$anchor3, input_1);
      }
    );
    append($$anchor2, fragment);
  });
  var node_3 = sibling(node_1, 2);
  if_block(node_3, () => $$slots.lead && !hideLead(), ($$anchor2) => {
    var div_1 = root_62();
    var node_4 = child(div_1);
    slot(node_4, $$props, "lead", {}, null);
    reset(div_1);
    append($$anchor2, div_1);
  });
  var div_2 = sibling(node_3, 2);
  var node_5 = child(div_2);
  slot(node_5, $$props, "default", {}, null);
  reset(div_2);
  reset(summary_1);
  var div_3 = sibling(summary_1, 2);
  var node_6 = child(div_3);
  slot(node_6, $$props, "children", {}, null);
  reset(div_3);
  bind_this(div_3, ($$value) => set(childrenDiv, $$value), () => get(childrenDiv));
  reset(details_1);
  bind_this(details_1, ($$value) => set(treeItem, $$value), () => get(treeItem));
  template_effect(() => {
    set_class(details_1, `tree-item ${get(classesBase) ?? ""}`);
    set_attribute(details_1, "aria-disabled", disabled());
    set_class(summary_1, `tree-item-summary ${get(classesSummary) ?? ""}`);
    set_attribute(summary_1, "aria-selected", selection() ? checked() : void 0);
    set_attribute(summary_1, "aria-expanded", $$slots.children ? open() : void 0);
    set_class(div, `tree-summary-symbol ${get(classesSymbol) ?? ""}`);
    set_class(div_3, `tree-item-children ${get(classesChildren) ?? ""}`);
  });
  event("click", summary_1, onSummaryClick);
  event("click", summary_1, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keydown", summary_1, onKeyDown);
  event("keydown", summary_1, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keyup", summary_1, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  bind_property("open", "toggle", details_1, open, open);
  append($$anchor, details_1);
  bind_prop($$props, "onParentChange", onParentChange);
  return pop({
    get onParentChange() {
      return onParentChange;
    },
    get group() {
      return group();
    },
    set group($$value) {
      group($$value);
      flush_sync();
    },
    get name() {
      return name();
    },
    set name($$value) {
      name($$value);
      flush_sync();
    },
    get value() {
      return value();
    },
    set value($$value) {
      value($$value);
      flush_sync();
    },
    get checked() {
      return checked();
    },
    set checked($$value) {
      checked($$value);
      flush_sync();
    },
    get children() {
      return children();
    },
    set children($$value) {
      children($$value);
      flush_sync();
    },
    get spacing() {
      return spacing();
    },
    set spacing($$value) {
      spacing($$value);
      flush_sync();
    },
    get open() {
      return open();
    },
    set open($$value) {
      open($$value);
      flush_sync();
    },
    get selection() {
      return selection();
    },
    set selection($$value) {
      selection($$value);
      flush_sync();
    },
    get multiple() {
      return multiple();
    },
    set multiple($$value) {
      multiple($$value);
      flush_sync();
    },
    get disabled() {
      return disabled();
    },
    set disabled($$value) {
      disabled($$value);
      flush_sync();
    },
    get indeterminate() {
      return indeterminate();
    },
    set indeterminate($$value) {
      indeterminate($$value);
      flush_sync();
    },
    get padding() {
      return padding();
    },
    set padding($$value) {
      padding($$value);
      flush_sync();
    },
    get indent() {
      return indent();
    },
    set indent($$value) {
      indent($$value);
      flush_sync();
    },
    get hover() {
      return hover();
    },
    set hover($$value) {
      hover($$value);
      flush_sync();
    },
    get rounded() {
      return rounded();
    },
    set rounded($$value) {
      rounded($$value);
      flush_sync();
    },
    get caretOpen() {
      return caretOpen();
    },
    set caretOpen($$value) {
      caretOpen($$value);
      flush_sync();
    },
    get caretClosed() {
      return caretClosed();
    },
    set caretClosed($$value) {
      caretClosed($$value);
      flush_sync();
    },
    get hyphenOpacity() {
      return hyphenOpacity();
    },
    set hyphenOpacity($$value) {
      hyphenOpacity($$value);
      flush_sync();
    },
    get regionSummary() {
      return regionSummary();
    },
    set regionSummary($$value) {
      regionSummary($$value);
      flush_sync();
    },
    get regionSymbol() {
      return regionSymbol();
    },
    set regionSymbol($$value) {
      regionSymbol($$value);
      flush_sync();
    },
    get regionChildren() {
      return regionChildren();
    },
    set regionChildren($$value) {
      regionChildren($$value);
      flush_sync();
    },
    get hideLead() {
      return hideLead();
    },
    set hideLead($$value) {
      hideLead($$value);
      flush_sync();
    },
    get hideChildren() {
      return hideChildren();
    },
    set hideChildren($$value) {
      hideChildren($$value);
      flush_sync();
    },
    ...legacy_api()
  });
}
if (import.meta.hot) {
  TreeViewItem = hmr(TreeViewItem, () => TreeViewItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TreeViewItem[HMR].source;
    set(TreeViewItem[HMR].source, module.default[HMR].original);
  });
}
var TreeViewItem_default = TreeViewItem;
mark_module_end(TreeViewItem);

// node_modules/@skeletonlabs/skeleton/dist/components/TreeView/RecursiveTreeViewItem.svelte
mark_module_start();
RecursiveTreeViewItem_1[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/TreeView/RecursiveTreeViewItem.svelte";
function RecursiveTreeViewItem_1($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, RecursiveTreeViewItem_1);
  const binding_group = [];
  let nodes = prop($$props, "nodes", 24, () => []);
  let expandedNodes = prop($$props, "expandedNodes", 28, () => []);
  let disabledNodes = prop($$props, "disabledNodes", 28, () => []);
  let checkedNodes = prop($$props, "checkedNodes", 28, () => []);
  let indeterminateNodes = prop($$props, "indeterminateNodes", 28, () => []);
  let selection = getContext("selection");
  let multiple = getContext("multiple");
  let relational = getContext("relational");
  let group = mutable_state(multiple ? [] : "");
  let name = mutable_state("");
  const dispatch = createEventDispatcher();
  function toggleNode(node, open) {
    var _a;
    if (!((_a = node.children) == null ? void 0 : _a.length)) return;
    if (open) {
      if (!expandedNodes().includes(node.id)) {
        expandedNodes().push(node.id);
        expandedNodes(expandedNodes());
      }
    } else {
      if (expandedNodes().includes(node.id)) {
        expandedNodes().splice(expandedNodes().indexOf(node.id), 1);
        expandedNodes(expandedNodes());
      }
    }
  }
  function checkNode(node, checked, indeterminate) {
    if (checked) {
      if (!checkedNodes().includes(node.id)) {
        checkedNodes().push(node.id);
        checkedNodes(checkedNodes());
      }
      if (!indeterminate && indeterminateNodes().includes(node.id)) {
        indeterminateNodes().splice(indeterminateNodes().indexOf(node.id), 1);
        indeterminateNodes(indeterminateNodes());
      }
    } else {
      if (checkedNodes().includes(node.id)) {
        checkedNodes().splice(checkedNodes().indexOf(node.id), 1);
        checkedNodes(checkedNodes());
      }
      if (indeterminate && !indeterminateNodes().includes(node.id)) {
        indeterminateNodes().push(node.id);
        indeterminateNodes(indeterminateNodes());
      } else if (!indeterminate && indeterminateNodes().includes(node.id)) {
        indeterminateNodes().splice(indeterminateNodes().indexOf(node.id), 1);
        indeterminateNodes(indeterminateNodes());
      }
    }
  }
  if (selection) {
    if (multiple) {
      nodes().forEach((node) => {
        if (!Array.isArray(get(group))) return;
        if (checkedNodes().includes(node.id) && !get(group).includes(node.id)) {
          get(group).push(node.id);
        }
      });
      set(group, get(group));
    } else {
      nodes().forEach((node) => {
        if (checkedNodes().includes(node.id) && strict_equals(get(group), node.id, false)) {
          set(group, node.id);
        }
      });
    }
  }
  onMount(async () => {
    if (selection) {
      set(name, String(Math.random()));
      if (!relational) treeItems([]);
    }
  });
  let treeItems = prop($$props, "treeItems", 28, () => []);
  let children = mutable_state([]);
  init();
  var fragment = comment();
  var node_1 = first_child(fragment);
  if_block(node_1, () => nodes() && nodes().length > 0, ($$anchor2) => {
    var fragment_1 = comment();
    var node_2 = first_child(fragment_1);
    each(node_2, 1, nodes, index, ($$anchor3, node, i) => {
      var fragment_2 = comment();
      var node_3 = first_child(fragment_2);
      var hideLead = derived_safe_equal(() => !get(node).lead);
      var hideChildren = derived_safe_equal(() => !get(node).children || strict_equals(get(node).children.length, 0));
      var open_1 = derived_safe_equal(() => expandedNodes().includes(get(node).id));
      var disabled = derived_safe_equal(() => disabledNodes().includes(get(node).id));
      var checked_1 = derived_safe_equal(() => checkedNodes().includes(get(node).id));
      var indeterminate_1 = derived_safe_equal(() => indeterminateNodes().includes(get(node).id));
      {
        add_owner_effect(() => get(children)[i], TreeViewItem_default);
        add_owner_effect(() => get(group), TreeViewItem_default);
        add_owner_effect(() => get(name), TreeViewItem_default);
        add_owner_effect(() => get(node).id, TreeViewItem_default);
        bind_this(
          TreeViewItem_default(node_3, {
            get children() {
              return get(children)[i];
            },
            set children($$value) {
              mutate(children, get(children)[i] = $$value);
            },
            get group() {
              return get(group);
            },
            set group($$value) {
              set(group, $$value);
            },
            get name() {
              return get(name);
            },
            set name($$value) {
              set(name, $$value);
            },
            get value() {
              return get(node).id;
            },
            set value($$value) {
              get(node).id = $$value, invalidate_inner_signals(() => nodes());
            },
            get hideLead() {
              return get(hideLead);
            },
            get hideChildren() {
              return get(hideChildren);
            },
            get open() {
              return get(open_1);
            },
            get disabled() {
              return get(disabled);
            },
            get checked() {
              return get(checked_1);
            },
            get indeterminate() {
              return get(indeterminate_1);
            },
            $$events: {
              toggle: [
                (e) => toggleNode(get(node), e.detail.open),
                () => {
                  dispatch("toggle", { id: get(node).id });
                }
              ],
              groupChange: (e) => checkNode(get(node), e.detail.checked, e.detail.indeterminate),
              click: () => dispatch("click", { id: get(node).id })
            },
            children: wrap_snippet(RecursiveTreeViewItem_1, ($$anchor4, $$slotProps) => {
              var fragment_3 = comment();
              var node_4 = first_child(fragment_3);
              if_block(
                node_4,
                () => strict_equals(typeof get(node).content, "string"),
                ($$anchor5) => {
                  var fragment_4 = comment();
                  var node_5 = first_child(fragment_4);
                  html(node_5, () => get(node).content, false, false);
                  append($$anchor5, fragment_4);
                },
                ($$anchor5) => {
                  var fragment_5 = comment();
                  var node_6 = first_child(fragment_5);
                  component(node_6, () => get(node).content, ($$anchor6, $$component) => {
                    $$component($$anchor6, spread_props(() => get(node).contentProps));
                  });
                  append($$anchor5, fragment_5);
                }
              );
              append($$anchor4, fragment_3);
            }),
            $$slots: {
              default: true,
              lead: ($$anchor4, $$slotProps) => {
                var fragment_6 = comment();
                var node_7 = first_child(fragment_6);
                if_block(
                  node_7,
                  () => strict_equals(typeof get(node).lead, "string"),
                  ($$anchor5) => {
                    var fragment_7 = comment();
                    var node_8 = first_child(fragment_7);
                    html(node_8, () => get(node).lead, false, false);
                    append($$anchor5, fragment_7);
                  },
                  ($$anchor5) => {
                    var fragment_8 = comment();
                    var node_9 = first_child(fragment_8);
                    component(node_9, () => get(node).lead, ($$anchor6, $$component) => {
                      $$component($$anchor6, spread_props(() => get(node).leadProps));
                    });
                    append($$anchor5, fragment_8);
                  }
                );
                append($$anchor4, fragment_6);
              },
              children: ($$anchor4, $$slotProps) => {
                var fragment_9 = comment();
                var node_10 = first_child(fragment_9);
                {
                  add_owner_effect(expandedNodes, RecursiveTreeViewItem_default);
                  add_owner_effect(disabledNodes, RecursiveTreeViewItem_default);
                  add_owner_effect(checkedNodes, RecursiveTreeViewItem_default);
                  add_owner_effect(indeterminateNodes, RecursiveTreeViewItem_default);
                  add_owner_effect(() => get(children)[i], RecursiveTreeViewItem_default);
                  RecursiveTreeViewItem_default(node_10, {
                    get nodes() {
                      return get(node).children;
                    },
                    get expandedNodes() {
                      return expandedNodes();
                    },
                    set expandedNodes($$value) {
                      expandedNodes($$value);
                    },
                    get disabledNodes() {
                      return disabledNodes();
                    },
                    set disabledNodes($$value) {
                      disabledNodes($$value);
                    },
                    get checkedNodes() {
                      return checkedNodes();
                    },
                    set checkedNodes($$value) {
                      checkedNodes($$value);
                    },
                    get indeterminateNodes() {
                      return indeterminateNodes();
                    },
                    set indeterminateNodes($$value) {
                      indeterminateNodes($$value);
                    },
                    get treeItems() {
                      return get(children)[i];
                    },
                    set treeItems($$value) {
                      mutate(children, get(children)[i] = $$value);
                    },
                    $$events: {
                      click: (e) => dispatch("click", { id: e.detail.id }),
                      toggle: (e) => dispatch("toggle", { id: e.detail.id })
                    },
                    $$legacy: true
                  });
                }
                append($$anchor4, fragment_9);
              }
            },
            $$legacy: true
          }),
          ($$value, i2) => treeItems(treeItems()[i2] = $$value, true),
          (i2) => {
            var _a;
            return (_a = treeItems()) == null ? void 0 : _a[i2];
          },
          () => [i]
        );
      }
      append($$anchor3, fragment_2);
    });
    append($$anchor2, fragment_1);
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RecursiveTreeViewItem_1 = hmr(RecursiveTreeViewItem_1, () => RecursiveTreeViewItem_1[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RecursiveTreeViewItem_1[HMR].source;
    set(RecursiveTreeViewItem_1[HMR].source, module.default[HMR].original);
  });
}
var RecursiveTreeViewItem_default = RecursiveTreeViewItem_1;
mark_module_end(RecursiveTreeViewItem_1);

// node_modules/@skeletonlabs/skeleton/dist/components/TreeView/RecursiveTreeView.svelte
mark_module_start();
RecursiveTreeView[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/components/TreeView/RecursiveTreeView.svelte";
var root31 = add_locations(template(`<div data-testid="tree" role="tree"><!></div>`), RecursiveTreeView[FILENAME], [[52, 0]]);
function RecursiveTreeView($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, RecursiveTreeView);
  const classesBase = mutable_state();
  let selection = prop($$props, "selection", 8, false);
  let multiple = prop($$props, "multiple", 8, false);
  let relational = prop($$props, "relational", 8, false);
  let nodes = prop($$props, "nodes", 24, () => []);
  let expandedNodes = prop($$props, "expandedNodes", 28, () => []);
  let disabledNodes = prop($$props, "disabledNodes", 28, () => []);
  let checkedNodes = prop($$props, "checkedNodes", 28, () => []);
  let indeterminateNodes = prop($$props, "indeterminateNodes", 28, () => []);
  let width = prop($$props, "width", 8, "w-full");
  let spacing = prop($$props, "spacing", 8, "space-y-1");
  let padding = prop($$props, "padding", 8, "py-4 px-4");
  let indent = prop($$props, "indent", 8, "ml-4");
  let hover = prop($$props, "hover", 8, "hover:variant-soft");
  let rounded = prop($$props, "rounded", 8, "rounded-container-token");
  let caretOpen = prop($$props, "caretOpen", 8, "rotate-180");
  let caretClosed = prop($$props, "caretClosed", 8, "");
  let hyphenOpacity = prop($$props, "hyphenOpacity", 8, "opacity-10");
  let regionSummary = prop($$props, "regionSummary", 8, "");
  let regionSymbol = prop($$props, "regionSymbol", 8, "");
  let regionChildren = prop($$props, "regionChildren", 8, "");
  let labelledby = prop($$props, "labelledby", 8, "");
  setContext("selection", selection());
  setContext("multiple", multiple());
  setContext("relational", relational());
  setContext("padding", padding());
  setContext("indent", indent());
  setContext("hover", hover());
  setContext("rounded", rounded());
  setContext("caretOpen", caretOpen());
  setContext("caretClosed", caretClosed());
  setContext("hyphenOpacity", hyphenOpacity());
  setContext("regionSummary", regionSummary());
  setContext("regionSymbol", regionSymbol());
  setContext("regionChildren", regionChildren());
  const dispatch = createEventDispatcher();
  function onClick(event2) {
    dispatch("click", { id: event2.detail.id });
  }
  function onToggle(event2) {
    dispatch("toggle", { id: event2.detail.id });
  }
  legacy_pre_effect(
    () => (deep_read_state(width()), deep_read_state(spacing()), deep_read_state($$sanitized_props)),
    () => {
      set(classesBase, `${width()} ${spacing()} ${$$sanitized_props.class ?? ""}`);
    }
  );
  legacy_pre_effect_reset();
  init();
  var div = root31();
  var node = child(div);
  if_block(node, () => nodes() && nodes().length > 0, ($$anchor2) => {
    var fragment = comment();
    var node_1 = first_child(fragment);
    {
      add_owner_effect(expandedNodes, RecursiveTreeViewItem_default);
      add_owner_effect(disabledNodes, RecursiveTreeViewItem_default);
      add_owner_effect(checkedNodes, RecursiveTreeViewItem_default);
      add_owner_effect(indeterminateNodes, RecursiveTreeViewItem_default);
      RecursiveTreeViewItem_default(node_1, {
        get nodes() {
          return nodes();
        },
        get expandedNodes() {
          return expandedNodes();
        },
        set expandedNodes($$value) {
          expandedNodes($$value);
        },
        get disabledNodes() {
          return disabledNodes();
        },
        set disabledNodes($$value) {
          disabledNodes($$value);
        },
        get checkedNodes() {
          return checkedNodes();
        },
        set checkedNodes($$value) {
          checkedNodes($$value);
        },
        get indeterminateNodes() {
          return indeterminateNodes();
        },
        set indeterminateNodes($$value) {
          indeterminateNodes($$value);
        },
        $$events: { click: onClick, toggle: onToggle },
        $$legacy: true
      });
    }
    append($$anchor2, fragment);
  });
  reset(div);
  template_effect(() => {
    set_class(div, `tree ${get(classesBase) ?? ""}`);
    set_attribute(div, "aria-multiselectable", multiple());
    set_attribute(div, "aria-label", labelledby());
  });
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RecursiveTreeView = hmr(RecursiveTreeView, () => RecursiveTreeView[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RecursiveTreeView[HMR].source;
    set(RecursiveTreeView[HMR].source, module.default[HMR].original);
  });
}
var RecursiveTreeView_default = RecursiveTreeView;
mark_module_end(RecursiveTreeView);

// node_modules/@skeletonlabs/skeleton/dist/utilities/CodeBlock/CodeBlock.svelte
mark_module_start();
CodeBlock[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/utilities/CodeBlock/CodeBlock.svelte";
var root_123 = add_locations(template(`<div data-testid="codeblock"><header><span class="codeblock-language"> </span> <button type="button"> </button></header> <pre><code><!></code></pre></div>`), CodeBlock[FILENAME], [
  [
    57,
    0,
    [
      [59, 1, [[61, 2], [63, 2]]],
      [68, 1, [[68, 35]]]
    ]
  ]
]);
function CodeBlock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, CodeBlock);
  const $$stores = setup_stores();
  const $storeHighlightJs = () => (validate_store(storeHighlightJs, "storeHighlightJs"), store_get(storeHighlightJs, "$storeHighlightJs", $$stores));
  const classesBase = mutable_state();
  const dispatch = createEventDispatcher();
  let language = prop($$props, "language", 8, "plaintext");
  let code = prop($$props, "code", 8, "");
  let lineNumbers = prop($$props, "lineNumbers", 8, false);
  let background = prop($$props, "background", 8, "bg-neutral-900/90");
  let blur = prop($$props, "blur", 8, "");
  let text2 = prop($$props, "text", 8, "text-sm");
  let color = prop($$props, "color", 8, "text-white");
  let rounded = prop($$props, "rounded", 8, "rounded-container-token");
  let shadow = prop($$props, "shadow", 8, "shadow");
  let button = prop($$props, "button", 8, "btn btn-sm variant-soft !text-white");
  let buttonLabel = prop($$props, "buttonLabel", 8, "Copy");
  let buttonCopied = prop($$props, "buttonCopied", 8, "👍");
  const cBase = "overflow-hidden shadow";
  const cHeader = "text-xs text-white/50 uppercase flex justify-between items-center p-2 pl-4";
  const cPre = "whitespace-pre-wrap break-all p-4 pt-1";
  let formatted = mutable_state(false);
  let displayCode = mutable_state(code());
  let copyState = mutable_state(false);
  function languageFormatter(lang) {
    if (strict_equals(lang, "js")) return "javascript";
    if (strict_equals(lang, "ts")) return "typescript";
    if (strict_equals(lang, "shell")) return "terminal";
    return lang;
  }
  function onCopyClick() {
    set(copyState, true);
    setTimeout(
      () => {
        set(copyState, false);
      },
      2e3
    );
    dispatch("copy");
  }
  legacy_pre_effect(
    () => ($storeHighlightJs(), deep_read_state(code()), deep_read_state(language())),
    () => {
      if (strict_equals($storeHighlightJs(), void 0, false)) {
        set(displayCode, $storeHighlightJs().highlight(code(), { language: language() }).value.trim());
        set(formatted, true);
      }
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(lineNumbers()), get(displayCode)),
    () => {
      if (lineNumbers()) {
        set(displayCode, get(displayCode).replace(/^/gm, () => {
          return '<span class="line"></span>	';
        }));
        set(formatted, true);
      }
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(background()), deep_read_state(blur()), deep_read_state(text2()), deep_read_state(color()), deep_read_state(rounded()), deep_read_state(shadow()), deep_read_state($$sanitized_props)),
    () => {
      set(classesBase, `${cBase} ${background()} ${blur()} ${text2()} ${color()} ${rounded()} ${shadow()} ${$$sanitized_props.class ?? ""}`);
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  if_block(node, () => language() && code(), ($$anchor2) => {
    var div = root_123();
    var header = child(div);
    set_class(header, `codeblock-header ${cHeader ?? ""}`);
    var span = child(header);
    var text_1 = child(span, true);
    template_effect(() => set_text(text_1, languageFormatter(language())));
    reset(span);
    var button_1 = sibling(span, 2);
    var text_2 = child(button_1, true);
    reset(button_1);
    effect(() => event("click", button_1, onCopyClick));
    action(button_1, ($$node, $$action_arg) => clipboard($$node, $$action_arg), code);
    reset(header);
    var pre = sibling(header, 2);
    set_class(pre, `codeblock-pre ${cPre ?? ""}`);
    var code_1 = child(pre);
    var node_1 = child(code_1);
    if_block(
      node_1,
      () => get(formatted),
      ($$anchor3) => {
        var fragment_1 = comment();
        var node_2 = first_child(fragment_1);
        html(node_2, () => get(displayCode), false, false);
        append($$anchor3, fragment_1);
      },
      ($$anchor3) => {
        var text_3 = text();
        template_effect(() => set_text(text_3, code().trim()));
        append($$anchor3, text_3);
      }
    );
    reset(code_1);
    reset(pre);
    reset(div);
    template_effect(() => {
      set_class(div, `codeblock ${get(classesBase) ?? ""}`);
      set_class(button_1, `codeblock-btn ${button() ?? ""}`);
      set_text(text_2, !get(copyState) ? buttonLabel() : buttonCopied());
      set_class(code_1, `codeblock-code language-${language() ?? ""} lineNumbers`);
    });
    append($$anchor2, div);
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CodeBlock = hmr(CodeBlock, () => CodeBlock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CodeBlock[HMR].source;
    set(CodeBlock[HMR].source, module.default[HMR].original);
  });
}
var CodeBlock_default = CodeBlock;
mark_module_end(CodeBlock);

// node_modules/@skeletonlabs/skeleton/dist/utilities/Modal/Modal.svelte
mark_module_start();
Modal[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/utilities/Modal/Modal.svelte";
var root_48 = add_locations(template(`<header><!></header>`), Modal[FILENAME], [[191, 7]]);
var root_56 = add_locations(template(`<article><!></article>`), Modal[FILENAME], [[195, 7]]);
var root_63 = add_locations(template(`<img alt="Modal">`), Modal[FILENAME], [[199, 7]]);
var root_75 = add_locations(template(`<footer><button type="button"> </button></footer>`), Modal[FILENAME], [[204, 7, [[205, 8]]]]);
var root_94 = add_locations(template(`<footer><button type="button"> </button> <button type="button"> </button></footer>`), Modal[FILENAME], [
  [209, 7, [[210, 8], [211, 8]]]
]);
var root_11 = add_locations(template(`<form class="space-y-4"><input> <footer><button type="button"> </button> <button type="submit"> </button></footer></form>`), Modal[FILENAME], [
  [
    215,
    7,
    [
      [216, 8],
      [217, 8, [[218, 9], [219, 9]]]
    ]
  ]
]);
var root_313 = add_locations(template(`<div data-testid="modal" role="dialog" aria-modal="true"><!> <!> <!> <!></div>`), Modal[FILENAME], [[181, 5]]);
var root_124 = add_locations(template(`<div data-testid="modal-component" role="dialog" aria-modal="true"><!></div>`), Modal[FILENAME], [[227, 5]]);
var root_214 = add_locations(template(`<div data-testid="modal-backdrop"><div><!></div></div>`), Modal[FILENAME], [[163, 2, [[174, 3]]]]);
function Modal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, Modal);
  const $$stores = setup_stores();
  const $prefersReducedMotionStore = () => (validate_store(prefersReducedMotionStore, "prefersReducedMotionStore"), store_get(prefersReducedMotionStore, "$prefersReducedMotionStore", $$stores));
  const $modalStore = () => (validate_store(modalStore, "modalStore"), store_get(modalStore, "$modalStore", $$stores));
  const cPosition = mutable_state();
  const classesBackdrop = mutable_state();
  const classesTransitionLayer = mutable_state();
  const classesModal = mutable_state();
  const parent = mutable_state();
  const dispatch = createEventDispatcher();
  let components = prop($$props, "components", 24, () => ({}));
  let position = prop($$props, "position", 8, "items-center");
  let background = prop($$props, "background", 8, "bg-surface-100-800-token");
  let width = prop($$props, "width", 8, "w-modal");
  let height = prop($$props, "height", 8, "h-auto");
  let padding = prop($$props, "padding", 8, "p-4");
  let spacing = prop($$props, "spacing", 8, "space-y-4");
  let rounded = prop($$props, "rounded", 8, "rounded-container-token");
  let shadow = prop($$props, "shadow", 8, "shadow-xl");
  let zIndex = prop($$props, "zIndex", 8, "z-[999]");
  let buttonNeutral = prop($$props, "buttonNeutral", 8, "variant-ghost-surface");
  let buttonPositive = prop($$props, "buttonPositive", 8, "variant-filled");
  let buttonTextCancel = prop($$props, "buttonTextCancel", 12, "Cancel");
  let buttonTextConfirm = prop($$props, "buttonTextConfirm", 12, "Confirm");
  let buttonTextSubmit = prop($$props, "buttonTextSubmit", 12, "Submit");
  let regionBackdrop = prop($$props, "regionBackdrop", 8, "");
  let regionHeader = prop($$props, "regionHeader", 8, "text-2xl font-bold");
  let regionBody = prop($$props, "regionBody", 8, "max-h-[200px] overflow-hidden");
  let regionFooter = prop($$props, "regionFooter", 8, "flex justify-end space-x-2");
  let transitions = prop($$props, "transitions", 24, () => !$prefersReducedMotionStore());
  let transitionIn = prop($$props, "transitionIn", 8, fly);
  let transitionInParams = prop($$props, "transitionInParams", 24, () => ({ duration: 150, opacity: 0, x: 0, y: 100 }));
  let transitionOut = prop($$props, "transitionOut", 8, fly);
  let transitionOutParams = prop($$props, "transitionOutParams", 24, () => ({ duration: 150, opacity: 0, x: 0, y: 100 }));
  const cBackdrop = "fixed top-0 left-0 right-0 bottom-0 bg-surface-backdrop-token p-4";
  const cTransitionLayer = "w-full h-fit min-h-full overflow-y-auto flex justify-center";
  const cModal = "block overflow-y-auto";
  const cModalImage = "w-full h-auto";
  let promptValue = mutable_state();
  const buttonTextDefaults = {
    buttonTextCancel: buttonTextCancel(),
    buttonTextConfirm: buttonTextConfirm(),
    buttonTextSubmit: buttonTextSubmit()
  };
  let currentComponent = mutable_state();
  let registeredInteractionWithBackdrop = false;
  let modalElement = mutable_state();
  let windowHeight = mutable_state();
  let backdropOverflow = mutable_state("overflow-y-hidden");
  const modalStore = getModalStore();
  function handleModals(modals) {
    if (strict_equals(modals[0].type, "prompt")) set(promptValue, modals[0].value);
    buttonTextCancel(modals[0].buttonTextCancel || buttonTextDefaults.buttonTextCancel);
    buttonTextConfirm(modals[0].buttonTextConfirm || buttonTextDefaults.buttonTextConfirm);
    buttonTextSubmit(modals[0].buttonTextSubmit || buttonTextDefaults.buttonTextSubmit);
    set(currentComponent, strict_equals(typeof modals[0].component, "string") ? components()[modals[0].component] : modals[0].component);
  }
  function onModalHeightChange(modal) {
    var _a;
    let modalHeight = modal == null ? void 0 : modal.clientHeight;
    if (!modalHeight) modalHeight = (_a = modal == null ? void 0 : modal.firstChild) == null ? void 0 : _a.clientHeight;
    if (!modalHeight) return;
    if (modalHeight > get(windowHeight)) {
      set(backdropOverflow, "overflow-y-auto");
    } else {
      set(backdropOverflow, "overflow-y-hidden");
    }
  }
  function onBackdropInteractionBegin(event2) {
    if (!(event2.target instanceof Element)) return;
    const classList = event2.target.classList;
    if (classList.contains("modal-backdrop") || classList.contains("modal-transition")) {
      registeredInteractionWithBackdrop = true;
    }
  }
  function onBackdropInteractionEnd(event2) {
    if (!(event2.target instanceof Element)) return;
    const classList = event2.target.classList;
    if ((classList.contains("modal-backdrop") || classList.contains("modal-transition")) && registeredInteractionWithBackdrop) {
      if ($modalStore()[0].response) $modalStore()[0].response(void 0);
      modalStore.close();
      dispatch("backdrop", event2);
    }
    registeredInteractionWithBackdrop = false;
  }
  function onClose() {
    if ($modalStore()[0].response) $modalStore()[0].response(false);
    modalStore.close();
  }
  function onConfirm() {
    if ($modalStore()[0].response) $modalStore()[0].response(true);
    modalStore.close();
  }
  function onPromptSubmit(event2) {
    event2.preventDefault();
    if ($modalStore()[0].response) {
      if (strict_equals($modalStore()[0].valueAttr, void 0, false) && "type" in $modalStore()[0].valueAttr && strict_equals($modalStore()[0].valueAttr.type, "number")) $modalStore()[0].response(parseInt(get(promptValue)));
      else $modalStore()[0].response(get(promptValue));
    }
    modalStore.close();
  }
  function onKeyDown(event2) {
    if (!$modalStore().length) return;
    if (strict_equals(event2.code, "Escape")) onClose();
  }
  legacy_pre_effect(() => $modalStore(), () => {
    if ($modalStore().length) handleModals($modalStore());
  });
  legacy_pre_effect(() => get(modalElement), () => {
    onModalHeightChange(get(modalElement));
  });
  legacy_pre_effect(
    () => ($modalStore(), deep_read_state(position())),
    () => {
      var _a;
      set(cPosition, ((_a = $modalStore()[0]) == null ? void 0 : _a.position) ?? position());
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(regionBackdrop()), deep_read_state(zIndex()), deep_read_state($$sanitized_props), $modalStore()),
    () => {
      var _a;
      set(classesBackdrop, `${cBackdrop} ${regionBackdrop()} ${zIndex()} ${$$sanitized_props.class ?? ""} ${((_a = $modalStore()[0]) == null ? void 0 : _a.backdropClasses) ?? ""}`);
    }
  );
  legacy_pre_effect(() => get(cPosition), () => {
    set(classesTransitionLayer, `${cTransitionLayer} ${get(cPosition) ?? ""}`);
  });
  legacy_pre_effect(
    () => (deep_read_state(background()), deep_read_state(width()), deep_read_state(height()), deep_read_state(padding()), deep_read_state(spacing()), deep_read_state(rounded()), deep_read_state(shadow()), $modalStore()),
    () => {
      var _a;
      set(classesModal, `${cModal} ${background()} ${width()} ${height()} ${padding()} ${spacing()} ${rounded()} ${shadow()} ${((_a = $modalStore()[0]) == null ? void 0 : _a.modalClasses) ?? ""}`);
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(position()), deep_read_state(background()), deep_read_state(width()), deep_read_state(height()), deep_read_state(padding()), deep_read_state(spacing()), deep_read_state(rounded()), deep_read_state(shadow()), deep_read_state(buttonNeutral()), deep_read_state(buttonPositive()), deep_read_state(buttonTextCancel()), deep_read_state(buttonTextConfirm()), deep_read_state(buttonTextSubmit()), deep_read_state(regionBackdrop()), deep_read_state(regionHeader()), deep_read_state(regionBody()), deep_read_state(regionFooter())),
    () => {
      set(parent, {
        position: position(),
        // ---
        background: background(),
        width: width(),
        height: height(),
        padding: padding(),
        spacing: spacing(),
        rounded: rounded(),
        shadow: shadow(),
        // ---
        buttonNeutral: buttonNeutral(),
        buttonPositive: buttonPositive(),
        buttonTextCancel: buttonTextCancel(),
        buttonTextConfirm: buttonTextConfirm(),
        buttonTextSubmit: buttonTextSubmit(),
        // ---
        regionBackdrop: regionBackdrop(),
        regionHeader: regionHeader(),
        regionBody: regionBody(),
        regionFooter: regionFooter(),
        // ---
        onClose
      });
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  event("keydown", $window, onKeyDown);
  var node = first_child(fragment);
  if_block(node, () => $modalStore().length > 0, ($$anchor2) => {
    var fragment_1 = comment();
    var node_1 = first_child(fragment_1);
    key_block(node_1, $modalStore, ($$anchor3) => {
      var div = root_214();
      var div_1 = child(div);
      var node_2 = child(div_1);
      if_block(
        node_2,
        () => strict_equals($modalStore()[0].type, "component", false),
        ($$anchor4) => {
          var div_2 = root_313();
          var node_3 = child(div_2);
          if_block(node_3, () => {
            var _a;
            return (_a = $modalStore()[0]) == null ? void 0 : _a.title;
          }, ($$anchor5) => {
            var header = root_48();
            var node_4 = child(header);
            html(node_4, () => $modalStore()[0].title, false, false);
            reset(header);
            template_effect(() => set_class(header, `modal-header ${regionHeader() ?? ""}`));
            append($$anchor5, header);
          });
          var node_5 = sibling(node_3, 2);
          if_block(node_5, () => {
            var _a;
            return (_a = $modalStore()[0]) == null ? void 0 : _a.body;
          }, ($$anchor5) => {
            var article = root_56();
            var node_6 = child(article);
            html(node_6, () => $modalStore()[0].body, false, false);
            reset(article);
            template_effect(() => set_class(article, `modal-body ${regionBody() ?? ""}`));
            append($$anchor5, article);
          });
          var node_7 = sibling(node_5, 2);
          if_block(node_7, () => {
            var _a, _b;
            return ((_a = $modalStore()[0]) == null ? void 0 : _a.image) && strict_equals(typeof ((_b = $modalStore()[0]) == null ? void 0 : _b.image), "string");
          }, ($$anchor5) => {
            var img = root_63();
            set_class(img, `modal-image ${cModalImage ?? ""}`);
            template_effect(() => {
              var _a;
              return set_attribute(img, "src", (_a = $modalStore()[0]) == null ? void 0 : _a.image);
            });
            append($$anchor5, img);
          });
          var node_8 = sibling(node_7, 2);
          if_block(
            node_8,
            () => strict_equals($modalStore()[0].type, "alert"),
            ($$anchor5) => {
              var footer = root_75();
              var button = child(footer);
              var text2 = child(button, true);
              reset(button);
              reset(footer);
              template_effect(() => {
                set_class(footer, `modal-footer ${regionFooter() ?? ""}`);
                set_class(button, `btn ${buttonNeutral() ?? ""}`);
                set_text(text2, buttonTextCancel());
              });
              event("click", button, onClose);
              append($$anchor5, footer);
            },
            ($$anchor5) => {
              var fragment_2 = comment();
              var node_9 = first_child(fragment_2);
              if_block(
                node_9,
                () => strict_equals($modalStore()[0].type, "confirm"),
                ($$anchor6) => {
                  var footer_1 = root_94();
                  var button_1 = child(footer_1);
                  var text_1 = child(button_1, true);
                  reset(button_1);
                  var button_2 = sibling(button_1, 2);
                  var text_2 = child(button_2, true);
                  reset(button_2);
                  reset(footer_1);
                  template_effect(() => {
                    set_class(footer_1, `modal-footer ${regionFooter() ?? ""}`);
                    set_class(button_1, `btn ${buttonNeutral() ?? ""}`);
                    set_text(text_1, buttonTextCancel());
                    set_class(button_2, `btn ${buttonPositive() ?? ""}`);
                    set_text(text_2, buttonTextConfirm());
                  });
                  event("click", button_1, onClose);
                  event("click", button_2, onConfirm);
                  append($$anchor6, footer_1);
                },
                ($$anchor6) => {
                  var fragment_3 = comment();
                  var node_10 = first_child(fragment_3);
                  if_block(
                    node_10,
                    () => strict_equals($modalStore()[0].type, "prompt"),
                    ($$anchor7) => {
                      var form = root_11();
                      var input = child(form);
                      remove_input_defaults(input);
                      let attributes;
                      var footer_2 = sibling(input, 2);
                      var button_3 = child(footer_2);
                      var text_3 = child(button_3, true);
                      reset(button_3);
                      var button_4 = sibling(button_3, 2);
                      var text_4 = child(button_4, true);
                      reset(button_4);
                      reset(footer_2);
                      reset(form);
                      template_effect(() => {
                        attributes = set_attributes(input, attributes, {
                          class: "modal-prompt-input input",
                          name: "prompt",
                          type: "text",
                          ...$modalStore()[0].valueAttr
                        });
                        set_class(footer_2, `modal-footer ${regionFooter() ?? ""}`);
                        set_class(button_3, `btn ${buttonNeutral() ?? ""}`);
                        set_text(text_3, buttonTextCancel());
                        set_class(button_4, `btn ${buttonPositive() ?? ""}`);
                        set_text(text_4, buttonTextSubmit());
                      });
                      bind_value(input, () => get(promptValue), ($$value) => set(promptValue, $$value));
                      event("click", button_3, onClose);
                      event("submit", form, onPromptSubmit);
                      append($$anchor7, form);
                    },
                    null,
                    true
                  );
                  append($$anchor6, fragment_3);
                },
                true
              );
              append($$anchor5, fragment_2);
            }
          );
          reset(div_2);
          bind_this(div_2, ($$value) => set(modalElement, $$value), () => get(modalElement));
          template_effect(() => {
            set_class(div_2, `modal ${get(classesModal) ?? ""}`);
            set_attribute(div_2, "aria-label", $modalStore()[0].title ?? "");
          });
          append($$anchor4, div_2);
        },
        ($$anchor4) => {
          var div_3 = root_124();
          var node_11 = child(div_3);
          if_block(
            node_11,
            () => {
              var _a;
              return (_a = get(currentComponent)) == null ? void 0 : _a.slot;
            },
            ($$anchor5) => {
              var fragment_4 = comment();
              var node_12 = first_child(fragment_4);
              component(node_12, () => {
                var _a;
                return (_a = get(currentComponent)) == null ? void 0 : _a.ref;
              }, ($$anchor6, $$component) => {
                $$component($$anchor6, spread_props(() => {
                  var _a;
                  return (_a = get(currentComponent)) == null ? void 0 : _a.props;
                }, {
                  get parent() {
                    return get(parent);
                  },
                  children: wrap_snippet(Modal, ($$anchor7, $$slotProps) => {
                    var fragment_5 = comment();
                    var node_13 = first_child(fragment_5);
                    html(node_13, () => {
                      var _a;
                      return (_a = get(currentComponent)) == null ? void 0 : _a.slot;
                    }, false, false);
                    append($$anchor7, fragment_5);
                  }),
                  $$slots: { default: true }
                }));
              });
              append($$anchor5, fragment_4);
            },
            ($$anchor5) => {
              var fragment_6 = comment();
              var node_14 = first_child(fragment_6);
              component(node_14, () => {
                var _a;
                return (_a = get(currentComponent)) == null ? void 0 : _a.ref;
              }, ($$anchor6, $$component) => {
                $$component($$anchor6, spread_props(() => {
                  var _a;
                  return (_a = get(currentComponent)) == null ? void 0 : _a.props;
                }, {
                  get parent() {
                    return get(parent);
                  }
                }));
              });
              append($$anchor5, fragment_6);
            }
          );
          reset(div_3);
          bind_this(div_3, ($$value) => set(modalElement, $$value), () => get(modalElement));
          template_effect(() => {
            var _a;
            set_class(div_3, `modal contents ${((_a = $modalStore()[0]) == null ? void 0 : _a.modalClasses) ?? "" ?? ""}`);
            set_attribute(div_3, "aria-label", $modalStore()[0].title ?? "");
          });
          append($$anchor4, div_3);
        }
      );
      reset(div_1);
      reset(div);
      effect(() => event("mousedown", div, onBackdropInteractionBegin));
      effect(() => event("mouseup", div, onBackdropInteractionEnd));
      effect(() => event(
        "touchstart",
        div,
        function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        },
        void 0,
        true
      ));
      effect(() => event(
        "touchend",
        div,
        function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        },
        void 0,
        true
      ));
      action(div, ($$node, $$action_arg) => focusTrap($$node, $$action_arg), () => true);
      template_effect(() => {
        set_class(div, `modal-backdrop ${get(classesBackdrop) ?? ""} ${get(backdropOverflow) ?? ""}`);
        set_class(div_1, `modal-transition ${get(classesTransitionLayer) ?? ""}`);
      });
      transition(5, div_1, () => dynamicTransition, () => ({
        transition: transitionIn(),
        params: transitionInParams(),
        enabled: transitions()
      }));
      transition(6, div_1, () => dynamicTransition, () => ({
        transition: transitionOut(),
        params: transitionOutParams(),
        enabled: transitions()
      }));
      transition(7, div, () => dynamicTransition, () => ({
        transition: fade,
        params: { duration: 150 },
        enabled: transitions()
      }));
      append($$anchor3, div);
    });
    append($$anchor2, fragment_1);
  });
  bind_window_size("innerHeight", ($$value) => set(windowHeight, $$value));
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Modal = hmr(Modal, () => Modal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Modal[HMR].source;
    set(Modal[HMR].source, module.default[HMR].original);
  });
}
var Modal_default = Modal;
mark_module_end(Modal);

// node_modules/@skeletonlabs/skeleton/dist/utilities/Drawer/Drawer.svelte
mark_module_start();
Drawer[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/utilities/Drawer/Drawer.svelte";
var root_125 = add_locations(template(`<div data-testid="drawer-backdrop"><div data-testid="drawer" role="dialog" aria-modal="true"><!></div></div>`), Drawer[FILENAME], [[137, 1, [[159, 2]]]]);
function Drawer($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, Drawer);
  const $$stores = setup_stores();
  const $prefersReducedMotionStore = () => (validate_store(prefersReducedMotionStore, "prefersReducedMotionStore"), store_get(prefersReducedMotionStore, "$prefersReducedMotionStore", $$stores));
  const $drawerStore = () => (validate_store(drawerStore, "drawerStore"), store_get(drawerStore, "$drawerStore", $$stores));
  const classesPosition = mutable_state();
  const classesWidth = mutable_state();
  const classesHeight = mutable_state();
  const classesRounded = mutable_state();
  const classesBackdrop = mutable_state();
  const classesDrawer = mutable_state();
  const dispatch = createEventDispatcher();
  let position = prop($$props, "position", 12, "left");
  let bgDrawer = prop($$props, "bgDrawer", 12, "bg-surface-100-800-token");
  let border = prop($$props, "border", 12, "");
  let rounded = prop($$props, "rounded", 12, "");
  let shadow = prop($$props, "shadow", 12, "shadow-xl");
  let width = prop($$props, "width", 12, "");
  let height = prop($$props, "height", 12, "");
  let bgBackdrop = prop($$props, "bgBackdrop", 12, "bg-surface-backdrop-token");
  let blur = prop($$props, "blur", 12, "");
  let padding = prop($$props, "padding", 12, "");
  let zIndex = prop($$props, "zIndex", 8, "z-40");
  let regionBackdrop = prop($$props, "regionBackdrop", 12, "");
  let regionDrawer = prop($$props, "regionDrawer", 12, "");
  let labelledby = prop($$props, "labelledby", 12, "");
  let describedby = prop($$props, "describedby", 12, "");
  let duration = prop($$props, "duration", 12, 200);
  let transitions = prop($$props, "transitions", 24, () => !$prefersReducedMotionStore());
  let opacityTransition = prop($$props, "opacityTransition", 12, true);
  const presets = {
    top: {
      alignment: "items-start",
      width: "w-full",
      height: "h-[50%]",
      rounded: "rounded-bl-container-token rounded-br-container-token"
    },
    bottom: {
      alignment: "items-end",
      width: "w-full",
      height: " h-[50%]",
      rounded: "rounded-tl-container-token rounded-tr-container-token"
    },
    left: {
      alignment: "justify-start",
      width: "w-[90%]",
      height: "h-full",
      rounded: "rounded-tr-container-token rounded-br-container-token"
    },
    right: {
      alignment: "justify-end",
      width: "w-[90%]",
      height: "h-full",
      rounded: "rounded-tl-container-token rounded-bl-container-token"
    }
  };
  let elemBackdrop = mutable_state();
  let elemDrawer = mutable_state();
  let anim = mutable_state({ x: 0, y: 0 });
  const drawerStore = getDrawerStore();
  const cBackdrop = "fixed top-0 left-0 right-0 bottom-0 flex";
  const cDrawer = "overflow-y-auto transition-transform";
  const propDefaults = {
    position: position(),
    bgBackdrop: bgBackdrop(),
    blur: blur(),
    padding: padding(),
    bgDrawer: bgDrawer(),
    border: border(),
    rounded: rounded(),
    shadow: shadow(),
    width: width(),
    height: height(),
    opacityTransition: opacityTransition(),
    regionBackdrop: regionBackdrop(),
    regionDrawer: regionDrawer(),
    labelledby: labelledby(),
    describedby: describedby(),
    duration: duration()
  };
  function applyPropSettings(settings) {
    position(settings.position || propDefaults.position);
    bgBackdrop(settings.bgBackdrop || propDefaults.bgBackdrop);
    blur(settings.blur || propDefaults.blur);
    padding(settings.padding || propDefaults.padding);
    bgDrawer(settings.bgDrawer || propDefaults.bgDrawer);
    border(settings.border || propDefaults.border);
    rounded(settings.rounded || propDefaults.rounded);
    shadow(settings.shadow || propDefaults.shadow);
    width(settings.width || propDefaults.width);
    height(settings.height || propDefaults.height);
    regionBackdrop(settings.regionBackdrop || propDefaults.regionBackdrop);
    regionDrawer(settings.regionDrawer || propDefaults.regionDrawer);
    labelledby(settings.labelledby || propDefaults.labelledby);
    describedby(settings.describedby || propDefaults.describedby);
    opacityTransition(settings.opacityTransition || propDefaults.opacityTransition);
    duration(settings.duration || propDefaults.duration);
  }
  function applyAnimationSettings() {
    if (!BROWSER) return;
    switch (position()) {
      case "top":
        set(anim, { x: 0, y: -window.innerWidth });
        break;
      case "bottom":
        set(anim, { x: 0, y: window.innerWidth });
        break;
      case "left":
        set(anim, { x: -window.innerHeight, y: 0 });
        break;
      case "right":
        set(anim, { x: window.innerHeight, y: 0 });
        break;
      default:
        console.error(...log_if_contains_state("error", "Error: unknown position property value."));
        break;
    }
  }
  function onDrawerInteraction(event2) {
    if (strict_equals(event2.target, get(elemBackdrop))) {
      drawerStore.close();
      dispatch("backdrop", event2);
    } else {
      dispatch("drawer", event2);
    }
  }
  function onKeydownWindow(event2) {
    if (!$drawerStore()) return;
    if (strict_equals(event2.code, "Escape")) drawerStore.close();
  }
  drawerStore.subscribe((settings) => {
    if (strict_equals(settings.open, true, false)) return;
    applyPropSettings(settings);
    applyAnimationSettings();
  });
  legacy_pre_effect(() => deep_read_state(position()), () => {
    set(classesPosition, presets[position()].alignment);
  });
  legacy_pre_effect(
    () => (deep_read_state(width()), deep_read_state(position())),
    () => {
      set(classesWidth, width() ? width() : presets[position()].width);
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(height()), deep_read_state(position())),
    () => {
      set(classesHeight, height() ? height() : presets[position()].height);
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(rounded()), deep_read_state(position())),
    () => {
      set(classesRounded, rounded() ? rounded() : presets[position()].rounded);
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(bgBackdrop()), deep_read_state(padding()), deep_read_state(blur()), get(classesPosition), deep_read_state(regionBackdrop()), deep_read_state(zIndex()), deep_read_state($$sanitized_props)),
    () => {
      set(classesBackdrop, `${cBackdrop} ${bgBackdrop()} ${padding()} ${blur()} ${get(classesPosition)} ${regionBackdrop()} ${zIndex()} ${$$sanitized_props.class ?? ""}`);
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(bgDrawer()), deep_read_state(border()), deep_read_state(rounded()), deep_read_state(shadow()), get(classesWidth), get(classesHeight), get(classesRounded), deep_read_state(regionDrawer())),
    () => {
      set(classesDrawer, `${cDrawer} ${bgDrawer()} ${border()} ${rounded()} ${shadow()} ${get(classesWidth)} ${get(classesHeight)} ${get(classesRounded)} ${regionDrawer()}`);
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  event("keydown", $window, onKeydownWindow);
  var node = first_child(fragment);
  if_block(node, () => strict_equals($drawerStore().open, true), ($$anchor2) => {
    var div = root_125();
    var div_1 = child(div);
    var node_1 = child(div_1);
    slot(node_1, $$props, "default", {}, null);
    reset(div_1);
    bind_this(div_1, ($$value) => set(elemDrawer, $$value), () => get(elemDrawer));
    reset(div);
    bind_this(div, ($$value) => set(elemBackdrop, $$value), () => get(elemBackdrop));
    effect(() => event("mousedown", div, onDrawerInteraction));
    effect(() => event(
      "touchstart",
      div,
      function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      },
      void 0,
      true
    ));
    effect(() => event(
      "touchend",
      div,
      function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      },
      void 0,
      true
    ));
    effect(() => event("keypress", div, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    }));
    action(div, ($$node, $$action_arg) => focusTrap($$node, $$action_arg), () => true);
    template_effect(() => {
      set_class(div, `drawer-backdrop ${get(classesBackdrop) ?? ""}`);
      set_class(div_1, `drawer ${get(classesDrawer) ?? ""}`);
      set_attribute(div_1, "aria-labelledby", labelledby());
      set_attribute(div_1, "aria-describedby", describedby());
    });
    transition(1, div_1, () => dynamicTransition, () => ({
      transition: fly,
      params: {
        x: get(anim).x,
        y: get(anim).y,
        duration: duration(),
        opacity: opacityTransition() ? void 0 : 1
      },
      enabled: transitions()
    }));
    transition(2, div_1, () => dynamicTransition, () => ({
      transition: fly,
      params: {
        x: get(anim).x,
        y: get(anim).y,
        duration: duration(),
        opacity: opacityTransition() ? void 0 : 1,
        easing: cubicIn
      },
      enabled: transitions()
    }));
    transition(1, div, () => dynamicTransition, () => ({
      transition: fade,
      params: { duration: duration() },
      enabled: transitions() && opacityTransition()
    }));
    transition(2, div, () => dynamicTransition, () => ({
      transition: fade,
      params: { duration: duration() },
      enabled: transitions() && opacityTransition()
    }));
    append($$anchor2, div);
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Drawer = hmr(Drawer, () => Drawer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Drawer[HMR].source;
    set(Drawer[HMR].source, module.default[HMR].original);
  });
}
var Drawer_default = Drawer;
mark_module_end(Drawer);

// node_modules/@skeletonlabs/skeleton/dist/utilities/LightSwitch/LightSwitch.svelte
mark_module_start();
LightSwitch[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/utilities/LightSwitch/LightSwitch.svelte";
var root32 = add_locations(template(`<div role="switch" aria-label="Light Switch" tabindex="0"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path></path></svg></div></div>`), LightSwitch[FILENAME], [
  [
    57,
    0,
    [
      [
        72,
        1,
        [[74, 2, [[75, 3]]]]
      ]
    ]
  ]
]);
function LightSwitch($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, LightSwitch);
  const $$stores = setup_stores();
  const $modeCurrent = () => (validate_store(modeCurrent, "modeCurrent"), store_get(modeCurrent, "$modeCurrent", $$stores));
  const trackBg = mutable_state();
  const thumbBg = mutable_state();
  const thumbPosition = mutable_state();
  const iconFill = mutable_state();
  const classesTrack = mutable_state();
  const classesThumb = mutable_state();
  const classesIcon = mutable_state();
  let title = prop($$props, "title", 8, "Toggle light or dark mode.");
  let bgLight = prop($$props, "bgLight", 8, "bg-surface-50");
  let bgDark = prop($$props, "bgDark", 8, "bg-surface-900");
  let fillLight = prop($$props, "fillLight", 8, "fill-surface-50");
  let fillDark = prop($$props, "fillDark", 8, "fill-surface-900");
  let width = prop($$props, "width", 8, "w-12");
  let height = prop($$props, "height", 8, "h-6");
  let ring = prop($$props, "ring", 8, "ring-[1px] ring-surface-500/30");
  let rounded = prop($$props, "rounded", 8, "rounded-token");
  const cTransition = `transition-all duration-[200ms]`;
  const cTrack = "cursor-pointer";
  const cThumb = "aspect-square scale-[0.8] flex justify-center items-center";
  const cIcon = "w-[70%] aspect-square";
  const svgPath = {
    sun: "M361.5 1.2c5 2.1 8.6 6.6 9.6 11.9L391 121l107.9 19.8c5.3 1 9.8 4.6 11.9 9.6s1.5 10.7-1.6 15.2L446.9 256l62.3 90.3c3.1 4.5 3.7 10.2 1.6 15.2s-6.6 8.6-11.9 9.6L391 391 371.1 498.9c-1 5.3-4.6 9.8-9.6 11.9s-10.7 1.5-15.2-1.6L256 446.9l-90.3 62.3c-4.5 3.1-10.2 3.7-15.2 1.6s-8.6-6.6-9.6-11.9L121 391 13.1 371.1c-5.3-1-9.8-4.6-11.9-9.6s-1.5-10.7 1.6-15.2L65.1 256 2.8 165.7c-3.1-4.5-3.7-10.2-1.6-15.2s6.6-8.6 11.9-9.6L121 121 140.9 13.1c1-5.3 4.6-9.8 9.6-11.9s10.7-1.5 15.2 1.6L256 65.1 346.3 2.8c4.5-3.1 10.2-3.7 15.2-1.6zM352 256c0 53-43 96-96 96s-96-43-96-96s43-96 96-96s96 43 96 96zm32 0c0-70.7-57.3-128-128-128s-128 57.3-128 128s57.3 128 128 128s128-57.3 128-128z",
    moon: "M223.5 32C100 32 0 132.3 0 256S100 480 223.5 480c60.6 0 115.5-24.2 155.8-63.4c5-4.9 6.3-12.5 3.1-18.7s-10.1-9.7-17-8.5c-9.8 1.7-19.8 2.6-30.1 2.6c-96.9 0-175.5-78.8-175.5-176c0-65.8 36-123.1 89.3-153.3c6.1-3.5 9.2-10.5 7.7-17.3s-7.3-11.9-14.3-12.5c-6.3-.5-12.6-.8-19-.8z"
  };
  function onToggleHandler() {
    store_set(modeCurrent, !$modeCurrent());
    setModeUserPrefers($modeCurrent());
    setModeCurrent($modeCurrent());
  }
  function onKeyDown(event2) {
    if (["Enter", "Space"].includes(event2.code)) {
      event2.preventDefault();
      event2.currentTarget.click();
    }
  }
  onMount(() => {
    if (!("modeCurrent" in localStorage)) {
      setModeCurrent(getModeOsPrefers());
    }
  });
  legacy_pre_effect(
    () => ($modeCurrent(), deep_read_state(bgLight()), deep_read_state(bgDark())),
    () => {
      set(trackBg, strict_equals($modeCurrent(), true) ? bgLight() : bgDark());
    }
  );
  legacy_pre_effect(
    () => ($modeCurrent(), deep_read_state(bgDark()), deep_read_state(bgLight())),
    () => {
      set(thumbBg, strict_equals($modeCurrent(), true) ? bgDark() : bgLight());
    }
  );
  legacy_pre_effect(() => $modeCurrent(), () => {
    set(thumbPosition, strict_equals($modeCurrent(), true) ? "translate-x-[100%]" : "");
  });
  legacy_pre_effect(
    () => ($modeCurrent(), deep_read_state(fillLight()), deep_read_state(fillDark())),
    () => {
      set(iconFill, strict_equals($modeCurrent(), true) ? fillLight() : fillDark());
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(width()), deep_read_state(height()), deep_read_state(ring()), deep_read_state(rounded()), get(trackBg), deep_read_state($$sanitized_props)),
    () => {
      set(classesTrack, `${cTrack} ${cTransition} ${width()} ${height()} ${ring()} ${rounded()} ${get(trackBg)} ${$$sanitized_props.class ?? ""}`);
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(height()), deep_read_state(rounded()), get(thumbBg), get(thumbPosition)),
    () => {
      set(classesThumb, `${cThumb} ${cTransition} ${height()} ${rounded()} ${get(thumbBg)} ${get(thumbPosition)}`);
    }
  );
  legacy_pre_effect(() => get(iconFill), () => {
    set(classesIcon, `${cIcon} ${get(iconFill)}`);
  });
  legacy_pre_effect_reset();
  init();
  var div = root32();
  head(($$anchor2) => {
    var fragment = comment();
    var node = first_child(fragment);
    html(node, () => `<script nonce="%sveltekit.nonce%">(${setInitialClassState.toString()})();<\/script>`, false, false);
    append($$anchor2, fragment);
  });
  var div_1 = child(div);
  var svg = child(div_1);
  var path = child(svg);
  reset(svg);
  reset(div_1);
  reset(div);
  template_effect(() => {
    set_class(div, `lightswitch-track ${get(classesTrack) ?? ""}`);
    set_attribute(div, "aria-checked", $modeCurrent());
    set_attribute(div, "title", title());
    set_class(div_1, `lightswitch-thumb ${get(classesThumb) ?? ""}`);
    set_svg_class(svg, `lightswitch-icon ${get(classesIcon) ?? ""}`);
    set_attribute(path, "d", $modeCurrent() ? svgPath.sun : svgPath.moon);
  });
  event("click", div, onToggleHandler);
  event("click", div, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keydown", div, onKeyDown);
  event("keydown", div, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keyup", div, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keypress", div, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LightSwitch = hmr(LightSwitch, () => LightSwitch[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LightSwitch[HMR].source;
    set(LightSwitch[HMR].source, module.default[HMR].original);
  });
}
var LightSwitch_default = LightSwitch;
mark_module_end(LightSwitch);

// node_modules/@skeletonlabs/skeleton/dist/utilities/Toast/Toast.svelte
mark_module_start();
Toast[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/utilities/Toast/Toast.svelte";
var root_49 = add_locations(template(`<button><!></button>`), Toast[FILENAME], [[139, 22]]);
var root_57 = add_locations(template(`<button aria-label="Dismiss toast"> </button>`), Toast[FILENAME], [[140, 28]]);
var root_314 = add_locations(template(`<div><!> <!></div>`), Toast[FILENAME], [[138, 7]]);
var root_215 = add_locations(template(`<div aria-live="polite"><div data-testid="toast"><div class="text-base"><!></div> <!></div></div>`), Toast[FILENAME], [
  [
    113,
    4,
    [[135, 5, [[136, 6]]]]
  ]
]);
var root_126 = add_locations(template(`<div data-testid="snackbar-wrapper"><div></div></div>`), Toast[FILENAME], [[109, 1, [[111, 2]]]]);
function Toast($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, Toast);
  const $$stores = setup_stores();
  const $prefersReducedMotionStore = () => (validate_store(prefersReducedMotionStore, "prefersReducedMotionStore"), store_get(prefersReducedMotionStore, "$prefersReducedMotionStore", $$stores));
  const $toastStore = () => (validate_store(toastStore, "toastStore"), store_get(toastStore, "$toastStore", $$stores));
  const classesWrapper = mutable_state();
  const classesSnackbar = mutable_state();
  const classesToast = mutable_state();
  const filteredToasts = mutable_state();
  const toastStore = getToastStore();
  let position = prop($$props, "position", 8, "b");
  let max = prop($$props, "max", 8, 3);
  let background = prop($$props, "background", 8, "variant-filled-secondary");
  let width = prop($$props, "width", 8, "max-w-[640px]");
  let color = prop($$props, "color", 8, "");
  let padding = prop($$props, "padding", 8, "p-4");
  let spacing = prop($$props, "spacing", 8, "space-x-4");
  let rounded = prop($$props, "rounded", 8, "rounded-container-token");
  let shadow = prop($$props, "shadow", 8, "shadow-lg");
  let zIndex = prop($$props, "zIndex", 8, "z-[888]");
  let buttonAction = prop($$props, "buttonAction", 8, "btn variant-filled");
  let buttonDismiss = prop($$props, "buttonDismiss", 8, "btn-icon btn-icon-sm variant-filled");
  let buttonDismissLabel = prop($$props, "buttonDismissLabel", 8, "✕");
  let transitions = prop($$props, "transitions", 24, () => !$prefersReducedMotionStore());
  let transitionIn = prop($$props, "transitionIn", 8, fly);
  let transitionInParams = prop($$props, "transitionInParams", 24, () => ({ duration: 250 }));
  let transitionOut = prop($$props, "transitionOut", 8, fly);
  let transitionOutParams = prop($$props, "transitionOutParams", 24, () => ({ duration: 250 }));
  const cWrapper = "flex fixed top-0 left-0 right-0 bottom-0 pointer-events-none";
  const cSnackbar = "flex flex-col gap-y-2";
  const cToast = "flex justify-between items-center pointer-events-auto";
  const cToastActions = "flex items-center space-x-2";
  let cPosition = mutable_state();
  let cAlign = mutable_state();
  let animAxis = mutable_state({ x: 0, y: 0 });
  switch (position()) {
    case "t":
      set(cPosition, "justify-center items-start");
      set(cAlign, "items-center");
      set(animAxis, { x: 0, y: -100 });
      break;
    case "b":
      set(cPosition, "justify-center items-end");
      set(cAlign, "items-center");
      set(animAxis, { x: 0, y: 100 });
      break;
    case "l":
      set(cPosition, "justify-start items-center");
      set(cAlign, "items-start");
      set(animAxis, { x: -100, y: 0 });
      break;
    case "r":
      set(cPosition, "justify-end items-center");
      set(cAlign, "items-end");
      set(animAxis, { x: 100, y: 0 });
      break;
    case "tl":
      set(cPosition, "justify-start items-start");
      set(cAlign, "items-start");
      set(animAxis, { x: -100, y: 0 });
      break;
    case "tr":
      set(cPosition, "justify-end items-start");
      set(cAlign, "items-end");
      set(animAxis, { x: 100, y: 0 });
      break;
    case "bl":
      set(cPosition, "justify-start items-end");
      set(cAlign, "items-start");
      set(animAxis, { x: -100, y: 0 });
      break;
    case "br":
      set(cPosition, "justify-end items-end");
      set(cAlign, "items-end");
      set(animAxis, { x: 100, y: 0 });
      break;
  }
  function onAction(index2) {
    var _a, _b;
    (_b = (_a = $toastStore()[index2]) == null ? void 0 : _a.action) == null ? void 0 : _b.response();
    toastStore.close($toastStore()[index2].id);
  }
  function onMouseEnter(index2) {
    var _a;
    if ((_a = $toastStore()[index2]) == null ? void 0 : _a.hoverable) {
      toastStore.freeze(index2);
      set(classesSnackbar, get(classesSnackbar) + " scale-[105%]");
    }
  }
  function onMouseLeave(index2) {
    var _a;
    if ((_a = $toastStore()[index2]) == null ? void 0 : _a.hoverable) {
      toastStore.unfreeze(index2);
      set(classesSnackbar, get(classesSnackbar).replace(" scale-[105%]", ""));
    }
  }
  let wrapperVisible = mutable_state(false);
  legacy_pre_effect(
    () => (get(cPosition), deep_read_state(zIndex()), deep_read_state($$sanitized_props)),
    () => {
      set(classesWrapper, `${cWrapper} ${get(cPosition)} ${zIndex()} ${$$sanitized_props.class || ""}`);
    }
  );
  legacy_pre_effect(
    () => (get(cAlign), deep_read_state(padding())),
    () => {
      set(classesSnackbar, `${cSnackbar} ${get(cAlign)} ${padding()}`);
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(width()), deep_read_state(color()), deep_read_state(padding()), deep_read_state(spacing()), deep_read_state(rounded()), deep_read_state(shadow())),
    () => {
      set(classesToast, `${cToast} ${width()} ${color()} ${padding()} ${spacing()} ${rounded()} ${shadow()}`);
    }
  );
  legacy_pre_effect(
    () => ($toastStore(), deep_read_state(max())),
    () => {
      set(filteredToasts, Array.from($toastStore()).slice(0, max()));
    }
  );
  legacy_pre_effect(() => get(filteredToasts), () => {
    if (get(filteredToasts).length) {
      set(wrapperVisible, true);
    }
  });
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  if_block(node, () => get(filteredToasts).length > 0 || get(wrapperVisible), ($$anchor2) => {
    var div = root_126();
    var div_1 = child(div);
    validate_each_keys(() => get(filteredToasts), (t) => t);
    each(div_1, 15, () => get(filteredToasts), (t) => t, ($$anchor3, t, i) => {
      var div_2 = root_215();
      var div_3 = child(div_2);
      var div_4 = child(div_3);
      var node_1 = child(div_4);
      html(node_1, () => get(t).message, false, false);
      reset(div_4);
      var node_2 = sibling(div_4, 2);
      if_block(node_2, () => get(t).action || !get(t).hideDismiss, ($$anchor4) => {
        var div_5 = root_314();
        set_class(div_5, `toast-actions ${cToastActions ?? ""}`);
        var node_3 = child(div_5);
        if_block(node_3, () => get(t).action, ($$anchor5) => {
          var button = root_49();
          var node_4 = child(button);
          html(node_4, () => get(t).action.label, false, false);
          reset(button);
          template_effect(() => set_class(button, buttonAction()));
          event("click", button, () => onAction(get(i)));
          append($$anchor5, button);
        });
        var node_5 = sibling(node_3, 2);
        if_block(node_5, () => !get(t).hideDismiss, ($$anchor5) => {
          var button_1 = root_57();
          var text2 = child(button_1, true);
          reset(button_1);
          template_effect(() => {
            set_class(button_1, buttonDismiss());
            set_text(text2, buttonDismissLabel());
          });
          event("click", button_1, () => toastStore.close(get(t).id));
          append($$anchor5, button_1);
        });
        reset(div_5);
        append($$anchor4, div_5);
      });
      reset(div_3);
      reset(div_2);
      template_effect(() => {
        set_attribute(div_2, "role", get(t).hideDismiss ? "alert" : "alertdialog");
        set_class(div_3, `toast ${get(classesToast) ?? ""} ${get(t).background ?? background() ?? ""} ${get(t).classes ?? "" ?? ""}`);
      });
      animation(div_2, () => flip, () => ({ duration: transitions() ? 250 : 0 }));
      transition(5, div_2, () => dynamicTransition, () => ({
        transition: transitionIn(),
        params: {
          x: get(animAxis).x,
          y: get(animAxis).y,
          ...transitionInParams()
        },
        enabled: transitions()
      }));
      transition(6, div_2, () => dynamicTransition, () => ({
        transition: transitionOut(),
        params: {
          x: get(animAxis).x,
          y: get(animAxis).y,
          ...transitionOutParams()
        },
        enabled: transitions()
      }));
      event("outroend", div_2, () => {
        const outroFinishedForLastToastOnQueue = strict_equals(get(filteredToasts).length, 0);
        if (outroFinishedForLastToastOnQueue) set(wrapperVisible, false);
      });
      event("mouseenter", div_2, () => onMouseEnter(get(i)));
      event("mouseleave", div_2, () => onMouseLeave(get(i)));
      append($$anchor3, div_2);
    });
    reset(div_1);
    reset(div);
    template_effect(() => {
      set_class(div, `snackbar-wrapper ${get(classesWrapper) ?? ""}`);
      set_class(div_1, `snackbar ${get(classesSnackbar) ?? ""}`);
    });
    append($$anchor2, div);
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Toast = hmr(Toast, () => Toast[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Toast[HMR].source;
    set(Toast[HMR].source, module.default[HMR].original);
  });
}
var Toast_default = Toast;
mark_module_end(Toast);

// node_modules/@skeletonlabs/skeleton/dist/utilities/TableOfContents/TableOfContents.svelte
mark_module_start();
TableOfContents[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/utilities/TableOfContents/TableOfContents.svelte";
var root_315 = add_locations(template(`<li><a> </a></li>`), TableOfContents[FILENAME], [[42, 4, [[43, 5]]]]);
var root_127 = add_locations(template(`<nav data-testid="toc"><div><!></div> <ul></ul></nav>`), TableOfContents[FILENAME], [
  [34, 1, [[36, 2], [40, 2]]]
]);
function TableOfContents($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, TableOfContents);
  const $$stores = setup_stores();
  const $tocActiveId = () => (validate_store(tocActiveId, "tocActiveId"), store_get(tocActiveId, "$tocActiveId", $$stores));
  const $tocStore = () => (validate_store(tocStore, "tocStore"), store_get(tocStore, "$tocStore", $$stores));
  const reactiveActiveId = mutable_state();
  const classesBase = mutable_state();
  const classesList = mutable_state();
  const classesListItem = mutable_state();
  const classesAnchor = mutable_state();
  let inactive = prop($$props, "inactive", 8, "opacity-60 hover:opacity-100");
  let active = prop($$props, "active", 8, "text-primary-500");
  let activeId = prop($$props, "activeId", 8, "");
  let indentStyles = prop($$props, "indentStyles", 24, () => ({
    h2: "",
    h3: "ml-4",
    h4: "ml-8",
    h5: "ml-12",
    h6: "ml-16"
  }));
  let regionLead = prop($$props, "regionLead", 8, "font-bold");
  let regionList = prop($$props, "regionList", 8, "");
  let regionListItem = prop($$props, "regionListItem", 8, "");
  let regionAnchor = prop($$props, "regionAnchor", 8, "");
  const cBase = "space-y-4";
  const cList = "space-y-2";
  const cListItem = "block";
  const cAnchor = "";
  legacy_pre_effect(
    () => ($tocActiveId(), deep_read_state(activeId())),
    () => {
      set(reactiveActiveId, $tocActiveId() ? $tocActiveId() : activeId().replace("#", ""));
    }
  );
  legacy_pre_effect(() => deep_read_state($$sanitized_props), () => {
    set(classesBase, `${cBase} ${$$sanitized_props.class ?? ""}`);
  });
  legacy_pre_effect(() => deep_read_state(regionList()), () => {
    set(classesList, `${cList} ${regionList()}`);
  });
  legacy_pre_effect(() => deep_read_state(regionListItem()), () => {
    set(classesListItem, `${cListItem} ${regionListItem()}`);
  });
  legacy_pre_effect(() => deep_read_state(regionAnchor()), () => {
    set(classesAnchor, `${cAnchor} ${regionAnchor()}`);
  });
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  if_block(node, () => $tocStore().length, ($$anchor2) => {
    var nav = root_127();
    var div = child(nav);
    var node_1 = child(div);
    slot(node_1, $$props, "default", {}, ($$anchor3) => {
      var text2 = text("Table of Contents");
      append($$anchor3, text2);
    });
    reset(div);
    var ul = sibling(div, 2);
    each(ul, 5, $tocStore, index, ($$anchor3, tocHeading) => {
      var li = root_315();
      var a = child(li);
      var text_1 = child(a, true);
      reset(a);
      reset(li);
      template_effect(() => {
        set_class(li, `toc-list-item ${get(classesListItem) ?? ""} ${indentStyles()[get(tocHeading).element] ?? ""}`);
        set_attribute(a, "href", `#${get(tocHeading).id ?? ""}`);
        set_class(a, `toc-anchor ${get(classesAnchor) ?? ""} ${(strict_equals(get(tocHeading).id, get(reactiveActiveId)) ? active() : inactive()) ?? ""}`);
        set_text(text_1, get(tocHeading).text);
      });
      event("click", a, () => {
        set(reactiveActiveId, get(tocHeading).id);
      });
      append($$anchor3, li);
    });
    reset(ul);
    reset(nav);
    template_effect(() => {
      set_class(nav, `toc ${get(classesBase) ?? ""}`);
      set_class(div, regionLead());
      set_class(ul, `toc-list ${get(classesList) ?? ""}`);
    });
    transition(3, nav, () => fade, () => ({ duration: 100 }));
    append($$anchor2, nav);
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TableOfContents = hmr(TableOfContents, () => TableOfContents[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TableOfContents[HMR].source;
    set(TableOfContents[HMR].source, module.default[HMR].original);
  });
}
var TableOfContents_default = TableOfContents;
mark_module_end(TableOfContents);

// node_modules/@skeletonlabs/skeleton/dist/actions/Filters/svg-filters/Apollo.svelte
mark_module_start();
Apollo[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/actions/Filters/svg-filters/Apollo.svelte";
var root33 = add_locations(
  ns_template(`<svg id="svg-filter-apollo" class="filter absolute -left-full w-0 h-0"><filter id="Apollo" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse" color-interpolation-filters="sRGB"><feColorMatrix values="0.8 0.6 -0.4 0.1 0,
					0 1.2 0.05 0 0,
					0 -1 3 0.02 0,
					0 0 0 50 0" result="final" in="SourceGraphic"></feColorMatrix></filter></svg>`),
  Apollo[FILENAME],
  [
    [2, 0, [[3, 1, [[4, 2]]]]]
  ]
);
function Apollo($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Apollo);
  var svg = root33();
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Apollo = hmr(Apollo, () => Apollo[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Apollo[HMR].source;
    set(Apollo[HMR].source, module.default[HMR].original);
  });
}
var Apollo_default = Apollo;
mark_module_end(Apollo);

// node_modules/@skeletonlabs/skeleton/dist/actions/Filters/svg-filters/BlueNight.svelte
mark_module_start();
BlueNight[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/actions/Filters/svg-filters/BlueNight.svelte";
var root34 = add_locations(
  ns_template(`<svg id="svg-filter-bluenight" class="filter absolute -left-full w-0 h-0"><filter id="BlueNight" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse" color-interpolation-filters="sRGB"><feColorMatrix type="matrix" values="1.000 0.000 0.000 0.000 0.000 
                    0.000 1.000 0.000 0.000 0.05 
                    0.000 0.000 1.000 0.000 0.400 
                    0.000 0.000 0.000 1.000 0.000"></feColorMatrix></filter></svg>`),
  BlueNight[FILENAME],
  [
    [2, 0, [[3, 1, [[4, 2]]]]]
  ]
);
function BlueNight($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, BlueNight);
  var svg = root34();
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BlueNight = hmr(BlueNight, () => BlueNight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BlueNight[HMR].source;
    set(BlueNight[HMR].source, module.default[HMR].original);
  });
}
var BlueNight_default = BlueNight;
mark_module_end(BlueNight);

// node_modules/@skeletonlabs/skeleton/dist/actions/Filters/svg-filters/Emerald.svelte
mark_module_start();
Emerald[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/actions/Filters/svg-filters/Emerald.svelte";
var root35 = add_locations(
  ns_template(`<svg id="svg-filter-emerald" class="filter absolute -left-full w-0 h-0"><filter id="Emerald" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse" color-interpolation-filters="sRGB"><feColorMatrix type="matrix" in="SourceGraphic" result="colormatrix" values="
            .16 .185 .129 0 0
            .16 .185 .129 0 0
            .16 .185 .129 0 0
            0 0 0 0.33 0"></feColorMatrix><feComponentTransfer in="colormatrix" result="componentTransfer"><feFuncR type="table" tableValues="0.03 0.9"></feFuncR><feFuncG type="table" tableValues="0.57 1"></feFuncG><feFuncB type="table" tableValues="0.49 0.53"></feFuncB><feFuncA type="table" tableValues="0 1"></feFuncA></feComponentTransfer><feBlend mode="normal" in="componentTransfer" in2="SourceGraphic" result="blend"></feBlend></filter></svg>`),
  Emerald[FILENAME],
  [
    [
      2,
      0,
      [
        [
          3,
          1,
          [
            [5, 2],
            [
              15,
              2,
              [
                [16, 3],
                [17, 3],
                [18, 3],
                [19, 3]
              ]
            ],
            [21, 2]
          ]
        ]
      ]
    ]
  ]
);
function Emerald($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Emerald);
  var svg = root35();
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Emerald = hmr(Emerald, () => Emerald[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Emerald[HMR].source;
    set(Emerald[HMR].source, module.default[HMR].original);
  });
}
var Emerald_default = Emerald;
mark_module_end(Emerald);

// node_modules/@skeletonlabs/skeleton/dist/actions/Filters/svg-filters/GreenFall.svelte
mark_module_start();
GreenFall[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/actions/Filters/svg-filters/GreenFall.svelte";
var root36 = add_locations(
  ns_template(`<svg id="svg-filter-greenfall" class="filter absolute -left-full w-0 h-0"><filter id="GreenFall" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse" color-interpolation-filters="linearRGB"><feColorMatrix type="matrix" values="0.5 -0.4 0.3332 0 0
					0 0.4 0.3 0 0
					0 0 0.5 0 0
					0 0 0 500 -20" x="0%" y="0%" width="100%" height="100%" in="SourceGraphic" result="colormatrix"></feColorMatrix></filter></svg>`),
  GreenFall[FILENAME],
  [
    [2, 0, [[3, 1, [[13, 2]]]]]
  ]
);
function GreenFall($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, GreenFall);
  var svg = root36();
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GreenFall = hmr(GreenFall, () => GreenFall[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GreenFall[HMR].source;
    set(GreenFall[HMR].source, module.default[HMR].original);
  });
}
var GreenFall_default = GreenFall;
mark_module_end(GreenFall);

// node_modules/@skeletonlabs/skeleton/dist/actions/Filters/svg-filters/Noir.svelte
mark_module_start();
Noir[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/actions/Filters/svg-filters/Noir.svelte";
var root37 = add_locations(ns_template(`<svg id="svg-filter-noir" class="filter absolute -left-full w-0 h-0"><filter id="Noir" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse" color-interpolation-filters="linearRGB"><feColorMatrix type="saturate" values="0" x="0%" y="0%" width="100%" height="100%" in="SourceGraphic" result="colormatrix1"></feColorMatrix><feBlend mode="lighten" x="0%" y="0%" width="100%" height="100%" in="colormatrix1" in2="colormatrix1" result="blend"></feBlend><feBlend mode="multiply" x="0%" y="0%" width="100%" height="100%" in="colormatrix1" in2="diffuseLighting" result="blend1"></feBlend></filter></svg>`), Noir[FILENAME], [
  [
    2,
    0,
    [
      [
        3,
        1,
        [[13, 2], [14, 2], [15, 2]]
      ]
    ]
  ]
]);
function Noir($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Noir);
  var svg = root37();
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Noir = hmr(Noir, () => Noir[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Noir[HMR].source;
    set(Noir[HMR].source, module.default[HMR].original);
  });
}
var Noir_default = Noir;
mark_module_end(Noir);

// node_modules/@skeletonlabs/skeleton/dist/actions/Filters/svg-filters/NoirLight.svelte
mark_module_start();
NoirLight[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/actions/Filters/svg-filters/NoirLight.svelte";
var root38 = add_locations(ns_template(`<svg id="svg-filter-noirlight" class="filter absolute -left-full w-0 h-0"><filter id="NoirLight" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse" color-interpolation-filters="linearRGB"><feColorMatrix type="saturate" values="0" x="0%" y="0%" width="100%" height="100%" in="SourceGraphic" result="colormatrix2"></feColorMatrix><feBlend mode="saturation" x="0%" y="0%" width="100%" height="100%" in="SourceGraphic" in2="colormatrix2" result="blend2"></feBlend><feBlend mode="screen" x="0%" y="0%" width="100%" height="100%" in="colormatrix2" in2="blend2" result="blend3"></feBlend><feColorMatrix type="luminanceToAlpha" x="0%" y="0%" width="100%" height="100%" in="blend3" result="colormatrix3"></feColorMatrix><feBlend mode="exclusion" x="0%" y="0%" width="100%" height="100%" in="blend3" in2="colormatrix3" result="blend5"></feBlend></filter></svg>`), NoirLight[FILENAME], [
  [
    2,
    0,
    [
      [
        3,
        1,
        [
          [13, 2],
          [14, 2],
          [15, 2],
          [16, 2],
          [17, 2]
        ]
      ]
    ]
  ]
]);
function NoirLight($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, NoirLight);
  var svg = root38();
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  NoirLight = hmr(NoirLight, () => NoirLight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NoirLight[HMR].source;
    set(NoirLight[HMR].source, module.default[HMR].original);
  });
}
var NoirLight_default = NoirLight;
mark_module_end(NoirLight);

// node_modules/@skeletonlabs/skeleton/dist/actions/Filters/svg-filters/Rustic.svelte
mark_module_start();
Rustic[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/actions/Filters/svg-filters/Rustic.svelte";
var root39 = add_locations(
  ns_template(`<svg id="svg-filter-rustic" class="filter absolute -left-full w-0 h-0"><filter id="Rustic" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse" color-interpolation-filters="sRGB"><feColorMatrix type="matrix" in="SourceGraphic" result="colormatrix" values="0.39215686274509803 0.39215686274509803 0.39215686274509803  0 0 
					0.3333333333333333 0.3333333333333333 0.3333333333333333  0 0 
					0.30980392156862746 0.30980392156862746 0.30980392156862746  0 0  
					0 0 0 1 0"></feColorMatrix></filter></svg>`),
  Rustic[FILENAME],
  [
    [2, 0, [[3, 1, [[4, 2]]]]]
  ]
);
function Rustic($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Rustic);
  var svg = root39();
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rustic = hmr(Rustic, () => Rustic[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rustic[HMR].source;
    set(Rustic[HMR].source, module.default[HMR].original);
  });
}
var Rustic_default = Rustic;
mark_module_end(Rustic);

// node_modules/@skeletonlabs/skeleton/dist/actions/Filters/svg-filters/Summer84.svelte
mark_module_start();
Summer84[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/actions/Filters/svg-filters/Summer84.svelte";
var root40 = add_locations(
  ns_template(`<svg id="svg-filter-summer84" class="filter absolute -left-full w-0 h-0"><filter id="Summer84" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse" color-interpolation-filters="sRGB"><feColorMatrix type="matrix" values="1.300 0.200 0.000 0.000 0.000 
					0.300 0.600 0.200 0.000 0.000 
					0.200 1.000 0.200 0.000 0.000 
					0.000 0.000 0.000 1.000 0.000"></feColorMatrix></filter></svg>`),
  Summer84[FILENAME],
  [
    [2, 0, [[3, 1, [[4, 2]]]]]
  ]
);
function Summer84($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Summer84);
  var svg = root40();
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Summer84 = hmr(Summer84, () => Summer84[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Summer84[HMR].source;
    set(Summer84[HMR].source, module.default[HMR].original);
  });
}
var Summer84_default = Summer84;
mark_module_end(Summer84);

// node_modules/@skeletonlabs/skeleton/dist/actions/Filters/svg-filters/XPro.svelte
mark_module_start();
XPro[FILENAME] = "node_modules/@skeletonlabs/skeleton/dist/actions/Filters/svg-filters/XPro.svelte";
var root41 = add_locations(
  ns_template(`<svg id="svg-filter-xpro" class="filter absolute -left-full w-0 h-0"><filter id="XPro" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse" color-interpolation-filters="sRGB"><feColorMatrix type="matrix" values="1.70 -0.20 0.00 0.00 0.00 
                    0.10 0.800 0.30 0.00 0.00 
                    0.20 0.300 0.50 0.00 0.00 
                    0.00 0.00 0.00 1.00 0.00"></feColorMatrix></filter></svg>`),
  XPro[FILENAME],
  [
    [2, 0, [[3, 1, [[4, 2]]]]]
  ]
);
function XPro($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, XPro);
  var svg = root41();
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  XPro = hmr(XPro, () => XPro[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = XPro[HMR].source;
    set(XPro[HMR].source, module.default[HMR].original);
  });
}
var XPro_default = XPro;
mark_module_end(XPro);
export {
  Accordion_default as Accordion,
  AccordionItem_default as AccordionItem,
  Apollo_default as Apollo,
  AppBar_default as AppBar,
  AppRail_default as AppRail,
  AppRailAnchor_default as AppRailAnchor,
  AppRailTile_default as AppRailTile,
  AppShell_default as AppShell,
  Autocomplete_default as Autocomplete,
  Avatar_default as Avatar,
  BlueNight_default as BlueNight,
  CodeBlock_default as CodeBlock,
  ConicGradient_default as ConicGradient,
  Drawer_default as Drawer,
  Emerald_default as Emerald,
  FileButton_default as FileButton,
  FileDropzone_default as FileDropzone,
  GreenFall_default as GreenFall,
  InputChip_default as InputChip,
  LightSwitch_default as LightSwitch,
  ListBox_default as ListBox,
  ListBoxItem_default as ListBoxItem,
  Modal_default as Modal,
  Noir_default as Noir,
  NoirLight_default as NoirLight,
  Paginator_default as Paginator,
  ProgressBar_default as ProgressBar,
  ProgressRadial_default as ProgressRadial,
  RadioGroup_default as RadioGroup,
  RadioItem_default as RadioItem,
  RangeSlider_default as RangeSlider,
  Ratings_default as Ratings,
  RecursiveTreeView_default as RecursiveTreeView,
  RecursiveTreeViewItem_default as RecursiveTreeViewItem,
  Rustic_default as Rustic,
  SlideToggle_default as SlideToggle,
  Step_default as Step,
  Stepper_default as Stepper,
  Summer84_default as Summer84,
  Tab_default as Tab,
  TabAnchor_default as TabAnchor,
  TabGroup_default as TabGroup,
  Table_default as Table,
  TableOfContents_default as TableOfContents,
  Toast_default as Toast,
  TreeView_default as TreeView,
  TreeViewItem_default as TreeViewItem,
  XPro_default as XPro,
  autoModeWatcher,
  clipboard,
  filter,
  focusTrap,
  getDrawerStore,
  getModalStore,
  getModeAutoPrefers,
  getModeOsPrefers,
  getModeUserPrefers,
  getToastStore,
  initializeStores,
  localStorageStore,
  modeCurrent,
  modeOsPrefers,
  modeUserPrefers,
  popup,
  prefersReducedMotionStore,
  setInitialClassState,
  setModeCurrent,
  setModeUserPrefers,
  storeHighlightJs,
  storePopup,
  tableMapperValues,
  tableSourceMapper,
  tableSourceValues,
  tocCrawler,
  tocStore
};
//# sourceMappingURL=@skeletonlabs_skeleton.js.map
