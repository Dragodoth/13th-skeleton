import "./chunk-QFHH7Y2Z.js";
import {
  derived,
  get as get2,
  writable
} from "./chunk-ERH3AFPO.js";
import "./chunk-TYM7FVR5.js";
import {
  add_locations,
  append_styles,
  bind_element_size,
  bind_select_value,
  bind_this,
  bind_value,
  check_target,
  cleanup_styles,
  each,
  hmr,
  html,
  if_block,
  index,
  init,
  legacy_api,
  legacy_rest_props,
  prop,
  remove_input_defaults,
  set_attribute,
  set_class,
  set_style,
  setup_stores,
  slot,
  store_get,
  store_set,
  toggle_class,
  validate_store
} from "./chunk-DFK2CRDD.js";
import {
  append,
  comment,
  set_text,
  template,
  text
} from "./chunk-LBCSTXDU.js";
import {
  child,
  derived_safe_equal,
  event,
  first_child,
  get,
  invalidate_inner_signals,
  mark_module_end,
  mark_module_start,
  mutable_state,
  mutate,
  pop,
  push,
  reset,
  set,
  sibling,
  strict_equals,
  template_effect
} from "./chunk-WUIMIQQM.js";
import "./chunk-IP2U24VQ.js";
import "./chunk-DPXC2WL3.js";
import {
  FILENAME,
  HMR
} from "./chunk-QVLHSJ7S.js";
import "./chunk-C2JC7GBF.js";
import "./chunk-AJJAVYTT.js";
import {
  __publicField
} from "./chunk-B4Q33VKO.js";

// node_modules/@vincjo/datatables/dist/local/utils.js
var isNull = (value) => {
  if (value === null || value === void 0 || value === "")
    return true;
  return false;
};
var isNotNull = (value) => {
  return !isNull(value);
};
var parseField = (field, uid) => {
  const identifier = uid ?? field.toString();
  if (typeof field === "string") {
    return {
      callback: (row) => row[field],
      identifier,
      key: field
    };
  } else if (typeof field === "function") {
    return {
      callback: field,
      identifier,
      key: void 0
    };
  }
  throw new Error(`Invalid field argument: ${String(field)}`);
};

// node_modules/@vincjo/datatables/dist/local/Comparator.js
var check = {
  isLike: (entry, value) => {
    return stringify(entry).indexOf(stringify(value)) > -1;
  },
  isNotLike: (entry, value) => {
    return stringify(entry).indexOf(stringify(value)) === -1;
  },
  startsWith: (entry, value) => {
    return stringify(entry).startsWith(stringify(value));
  },
  endsWith: (entry, value) => {
    return stringify(entry).endsWith(stringify(value));
  },
  isEqualTo: (entry, value) => {
    return stringify(entry) === stringify(value);
  },
  isNotEqualTo: (entry, value) => {
    return stringify(entry) !== stringify(value);
  },
  isGreaterThan: (entry, value) => {
    if (isNull2(entry))
      return false;
    return entry > value;
  },
  isGreaterThanOrEqualTo: (entry, value) => {
    if (isNull2(entry))
      return false;
    return entry >= value;
  },
  isLessThan: (entry, value) => {
    if (isNull2(entry))
      return false;
    return entry < value;
  },
  isLessThanOrEqualTo: (entry, value) => {
    if (isNull2(entry))
      return false;
    return entry <= value;
  },
  isBetween: (entry, value) => {
    if (isNull2(entry))
      return false;
    const [min, max] = value;
    return entry >= min && entry <= max;
  },
  isStrictlyBetween: (entry, value) => {
    if (isNull2(entry))
      return false;
    const [min, max] = value;
    return entry > min && entry < max;
  },
  isTrue: (entry, _) => {
    return entry === true;
  },
  isFalse: (entry, _) => {
    return entry === false;
  },
  isNull: (entry, _) => {
    return entry === null || entry === void 0;
  },
  isNotNull: (entry, _) => {
    return entry === null || entry === void 0 ? false : true;
  },
  whereIn: (entry, values = []) => {
    if (isNull2(entry))
      return false;
    if (values.length === 0)
      return false;
    for (const { value, comparator } of values) {
      if (comparator(entry, value)) {
        return true;
      }
    }
    return false;
  },
  /**
   * @deprecated use "isLike" instead
   * @since 1.12.7 2023-09-27
   */
  contains: (entry, value) => {
    return check.isLike(entry, value);
  }
};
function stringify(value = null) {
  return String(value).toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
}
function isNull2(entry) {
  if (entry === null || entry === void 0)
    return true;
}

// node_modules/@vincjo/datatables/dist/local/handlers/EventHandler.js
var EventHandler = class {
  constructor() {
    __publicField(this, "events", {
      change: [],
      clearFilters: [],
      clearSearch: []
    });
    __publicField(this, "triggerChange", writable(0));
  }
  // legacy
  add(event2, callback) {
    this.events[event2].push(callback);
  }
  trigger(event2) {
    for (const callback of this.events[event2]) {
      callback();
    }
    if (event2 === "change") {
      this.triggerChange.update((store) => {
        return store + 1;
      });
    }
  }
};

// node_modules/@vincjo/datatables/dist/local/Context.js
var Context = class {
  constructor(data, params) {
    __publicField(this, "event");
    __publicField(this, "rowsPerPage");
    __publicField(this, "pageNumber");
    __publicField(this, "search");
    __publicField(this, "filters");
    __publicField(this, "filterCount");
    __publicField(this, "rawRows");
    __publicField(this, "filteredRows");
    __publicField(this, "pagedRows");
    __publicField(this, "rowCount");
    __publicField(this, "pages");
    __publicField(this, "pagesWithEllipsis");
    __publicField(this, "pageCount");
    __publicField(this, "sort");
    __publicField(this, "selected");
    __publicField(this, "selectScope");
    __publicField(this, "isAllSelected");
    this.event = new EventHandler();
    this.rowsPerPage = writable(params.rowsPerPage);
    this.pageNumber = writable(1);
    this.search = writable({});
    this.filters = writable([]);
    this.filterCount = this.createFilterCount();
    this.rawRows = writable(data);
    this.filteredRows = this.createFilteredRows();
    this.pagedRows = this.createPagedRows();
    this.rowCount = this.createRowCount();
    this.pages = this.createPages();
    this.pagesWithEllipsis = this.createPagesWithEllipsis();
    this.pageCount = this.createPageCount();
    this.sort = writable({});
    this.selected = writable([]);
    this.selectScope = writable("all");
    this.isAllSelected = this.createIsAllSelected();
  }
  createFilterCount() {
    return derived(this.filters, ($filters) => $filters.length);
  }
  createFilteredRows() {
    return derived([this.rawRows, this.search, this.filters], ([$rawRows, $search, $filters]) => {
      if ($search.value) {
        $rawRows = $rawRows.filter((row) => {
          const fields = $search.scope ?? Object.keys(row);
          const scope = fields.map((field) => {
            const { callback } = parseField(field);
            return callback;
          });
          return scope.some((callback) => {
            return this.match(callback(row), $search.value);
          });
        });
        this.pageNumber.set(1);
        this.selected.set([]);
        this.event.trigger("change");
      }
      if ($filters.length > 0) {
        $filters.forEach((filter) => {
          return $rawRows = $rawRows.filter((row) => {
            const entry = filter.callback(row);
            return this.match(entry, filter.value, filter.comparator);
          });
        });
        this.pageNumber.set(1);
        this.selected.set([]);
        this.event.trigger("change");
      }
      return $rawRows;
    });
  }
  match(entry, value, compare = null) {
    if (isNull(value)) {
      return true;
    }
    if (!entry && compare) {
      return compare(entry, value);
    }
    if (!entry)
      return check.isLike(entry, value);
    else if (typeof entry === "object") {
      return Object.keys(entry).some((k) => {
        return this.match(entry[k], value, compare);
      });
    }
    if (!compare)
      return check.isLike(entry, value);
    return compare(entry, value);
  }
  createPagedRows() {
    return derived([this.filteredRows, this.rowsPerPage, this.pageNumber], ([$filteredRows, $rowsPerPage, $pageNumber]) => {
      if (!$rowsPerPage) {
        return $filteredRows;
      }
      return $filteredRows.slice(($pageNumber - 1) * $rowsPerPage, $pageNumber * $rowsPerPage);
    });
  }
  createRowCount() {
    return derived([this.filteredRows, this.pageNumber, this.rowsPerPage], ([$filteredRows, $pageNumber, $rowsPerPage]) => {
      const total = $filteredRows.length;
      if (!$rowsPerPage) {
        return { total, start: 1, end: total };
      }
      return {
        total,
        start: $pageNumber * $rowsPerPage - $rowsPerPage + 1,
        end: Math.min($pageNumber * $rowsPerPage, $filteredRows.length)
      };
    });
  }
  createPages() {
    return derived([this.rowsPerPage, this.filteredRows], ([$rowsPerPage, $filteredRows]) => {
      if (!$rowsPerPage) {
        return [1];
      }
      const pages = Array.from(Array(Math.ceil($filteredRows.length / $rowsPerPage)));
      return pages.map((_, i) => i + 1);
    });
  }
  createPagesWithEllipsis() {
    return derived([this.pages, this.pageNumber], ([$pages, $pageNumber]) => {
      if ($pages.length <= 7) {
        return $pages;
      }
      const ellipse = null;
      const firstPage = 1;
      const lastPage = $pages.length;
      if ($pageNumber <= 4) {
        return [
          ...$pages.slice(0, 5),
          ellipse,
          lastPage
        ];
      } else if ($pageNumber < $pages.length - 3) {
        return [
          firstPage,
          ellipse,
          ...$pages.slice($pageNumber - 2, $pageNumber + 1),
          ellipse,
          lastPage
        ];
      } else {
        return [
          firstPage,
          ellipse,
          ...$pages.slice($pages.length - 5, $pages.length)
        ];
      }
    });
  }
  createPageCount() {
    return derived(this.pages, ($pages) => {
      return $pages.length;
    });
  }
  createIsAllSelected() {
    return derived([this.selected, this.pagedRows, this.filteredRows, this.selectScope], ([$selected, $pagedRows, $filteredRows, $selectScope]) => {
      const rowCount = $selectScope === "currentPage" ? $pagedRows.length : $filteredRows.length;
      if (rowCount === $selected.length && rowCount !== 0) {
        return true;
      }
      return false;
    });
  }
};

// node_modules/@vincjo/datatables/dist/local/handlers/SortHandler.js
var SortHandler = class {
  constructor(context) {
    __publicField(this, "rawRows");
    __publicField(this, "event");
    __publicField(this, "sort");
    __publicField(this, "backup");
    this.rawRows = context.rawRows;
    this.event = context.event;
    this.sort = context.sort;
    this.backup = [];
  }
  set(orderBy = null, uid) {
    if (!orderBy)
      return;
    const sort = get2(this.sort);
    const { identifier } = parseField(orderBy, uid);
    if (sort.identifier !== identifier) {
      this.sort.update((store) => store.direction = null);
    }
    if (sort.direction === null || sort.direction === "desc") {
      this.asc(orderBy, uid);
    } else if (sort.direction === "asc") {
      this.desc(orderBy, uid);
    }
  }
  asc(orderBy, uid) {
    if (!orderBy)
      return;
    const { identifier, callback, key } = parseField(orderBy, uid);
    this.sort.set({ identifier, callback, direction: "asc", key });
    this.rawRows.update((store) => {
      store.sort((x, y) => {
        const [a, b] = [callback(x), callback(y)];
        if (a === b)
          return 0;
        if (a === null)
          return 1;
        if (b === null)
          return -1;
        if (typeof a === "boolean")
          return a === false ? 1 : -1;
        if (typeof a === "string")
          return a.localeCompare(b);
        if (typeof a === "number")
          return a - b;
        if (typeof a === "object")
          return JSON.stringify(a).localeCompare(JSON.stringify(b));
        else
          return String(a).localeCompare(String(b));
      });
      return store;
    });
    this.log({ identifier, callback, direction: "asc" });
    this.event.trigger("change");
  }
  desc(orderBy, uid) {
    if (!orderBy)
      return;
    const { identifier, callback, key } = parseField(orderBy, uid);
    this.sort.set({ identifier, callback, direction: "desc", key });
    this.rawRows.update((store) => {
      store.sort((x, y) => {
        const [a, b] = [callback(x), callback(y)];
        if (a === b)
          return 0;
        if (a === null)
          return 1;
        if (b === null)
          return -1;
        if (typeof b === "boolean")
          return b === false ? 1 : -1;
        if (typeof b === "string")
          return b.localeCompare(a);
        if (typeof b === "number")
          return b - a;
        if (typeof b === "object")
          return JSON.stringify(b).localeCompare(JSON.stringify(a));
        else
          return String(b).localeCompare(String(a));
      });
      return store;
    });
    this.log({ identifier, callback, direction: "desc" });
    this.event.trigger("change");
  }
  apply(params = null) {
    if (params) {
      switch (params.direction) {
        case "asc":
          return this.asc(params.orderBy);
        case "desc":
          return this.desc(params.orderBy);
        default:
          return this.set(params.orderBy);
      }
    } else {
      this.restore();
    }
  }
  clear() {
    this.backup = [];
    this.sort.set({});
  }
  define(orderBy, direction = "asc") {
    if (!orderBy)
      return;
    const { identifier, callback, key } = parseField(orderBy);
    this.sort.set({ identifier, callback, direction, key });
  }
  restore() {
    for (const sort of this.backup) {
      const { key, callback, direction } = sort;
      const param = key ?? callback;
      this[direction](param);
    }
  }
  log(sort) {
    this.backup = this.backup.filter((item) => item.identifier !== sort.identifier);
    if (this.backup.length >= 3) {
      const [_, slot2, slot3] = this.backup;
      this.backup = [slot2, slot3, sort];
    } else {
      this.backup = [...this.backup, sort];
    }
  }
};

// node_modules/@vincjo/datatables/dist/local/handlers/SelectHandler.js
var SelectHandler = class {
  constructor(context) {
    __publicField(this, "filteredRows");
    __publicField(this, "pagedRows");
    __publicField(this, "selected");
    __publicField(this, "scope");
    __publicField(this, "isAllSelected");
    __publicField(this, "event");
    this.filteredRows = context.filteredRows;
    this.pagedRows = context.pagedRows;
    this.selected = context.selected;
    this.scope = context.selectScope;
    this.isAllSelected = context.isAllSelected;
    this.event = context.event;
  }
  set(value) {
    const selected = get2(this.selected);
    if (selected.includes(value)) {
      this.selected.set(selected.filter((item) => item !== value));
    } else {
      this.selected.set([value, ...selected]);
    }
  }
  all(selectBy = null) {
    const isAllSelected = get2(this.isAllSelected);
    if (isAllSelected) {
      return this.clear();
    }
    const scope = get2(this.scope);
    const rows = scope === "currentPage" ? get2(this.pagedRows) : get2(this.filteredRows);
    if (scope === "currentPage") {
      this.event.add("change", () => this.clear());
    }
    if (selectBy) {
      this.selected.set(rows.map((row) => row[selectBy]));
    } else {
      this.selected.set(rows);
    }
  }
  clear() {
    this.selected.set([]);
  }
};

// node_modules/@vincjo/datatables/dist/local/handlers/PageHandler.js
var PageHandler = class {
  constructor(context) {
    __publicField(this, "pageNumber");
    __publicField(this, "rowCount");
    __publicField(this, "rowsPerPage");
    __publicField(this, "event");
    this.pageNumber = context.pageNumber;
    this.rowCount = context.rowCount;
    this.rowsPerPage = context.rowsPerPage;
    this.event = context.event;
  }
  goto(number) {
    this.pageNumber.update((store) => {
      const rowsPerPage = get2(this.rowsPerPage);
      if (rowsPerPage) {
        const total = get2(this.rowCount).total;
        if (number >= 1 && number <= Math.ceil(total / rowsPerPage)) {
          store = number;
          this.event.trigger("change");
        }
      }
      return store;
    });
  }
  previous() {
    const number = get2(this.pageNumber) - 1;
    this.goto(number);
  }
  next() {
    const number = get2(this.pageNumber) + 1;
    this.goto(number);
  }
};

// node_modules/@vincjo/datatables/dist/local/handlers/SearchHandler.js
var SearchHandler = class {
  constructor(context) {
    __publicField(this, "search");
    __publicField(this, "event");
    this.search = context.search;
    this.event = context.event;
  }
  set(value, scope = null) {
    this.search.update((store) => {
      store = {
        value: value ?? "",
        scope: scope ?? null
      };
      return store;
    });
  }
  clear() {
    this.search.set({ value: null, scope: null });
    this.event.trigger("change");
    this.event.trigger("clearSearch");
  }
};

// node_modules/@vincjo/datatables/dist/local/handlers/FilterHandler.js
var FilterHandler = class {
  constructor(context) {
    __publicField(this, "filters");
    __publicField(this, "event");
    __publicField(this, "collection");
    this.filters = context.filters;
    this.event = context.event;
  }
  set(value, filterBy, comparator = null, name) {
    const { callback, identifier, key } = parseField(filterBy, name);
    const filter = { value, identifier, callback, comparator, key };
    this.filters.update((store) => {
      store = store.filter((item) => item.identifier !== identifier);
      if (isNotNull(value)) {
        store.push(filter);
      }
      return store;
    });
  }
  clear() {
    this.filters.set([]);
    this.event.trigger("change");
    this.event.trigger("clearFilters");
  }
  get() {
    if (this.collection) {
      return this.collection;
    }
    this.collection = this.createCollection();
    return this.collection;
  }
  createCollection() {
    return derived(this.filters, ($filters) => {
      return $filters.map(({ value, callback, key, comparator }) => {
        const filterBy = key ?? callback;
        return {
          value,
          filterBy,
          check: comparator ? comparator.name : "isLike"
          // set: (value: Value, comparator: Comparator<Row> = check.isLike) => {
          //     this.set(value, filterBy, comparator)
          // },
          // clear: () => {
          //     this.set(undefined, filterBy)
          // }
        };
      });
    });
  }
};

// node_modules/@vincjo/datatables/dist/local/helpers/FilterHelper.js
var FilterHelper = class {
  constructor(filterHandler, filterBy, comparator) {
    __publicField(this, "filterHandler");
    __publicField(this, "filterBy");
    __publicField(this, "uid");
    __publicField(this, "comparator");
    __publicField(this, "callback");
    this.filterHandler = filterHandler;
    this.filterBy = filterBy;
    this.uid = "f_" + Math.random().toString(28).substring(2);
    this.comparator = comparator ?? check.isLike;
    this.callback = () => null;
  }
  set(value, comparator) {
    if (comparator) {
      this.comparator = comparator;
    }
    this.filterHandler.set(value, this.filterBy, this.comparator, this.uid);
  }
  clear() {
    this.callback();
    this.filterHandler.set(void 0, this.filterBy);
  }
  on(event2, callback) {
    this.callback = callback;
  }
};

// node_modules/@vincjo/datatables/dist/local/helpers/AdvancedFilterHelper.js
var AdvancedFilterHandler = class {
  constructor(filterHandler, filterBy) {
    __publicField(this, "filterHandler");
    __publicField(this, "criteria");
    __publicField(this, "filterBy");
    __publicField(this, "selected");
    this.filterHandler = filterHandler;
    this.filterBy = filterBy;
    this.criteria = [];
    this.selected = writable([]);
  }
  set(value, comparator = check.isLike) {
    if (this.criteria.find((criterion) => criterion.value === value)) {
      this.criteria = this.criteria.filter((criterion) => criterion.value !== value);
    } else {
      this.criteria = [{ value, comparator }, ...this.criteria];
    }
    if (this.criteria.length === 0) {
      return this.clear();
    }
    this.filterHandler.set(this.criteria, this.filterBy, check.whereIn);
    this.selected.set(this.criteria.map((criterion) => criterion.value));
  }
  getSelected() {
    return this.selected;
  }
  clear() {
    this.criteria = [];
    this.selected.set([]);
    this.filterHandler.set(void 0, this.filterBy, check.whereIn);
  }
};

// node_modules/@vincjo/datatables/dist/local/helpers/CalculationHelper.js
var CalcultationHandler = class {
  constructor(context, field, param) {
    __publicField(this, "rawRows");
    __publicField(this, "filteredRows");
    __publicField(this, "callback");
    __publicField(this, "precision");
    this.rawRows = context.rawRows;
    this.filteredRows = context.filteredRows;
    this.callback = parseField(field).callback;
    this.precision = param.precision;
  }
  distinct(callback = null) {
    const rawRows = get2(this.rawRows);
    const values = rawRows.map((row) => this.callback(row));
    const array = callback ? callback(values) : values;
    const result = array.reduce((acc, curr) => {
      acc[curr] = (acc[curr] ?? 0) + 1;
      return acc;
    }, {});
    return Object.entries(result).map(([value, count]) => ({ value, count }));
  }
  avg(callback = null) {
    return derived(this.filteredRows, ($filteredRows) => {
      if ($filteredRows.length === 0)
        return 0;
      const values = $filteredRows.map((row) => this.callback(row)).filter(Boolean);
      const array = callback ? callback(values) : values;
      return this.round(array.reduce((acc, curr) => acc + curr, 0) / array.length);
    });
  }
  sum(callback = null) {
    return derived(this.filteredRows, ($filteredRows) => {
      const values = $filteredRows.map((row) => this.callback(row));
      const array = callback ? callback(values) : values;
      return this.round(array.reduce((acc, curr) => acc + curr, 0));
    });
  }
  bounds(callback = null) {
    const rawRows = get2(this.rawRows);
    const values = rawRows.map((row) => this.callback(row));
    const numbers = callback ? callback(values) : values;
    return [
      Math.min(...numbers.filter(Boolean)),
      Math.max(...numbers.filter(Boolean))
    ];
  }
  setPrecision(value) {
    this.precision = value;
  }
  round(value) {
    if (this.precision === 0) {
      return Math.round(value);
    }
    const denominator = Math.pow(10, this.precision);
    return Math.round((value + Number.EPSILON) * denominator) / denominator;
  }
};

// node_modules/@vincjo/datatables/dist/local/DataHandler.js
var DataHandler = class {
  constructor(data = [], params = { rowsPerPage: null }) {
    __publicField(this, "context");
    __publicField(this, "sortHandler");
    __publicField(this, "selectHandler");
    __publicField(this, "pageHandler");
    __publicField(this, "searchHandler");
    __publicField(this, "filterHandler");
    __publicField(this, "i18n");
    this.i18n = this.translate(params.i18n);
    this.context = new Context(data, params);
    this.sortHandler = new SortHandler(this.context);
    this.selectHandler = new SelectHandler(this.context);
    this.pageHandler = new PageHandler(this.context);
    this.searchHandler = new SearchHandler(this.context);
    this.filterHandler = new FilterHandler(this.context);
  }
  setRows(data) {
    this.context.rawRows.set(data);
    this.context.event.trigger("change");
    this.applySort();
  }
  getRows() {
    return this.context.pagedRows;
  }
  getAllRows() {
    return this.context.filteredRows;
  }
  getRowCount() {
    return this.context.rowCount;
  }
  getRowsPerPage() {
    return this.context.rowsPerPage;
  }
  getPages(param = { ellipsis: false }) {
    if (param.ellipsis) {
      return this.context.pagesWithEllipsis;
    }
    return this.context.pages;
  }
  getPageCount() {
    return this.context.pageCount;
  }
  getPageNumber() {
    return this.context.pageNumber;
  }
  setPage(value) {
    switch (value) {
      case "previous":
        return this.pageHandler.previous();
      case "next":
        return this.pageHandler.next();
      default:
        return this.pageHandler.goto(value);
    }
  }
  search(value, scope = null) {
    this.searchHandler.set(value, scope);
  }
  clearSearch() {
    this.searchHandler.clear();
  }
  sort(orderBy, identifier) {
    this.setPage(1);
    this.sortHandler.set(orderBy, identifier);
  }
  sortAsc(orderBy, identifier) {
    this.setPage(1);
    this.sortHandler.asc(orderBy, identifier);
  }
  sortDesc(orderBy, identifier) {
    this.setPage(1);
    this.sortHandler.desc(orderBy, identifier);
  }
  getSort() {
    return this.context.sort;
  }
  applySort(params = null) {
    this.sortHandler.apply(params);
  }
  defineSort(orderBy, direction) {
    this.sortHandler.define(orderBy, direction);
  }
  clearSort() {
    this.sortHandler.clear();
  }
  filter(value, filterBy, comparator = null) {
    this.filterHandler.set(value, filterBy, comparator);
  }
  getFilters() {
    return this.filterHandler.get();
  }
  createFilter(filterBy, comparator) {
    return new FilterHelper(this.filterHandler, filterBy, comparator);
  }
  createAdvancedFilter(filterBy) {
    return new AdvancedFilterHandler(this.filterHandler, filterBy);
  }
  getFilterCount() {
    return this.context.filterCount;
  }
  clearFilters() {
    this.filterHandler.clear();
  }
  select(value) {
    this.selectHandler.set(value);
  }
  getSelected() {
    return this.context.selected;
  }
  selectAll(params = {}) {
    this.context.selectScope.set(params.scope === "currentPage" ? "currentPage" : "all");
    this.selectHandler.all(params.selectBy ?? null);
  }
  isAllSelected() {
    return this.context.isAllSelected;
  }
  on(event2, callback) {
    this.context.event.add(event2, callback);
  }
  createCalculation(field, param = null) {
    return new CalcultationHandler(this.context, field, { precision: (param == null ? void 0 : param.precision) ?? 2 });
  }
  translate(i18n) {
    return {
      ...{
        search: "Search...",
        show: "Show",
        entries: "entries",
        filter: "Filter",
        rowCount: "Showing {start} to {end} of {total} entries",
        noRows: "No entries found",
        previous: "Previous",
        next: "Next"
      },
      ...i18n
    };
  }
  /**
   * @deprecated use setRows() instead
   * @since v0.9.99 2023-01-16
   */
  update(data) {
    console.log("%c%s", "color:#e65100;background:#fff3e0;font-size:12px;border-radius:4px;padding:4px;text-align:center;", `DataHandler.update(data) method is deprecated. Please use DataHandler.setRows(data) instead`);
    this.context.rawRows.set(data);
  }
  /**
   * @deprecated use applySort() instead
   * @since v1.11.0 2023-07-11
   */
  applySorting(params = null) {
    this.applySort(params);
  }
  /**
   * @deprecated use getSort() instead
   * @since v1.11.0 2023-07-11
   */
  getSorted() {
    return this.getSort();
  }
  getTriggerChange() {
    return this.context.event.triggerChange;
  }
};

// node_modules/@vincjo/datatables/dist/local/Th.svelte
mark_module_start();
Th[FILENAME] = "node_modules/@vincjo/datatables/dist/local/Th.svelte";
var root = add_locations(template(`<th><div class="flex s-bdG1yHtLR9EB"><strong class="s-bdG1yHtLR9EB"><!></strong> <span class="s-bdG1yHtLR9EB"></span></div></th>`), Th[FILENAME], [
  [
    9,
    0,
    [
      [16, 4, [[20, 8], [23, 8]]]
    ]
  ]
]);
var $$css = {
  hash: "s-bdG1yHtLR9EB",
  code: "\r\n    th.s-bdG1yHtLR9EB {\r\n        background: inherit;\r\n        padding: 8px 20px;\r\n        white-space: nowrap;\r\n        font-size: 13px;\r\n        -webkit-user-select: none;\r\n           -moz-user-select: none;\r\n                user-select: none;\r\n        border-bottom: 1px solid #e0e0e0;\r\n    }\r\n    th.sortable.s-bdG1yHtLR9EB {\r\n        cursor: pointer;\r\n    }\r\n    th.s-bdG1yHtLR9EB strong:where(.s-bdG1yHtLR9EB) {\r\n        white-space: pre-wrap;\r\n        font-size: 13.5px;\r\n        line-height: 16px;\r\n    }\r\n    th.sortable.s-bdG1yHtLR9EB div.flex:where(.s-bdG1yHtLR9EB) {\r\n        padding: 0;\r\n        display: flex;\r\n        align-items: center;\r\n        height: 100%;\r\n    }\r\n    th.sortable.s-bdG1yHtLR9EB span:where(.s-bdG1yHtLR9EB) {\r\n        padding-left: 8px;\r\n    }\r\n    th.sortable.s-bdG1yHtLR9EB span:where(.s-bdG1yHtLR9EB):before,\r\n    th.sortable.s-bdG1yHtLR9EB span:where(.s-bdG1yHtLR9EB):after {\r\n        border: 4px solid transparent;\r\n        content: '';\r\n        display: block;\r\n        height: 0;\r\n        width: 0;\r\n    }\r\n    th.sortable.s-bdG1yHtLR9EB span:where(.s-bdG1yHtLR9EB):before {\r\n        border-bottom-color: #e0e0e0;\r\n        margin-top: 2px;\r\n    }\r\n    th.sortable.s-bdG1yHtLR9EB span:where(.s-bdG1yHtLR9EB):after {\r\n        border-top-color: #e0e0e0;\r\n        margin-top: 2px;\r\n    }\r\n    th.active.sortable.s-bdG1yHtLR9EB span.asc:where(.s-bdG1yHtLR9EB):before {\r\n        border-bottom-color: #9e9e9e;\r\n    }\r\n    th.active.sortable.s-bdG1yHtLR9EB span.desc:where(.s-bdG1yHtLR9EB):after {\r\n        border-top-color: #9e9e9e;\r\n    }\r\n    th.s-bdG1yHtLR9EB:not(.sortable:where(.s-bdG1yHtLR9EB)) span:where(.s-bdG1yHtLR9EB) {\r\n        visibility: hidden;\r\n    }\r\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGguc3ZlbHRlIiwibWFwcGluZ3MiOiJBQTBCTSIsIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiVGguc3ZlbHRlIl19 */"
};
function Th($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, Th);
  append_styles($$anchor, $$css);
  const $$stores = setup_stores();
  const $sort = () => (validate_store(sort, "sort"), store_get(sort, "$sort", $$stores));
  let handler = prop($$props, "handler", 8);
  let orderBy = prop($$props, "orderBy", 8);
  let identifier = prop($$props, "identifier", 24, () => {
    var _a;
    return (_a = orderBy()) == null ? void 0 : _a.toString();
  });
  let align = prop($$props, "align", 8, "left");
  let rowSpan = prop($$props, "rowSpan", 8, 1);
  const sort = handler().getSort();
  init();
  var th = root();
  var div = child(th);
  var strong = child(div);
  var node = child(strong);
  slot(node, $$props, "default", {}, null);
  reset(strong);
  var span = sibling(strong, 2);
  reset(div);
  reset(th);
  template_effect(() => {
    set_class(th, `${$$sanitized_props.class ?? "" ?? ""} s-bdG1yHtLR9EB`);
    set_attribute(th, "rowspan", rowSpan());
    toggle_class(th, "sortable", orderBy());
    toggle_class(th, "active", strict_equals($sort().identifier, identifier()));
    set_style(div, "justify-content", strict_equals(align(), "left") ? "flex-start" : strict_equals(align(), "right") ? "flex-end" : "center");
    toggle_class(span, "asc", strict_equals($sort().direction, "asc"));
    toggle_class(span, "desc", strict_equals($sort().direction, "desc"));
  });
  event("click", th, () => handler().sort(orderBy(), identifier()));
  append($$anchor, th);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Th = hmr(Th, () => Th[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-bdG1yHtLR9EB");
    module.default[HMR].source = Th[HMR].source;
    set(Th[HMR].source, module.default[HMR].original);
  });
}
var Th_default = Th;
mark_module_end(Th);

// node_modules/@vincjo/datatables/dist/local/ThFilter.svelte
mark_module_start();
ThFilter[FILENAME] = "node_modules/@vincjo/datatables/dist/local/ThFilter.svelte";
var root2 = add_locations(template(`<th><input type="text" spellcheck="false" class="s-NMJeT8ykmKUz"></th>`), ThFilter[FILENAME], [[9, 0, [[10, 4]]]]);
var $$css2 = {
  hash: "s-NMJeT8ykmKUz",
  code: "\r\n    th.s-NMJeT8ykmKUz {\r\n        border-bottom: 1px solid #e0e0e0;\r\n    }\r\n    input.s-NMJeT8ykmKUz {\r\n        width: 100%;\r\n        height: 24px;\r\n        border: none;\r\n        text-align: left;\r\n        padding: 0 20px;\r\n        background: inherit;\r\n        outline: none;\r\n        border-radius: 0;\r\n        font-size: 14px;\r\n        font-family: Arial, Helvetica, sans-serif;\r\n    }\r\n    input.s-NMJeT8ykmKUz::-moz-placeholder {\r\n        color: #bdbdbd;\r\n        font-style: italic;\r\n        font-size: 13px;\r\n    }\r\n    input.s-NMJeT8ykmKUz::placeholder {\r\n        color: #bdbdbd;\r\n        font-style: italic;\r\n        font-size: 13px;\r\n    }\r\n    input.s-NMJeT8ykmKUz:focus {\r\n        outline: none;\r\n        border: none;\r\n    }\r\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhGaWx0ZXIuc3ZlbHRlIiwibWFwcGluZ3MiOiJBQW1CTSIsIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiVGhGaWx0ZXIuc3ZlbHRlIl19 */"
};
function ThFilter($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, ThFilter);
  append_styles($$anchor, $$css2);
  let handler = prop($$props, "handler", 8);
  let filterBy = prop($$props, "filterBy", 8);
  let align = prop($$props, "align", 8, "left");
  let comparator = prop($$props, "comparator", 8, null);
  let value = mutable_state("");
  handler().on("clearFilters", () => set(value, ""));
  init();
  var th = root2();
  var input = child(th);
  remove_input_defaults(input);
  reset(th);
  template_effect(() => {
    set_class(th, `${$$sanitized_props.class ?? "" ?? ""} s-NMJeT8ykmKUz`);
    set_attribute(input, "placeholder", handler().i18n.filter);
    set_style(input, "text-align", align());
  });
  bind_value(input, () => get(value), ($$value) => set(value, $$value));
  event("input", input, () => handler().filter(get(value), filterBy(), comparator()));
  append($$anchor, th);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ThFilter = hmr(ThFilter, () => ThFilter[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-NMJeT8ykmKUz");
    module.default[HMR].source = ThFilter[HMR].source;
    set(ThFilter[HMR].source, module.default[HMR].original);
  });
}
var ThFilter_default = ThFilter;
mark_module_end(ThFilter);

// node_modules/@vincjo/datatables/dist/local/Pagination.svelte
mark_module_start();
Pagination[FILENAME] = "node_modules/@vincjo/datatables/dist/local/Pagination.svelte";
var root_1 = add_locations(template(`<button type="button" class="small s-WaqWgC4C_iaM">&#10092;&#10092;</button> <button type="button" class="s-WaqWgC4C_iaM">&#10094;</button> <button class="s-WaqWgC4C_iaM">&#10095;</button> <button class="small s-WaqWgC4C_iaM">&#10093;&#10093;</button>`, 1), Pagination[FILENAME], [
  [10, 8],
  [18, 8],
  [25, 8],
  [31, 8]
]);
var root_3 = add_locations(template(`<button type="button" class="s-WaqWgC4C_iaM"> </button>`), Pagination[FILENAME], [[47, 12]]);
var root_2 = add_locations(template(`<button type="button" class="s-WaqWgC4C_iaM"><!></button> <!> <button type="button" class="s-WaqWgC4C_iaM"><!></button>`, 1), Pagination[FILENAME], [[39, 8], [56, 8]]);
var root3 = add_locations(template(`<section><!></section>`), Pagination[FILENAME], [[8, 0]]);
var $$css3 = {
  hash: "s-WaqWgC4C_iaM",
  code: "\r\n    section.s-WaqWgC4C_iaM {\r\n        display: flex;\r\n    }\r\n    button.s-WaqWgC4C_iaM {\r\n        background: inherit;\r\n        height: 32px;\r\n        width: 32px;\r\n        color: #616161;\r\n        cursor: pointer;\r\n        font-size: 13px;\r\n        margin: 0;\r\n        padding: 0;\r\n        transition: all, 0.2s;\r\n        line-height: 32px;\r\n        border: 1px solid #e0e0e0;\r\n        border-right: none;\r\n        border-radius: 0;\r\n        outline: none;\r\n    }\r\n    button.s-WaqWgC4C_iaM:first-child {\r\n        border-radius: 4px 0 0 4px;\r\n    }\r\n    button.s-WaqWgC4C_iaM:last-child {\r\n        border-right: 1px solid #e0e0e0;\r\n        border-radius: 0 4px 4px 0;\r\n    }\r\n\r\n    button.s-WaqWgC4C_iaM:first-child:not(.small:where(.s-WaqWgC4C_iaM)),\r\n    button.s-WaqWgC4C_iaM:last-child:not(.small:where(.s-WaqWgC4C_iaM)) {\r\n        min-width: 72px;\r\n    }\r\n\r\n    button.s-WaqWgC4C_iaM:not(.active:where(.s-WaqWgC4C_iaM)):hover {\r\n        background: #eee;\r\n    }\r\n    button.ellipse.s-WaqWgC4C_iaM:hover {\r\n        background: inherit;\r\n        cursor: default;\r\n    }\r\n    button.active.s-WaqWgC4C_iaM {\r\n        background: #eee;\r\n        font-weight: bold;\r\n        cursor: default;\r\n    }\r\n    button.disabled.s-WaqWgC4C_iaM:hover {\r\n        background: inherit;\r\n        cursor: default;\r\n    }\r\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFnaW5hdGlvbi5zdmVsdGUiLCJtYXBwaW5ncyI6IkFBaUVNIiwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJQYWdpbmF0aW9uLnN2ZWx0ZSJdfQ== */"
};
function Pagination($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, Pagination);
  append_styles($$anchor, $$css3);
  const $$stores = setup_stores();
  const $pageNumber = () => (validate_store(pageNumber, "pageNumber"), store_get(pageNumber, "$pageNumber", $$stores));
  const $pageCount = () => (validate_store(pageCount, "pageCount"), store_get(pageCount, "$pageCount", $$stores));
  const $pages = () => (validate_store(pages, "pages"), store_get(pages, "$pages", $$stores));
  let handler = prop($$props, "handler", 8);
  let small = prop($$props, "small", 8, false);
  const pageNumber = handler().getPageNumber();
  const pageCount = handler().getPageCount();
  const pages = handler().getPages({ ellipsis: true });
  init();
  var section = root3();
  var node = child(section);
  if_block(
    node,
    small,
    ($$anchor2) => {
      var fragment = root_1();
      var button = first_child(fragment);
      var button_1 = sibling(button, 2);
      var button_2 = sibling(button_1, 2);
      var button_3 = sibling(button_2, 2);
      template_effect(() => {
        toggle_class(button, "disabled", strict_equals($pageNumber(), 1));
        toggle_class(button_1, "disabled", strict_equals($pageNumber(), 1));
        toggle_class(button_2, "disabled", strict_equals($pageNumber(), $pageCount()));
        toggle_class(button_3, "disabled", strict_equals($pageNumber(), $pageCount()));
      });
      event("click", button, () => handler().setPage(1));
      event("click", button_1, () => handler().setPage("previous"));
      event("click", button_2, () => handler().setPage("next"));
      event("click", button_3, () => handler().setPage($pageCount()));
      append($$anchor2, fragment);
    },
    ($$anchor2) => {
      var fragment_1 = root_2();
      var button_4 = first_child(fragment_1);
      var node_1 = child(button_4);
      html(node_1, () => handler().i18n.previous, false, false);
      reset(button_4);
      var node_2 = sibling(button_4, 2);
      each(node_2, 1, $pages, index, ($$anchor3, page) => {
        var button_5 = root_3();
        var text2 = child(button_5, true);
        reset(button_5);
        template_effect(() => {
          toggle_class(button_5, "active", strict_equals($pageNumber(), get(page)));
          toggle_class(button_5, "ellipse", strict_equals(get(page), null));
          set_text(text2, get(page) ?? "...");
        });
        event("click", button_5, () => handler().setPage(get(page)));
        append($$anchor3, button_5);
      });
      var button_6 = sibling(node_2, 2);
      var node_3 = child(button_6);
      html(node_3, () => handler().i18n.next, false, false);
      reset(button_6);
      template_effect(() => {
        toggle_class(button_4, "disabled", strict_equals($pageNumber(), 1));
        toggle_class(button_6, "disabled", strict_equals($pageNumber(), $pageCount()));
      });
      event("click", button_4, () => handler().setPage("previous"));
      event("click", button_6, () => handler().setPage("next"));
      append($$anchor2, fragment_1);
    }
  );
  reset(section);
  template_effect(() => set_class(section, `${$$sanitized_props.class ?? "" ?? ""} s-WaqWgC4C_iaM`));
  append($$anchor, section);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pagination = hmr(Pagination, () => Pagination[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-WaqWgC4C_iaM");
    module.default[HMR].source = Pagination[HMR].source;
    set(Pagination[HMR].source, module.default[HMR].original);
  });
}
var Pagination_default = Pagination;
mark_module_end(Pagination);

// node_modules/@vincjo/datatables/dist/local/RowCount.svelte
mark_module_start();
RowCount[FILENAME] = "node_modules/@vincjo/datatables/dist/local/RowCount.svelte";
var root_22 = add_locations(template(`<b> </b>- <b> </b>/ <b> </b>`, 1), RowCount[FILENAME], [[9, 12], [10, 12], [11, 12]]);
var root4 = add_locations(template(`<aside><!></aside>`), RowCount[FILENAME], [[6, 0]]);
var $$css4 = {
  hash: "s-TbowLaJKGiCB",
  code: "\r\n    aside.s-TbowLaJKGiCB {\r\n        color: #616161;\r\n        line-height: 32px;\r\n        font-size: 14px;\r\n    }\r\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUm93Q291bnQuc3ZlbHRlIiwibWFwcGluZ3MiOiJBQXdCTSIsIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiUm93Q291bnQuc3ZlbHRlIl19 */"
};
function RowCount($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, RowCount);
  append_styles($$anchor, $$css4);
  const $$stores = setup_stores();
  const $rowCount = () => (validate_store(rowCount, "rowCount"), store_get(rowCount, "$rowCount", $$stores));
  let handler = prop($$props, "handler", 8);
  let small = prop($$props, "small", 8, false);
  const rowCount = handler().getRowCount();
  init();
  var aside = root4();
  var node = child(aside);
  if_block(
    node,
    small,
    ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      if_block(
        node_1,
        () => $rowCount().total > 0,
        ($$anchor3) => {
          var fragment_1 = root_22();
          var b = first_child(fragment_1);
          var text2 = child(b, true);
          reset(b);
          var b_1 = sibling(b, 2);
          var text_1 = child(b_1, true);
          reset(b_1);
          var b_2 = sibling(b_1, 2);
          var text_2 = child(b_2, true);
          reset(b_2);
          template_effect(() => {
            set_text(text2, $rowCount().start);
            set_text(text_1, $rowCount().end);
            set_text(text_2, $rowCount().total);
          });
          append($$anchor3, fragment_1);
        },
        ($$anchor3) => {
          var text_3 = text();
          template_effect(() => set_text(text_3, handler().i18n.noRows));
          append($$anchor3, text_3);
        }
      );
      append($$anchor2, fragment);
    },
    ($$anchor2) => {
      var fragment_3 = comment();
      var node_2 = first_child(fragment_3);
      if_block(
        node_2,
        () => $rowCount().total > 0,
        ($$anchor3) => {
          var fragment_4 = comment();
          var node_3 = first_child(fragment_4);
          html(node_3, () => handler().i18n.rowCount.replace("{start}", `<b>${$rowCount().start}</b>`).replace("{end}", `<b>${$rowCount().end}</b>`).replace("{total}", `<b>${$rowCount().total}</b>`), false, false);
          append($$anchor3, fragment_4);
        },
        ($$anchor3) => {
          var text_4 = text();
          template_effect(() => set_text(text_4, handler().i18n.noRows));
          append($$anchor3, text_4);
        },
        true
      );
      append($$anchor2, fragment_3);
    }
  );
  reset(aside);
  template_effect(() => set_class(aside, `${$$sanitized_props.class ?? "" ?? ""} s-TbowLaJKGiCB`));
  append($$anchor, aside);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RowCount = hmr(RowCount, () => RowCount[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-TbowLaJKGiCB");
    module.default[HMR].source = RowCount[HMR].source;
    set(RowCount[HMR].source, module.default[HMR].original);
  });
}
var RowCount_default = RowCount;
mark_module_end(RowCount);

// node_modules/@vincjo/datatables/dist/local/RowsPerPage.svelte
mark_module_start();
RowsPerPage[FILENAME] = "node_modules/@vincjo/datatables/dist/local/RowsPerPage.svelte";
var root_12 = add_locations(template(`<span> </span>`), RowsPerPage[FILENAME], [[9, 8]]);
var root_23 = add_locations(template(`<option> </option>`), RowsPerPage[FILENAME], [[13, 12]]);
var root_32 = add_locations(template(`<span> </span>`), RowsPerPage[FILENAME], [[19, 8]]);
var root5 = add_locations(template(`<aside><!> <select class="s-BvTosMgbeiuu"></select> <!></aside>`), RowsPerPage[FILENAME], [[7, 0, [[11, 4]]]]);
var $$css5 = {
  hash: "s-BvTosMgbeiuu",
  code: "\r\n    aside.s-BvTosMgbeiuu {\r\n        display: flex;\r\n        justify-content: flex-start;\r\n        align-items: center;\r\n        height: 32px;\r\n        color: #757575;\r\n    }\r\n    select.s-BvTosMgbeiuu {\r\n        margin: 0 4px;\r\n    }\r\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUm93c1BlclBhZ2Uuc3ZlbHRlIiwibWFwcGluZ3MiOiJBQXNCTSIsIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiUm93c1BlclBhZ2Uuc3ZlbHRlIl19 */"
};
function RowsPerPage($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, RowsPerPage);
  append_styles($$anchor, $$css5);
  const $$stores = setup_stores();
  const $rowsPerPage = () => (validate_store(rowsPerPage, "rowsPerPage"), store_get(rowsPerPage, "$rowsPerPage", $$stores));
  let handler = prop($$props, "handler", 8);
  let small = prop($$props, "small", 8, false);
  const rowsPerPage = handler().getRowsPerPage();
  const options = [5, 10, 20, 50, 100];
  init();
  var aside = root5();
  var node = child(aside);
  if_block(node, () => !small(), ($$anchor2) => {
    var span = root_12();
    var text2 = child(span, true);
    reset(span);
    template_effect(() => set_text(text2, handler().i18n.show));
    append($$anchor2, span);
  });
  var select = sibling(node, 2);
  template_effect(() => {
    $rowsPerPage();
    invalidate_inner_signals(() => {
      handler();
      options;
    });
  });
  each(select, 5, () => options, index, ($$anchor2, option) => {
    var option_1 = root_23();
    var option_1_value = {};
    var text_1 = child(option_1, true);
    reset(option_1);
    template_effect(() => {
      if (option_1_value !== (option_1_value = get(option))) {
        option_1.value = null == (option_1.__value = get(option)) ? "" : get(option);
      }
      set_text(text_1, get(option));
    });
    append($$anchor2, option_1);
  });
  reset(select);
  var node_1 = sibling(select, 2);
  if_block(node_1, () => !small(), ($$anchor2) => {
    var span_1 = root_32();
    var text_2 = child(span_1, true);
    reset(span_1);
    template_effect(() => set_text(text_2, handler().i18n.entries));
    append($$anchor2, span_1);
  });
  reset(aside);
  template_effect(() => set_class(aside, `${$$sanitized_props.class ?? "" ?? ""} s-BvTosMgbeiuu`));
  bind_select_value(select, $rowsPerPage, ($$value) => store_set(rowsPerPage, $$value));
  event("change", select, () => handler().setPage(1));
  append($$anchor, aside);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RowsPerPage = hmr(RowsPerPage, () => RowsPerPage[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-BvTosMgbeiuu");
    module.default[HMR].source = RowsPerPage[HMR].source;
    set(RowsPerPage[HMR].source, module.default[HMR].original);
  });
}
var RowsPerPage_default = RowsPerPage;
mark_module_end(RowsPerPage);

// node_modules/@vincjo/datatables/dist/local/Search.svelte
mark_module_start();
Search[FILENAME] = "node_modules/@vincjo/datatables/dist/local/Search.svelte";
var root6 = add_locations(template(`<input spellcheck="false">`), Search[FILENAME], [[6, 0]]);
var $$css6 = {
  hash: "s-QNZQ2PlGb9VS",
  code: "\r\n    input.s-QNZQ2PlGb9VS {\r\n        border: 1px solid #e0e0e0;\r\n        border-radius: 4px;\r\n        outline: none;\r\n        padding: 0 8px;\r\n        line-height: 24px;\r\n        margin: 0;\r\n        height: 24px;\r\n        background: transparent;\r\n        width: 40%;\r\n        max-width: 176px;\r\n        min-width: 96px;\r\n        transition: all, 0.1s;\r\n    }\r\n    input.s-QNZQ2PlGb9VS:focus {\r\n        border: 1px solid #bdbdbd;\r\n    }\r\n    input.s-QNZQ2PlGb9VS::-moz-placeholder {\r\n        color: #9e9e9e;\r\n        line-height: 24px;\r\n    }\r\n    input.s-QNZQ2PlGb9VS::placeholder {\r\n        color: #9e9e9e;\r\n        line-height: 24px;\r\n    }\r\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VhcmNoLnN2ZWx0ZSIsIm1hcHBpbmdzIjoiQUFhTSIsIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiU2VhcmNoLnN2ZWx0ZSJdfQ== */"
};
function Search($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, Search);
  append_styles($$anchor, $$css6);
  let handler = prop($$props, "handler", 8);
  let value = mutable_state("");
  handler().on("clearSearch", () => set(value, ""));
  init();
  var input = root6();
  remove_input_defaults(input);
  template_effect(() => {
    set_class(input, `${$$sanitized_props.class ?? "" ?? ""} s-QNZQ2PlGb9VS`);
    set_attribute(input, "placeholder", handler().i18n.search);
  });
  bind_value(input, () => get(value), ($$value) => set(value, $$value));
  event("input", input, () => handler().search(get(value)));
  append($$anchor, input);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Search = hmr(Search, () => Search[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-QNZQ2PlGb9VS");
    module.default[HMR].source = Search[HMR].source;
    set(Search[HMR].source, module.default[HMR].original);
  });
}
var Search_default = Search;
mark_module_end(Search);

// node_modules/@vincjo/datatables/dist/local/Datatable.svelte
mark_module_start();
Datatable[FILENAME] = "node_modules/@vincjo/datatables/dist/local/Datatable.svelte";
var root7 = add_locations(template(`<section><header class="s-G36BSh6y0Xaf"><!> <!></header> <article class="s-G36BSh6y0Xaf"><!></article> <footer class="s-G36BSh6y0Xaf"><!> <!></footer></section>`), Datatable[FILENAME], [
  [
    16,
    0,
    [[17, 4], [26, 4], [30, 4]]
  ]
]);
var $$css7 = {
  hash: "s-G36BSh6y0Xaf",
  code: "\r\n    section.s-G36BSh6y0Xaf {\r\n        height: 100%;\r\n    }\r\n\r\n    section.s-G36BSh6y0Xaf table {\r\n        border-collapse: separate;\r\n        border-spacing: 0;\r\n        width: 100%;\r\n    }\r\n\r\n    section.s-G36BSh6y0Xaf thead {\r\n        position: sticky;\r\n        inset-block-start: 0;\r\n        z-index: 1;\r\n    }\r\n\r\n    header.s-G36BSh6y0Xaf,\r\n    footer.s-G36BSh6y0Xaf {\r\n        min-height: 8px;\r\n        padding: 0 16px;\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n    }\r\n    header.container.s-G36BSh6y0Xaf,\r\n    footer.container.s-G36BSh6y0Xaf {\r\n        height: 48px;\r\n    }\r\n    footer.s-G36BSh6y0Xaf {\r\n        border-top: 1px solid #e0e0e0;\r\n    }\r\n\r\n    article.s-G36BSh6y0Xaf {\r\n        position: relative;\r\n        /* height:calc(100% - 96px); */\r\n        overflow: auto;\r\n        scrollbar-width: thin;\r\n    }\r\n\r\n    article.s-G36BSh6y0Xaf::-webkit-scrollbar {\r\n        width: 6px;\r\n        height: 6px;\r\n    }\r\n    article.s-G36BSh6y0Xaf::-webkit-scrollbar-track {\r\n        background: #f5f5f5;\r\n    }\r\n    article.s-G36BSh6y0Xaf::-webkit-scrollbar-thumb {\r\n        background: #c2c2c2;\r\n    }\r\n    article.s-G36BSh6y0Xaf::-webkit-scrollbar-thumb:hover {\r\n        background: #9e9e9e;\r\n    }\r\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0YXRhYmxlLnN2ZWx0ZSIsIm1hcHBpbmdzIjoiQUF1Q00iLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbIkRhdGF0YWJsZS5zdmVsdGUiXX0= */"
};
function Datatable($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, Datatable);
  append_styles($$anchor, $$css7);
  let handler = prop($$props, "handler", 8);
  let search = prop($$props, "search", 8, true);
  let rowsPerPage = prop($$props, "rowsPerPage", 8, true);
  let rowCount = prop($$props, "rowCount", 8, true);
  let pagination = prop($$props, "pagination", 8, true);
  let element = mutable_state();
  let clientWidth = mutable_state(1e3);
  const height = (search() || rowsPerPage() ? 48 : 8) + (rowCount() || pagination() ? 48 : 8);
  handler().on("change", () => {
    if (get(element)) mutate(element, get(element).scrollTop = 0);
  });
  init();
  var section = root7();
  var header = child(section);
  var node = child(header);
  if_block(node, search, ($$anchor2) => {
    var fragment = comment();
    var node_1 = first_child(fragment);
    Search_default(node_1, {
      get handler() {
        return handler();
      }
    });
    append($$anchor2, fragment);
  });
  var node_2 = sibling(node, 2);
  if_block(node_2, rowsPerPage, ($$anchor2) => {
    var fragment_1 = comment();
    var node_3 = first_child(fragment_1);
    var small = derived_safe_equal(() => get(clientWidth) < 600);
    RowsPerPage_default(node_3, {
      get handler() {
        return handler();
      },
      get small() {
        return get(small);
      }
    });
    append($$anchor2, fragment_1);
  });
  reset(header);
  var article = sibling(header, 2);
  set_attribute(article, "style", `height:calc(100% - ${height ?? ""}px)`);
  var node_4 = child(article);
  slot(node_4, $$props, "default", {}, null);
  reset(article);
  bind_this(article, ($$value) => set(element, $$value), () => get(element));
  var footer = sibling(article, 2);
  var node_5 = child(footer);
  if_block(node_5, rowCount, ($$anchor2) => {
    var fragment_2 = comment();
    var node_6 = first_child(fragment_2);
    var small_1 = derived_safe_equal(() => get(clientWidth) < 600);
    RowCount_default(node_6, {
      get handler() {
        return handler();
      },
      get small() {
        return get(small_1);
      }
    });
    append($$anchor2, fragment_2);
  });
  var node_7 = sibling(node_5, 2);
  if_block(node_7, pagination, ($$anchor2) => {
    var fragment_3 = comment();
    var node_8 = first_child(fragment_3);
    var small_2 = derived_safe_equal(() => get(clientWidth) < 600);
    Pagination_default(node_8, {
      get handler() {
        return handler();
      },
      get small() {
        return get(small_2);
      }
    });
    append($$anchor2, fragment_3);
  });
  reset(footer);
  reset(section);
  template_effect(() => {
    set_class(section, `${$$sanitized_props.class ?? "" ?? ""} s-G36BSh6y0Xaf`);
    toggle_class(header, "container", search() || rowsPerPage());
    toggle_class(footer, "container", rowCount() || pagination());
  });
  bind_element_size(section, "clientWidth", ($$value) => set(clientWidth, $$value));
  append($$anchor, section);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Datatable = hmr(Datatable, () => Datatable[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-G36BSh6y0Xaf");
    module.default[HMR].source = Datatable[HMR].source;
    set(Datatable[HMR].source, module.default[HMR].original);
  });
}
var Datatable_default = Datatable;
mark_module_end(Datatable);
export {
  DataHandler,
  Datatable_default as Datatable,
  Pagination_default as Pagination,
  RowCount_default as RowCount,
  RowsPerPage_default as RowsPerPage,
  Search_default as Search,
  Th_default as Th,
  ThFilter_default as ThFilter,
  check
};
//# sourceMappingURL=@vincjo_datatables.js.map
