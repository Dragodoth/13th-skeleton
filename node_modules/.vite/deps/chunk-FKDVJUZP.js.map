{
  "version": 3,
  "sources": ["../../esrap/src/handlers.js", "../../esrap/src/index.js"],
  "sourcesContent": ["/** @type {import('./types').Newline} */\nconst newline = { type: 'Newline' };\n\n/** @type {import('./types').Indent} */\nconst indent = { type: 'Indent' };\n\n/** @type {import('./types').Dedent} */\nconst dedent = { type: 'Dedent' };\n\n/**\n * @param {import('./types').Command[]} children\n * @returns {import('./types').Sequence}\n */\nfunction create_sequence(...children) {\n\treturn { type: 'Sequence', children };\n}\n\n/**\n * Rough estimate of the combined width of a group of commands\n * @param {import('./types').Command[]} commands\n * @param {number} from\n * @param {number} to\n */\nfunction measure(commands, from, to = commands.length) {\n\tlet total = 0;\n\tfor (let i = from; i < to; i += 1) {\n\t\tconst command = commands[i];\n\t\tif (typeof command === 'string') {\n\t\t\ttotal += command.length;\n\t\t} else if (command.type === 'Chunk') {\n\t\t\ttotal += command.content.length;\n\t\t} else if (command.type === 'Sequence') {\n\t\t\t// assume this is ', '\n\t\t\ttotal += 2;\n\t\t}\n\t}\n\n\treturn total;\n}\n\n/**\n * @param {import('estree').Node} node\n * @param {import('./types').State} state\n */\nexport function handle(node, state) {\n\tconst handler = handlers[node.type];\n\n\tif (!handler) {\n\t\tthrow new Error(`Not implemented ${node.type}`);\n\t}\n\n\tif (node.leadingComments) {\n\t\tprepend_comments(node.leadingComments, state, false);\n\t}\n\n\t// @ts-expect-error\n\thandler(node, state);\n\n\tif (node.trailingComments) {\n\t\tstate.comments.push(node.trailingComments[0]); // there is only ever one\n\t}\n}\n\n/**\n * @param {string} content\n * @param {import('estree').Node} node\n * @returns {import('./types').Chunk}\n */\nfunction c(content, node) {\n\treturn {\n\t\ttype: 'Chunk',\n\t\tcontent,\n\t\tloc: node?.loc ?? null\n\t};\n}\n\n/**\n * @param {import('estree').Comment[]} comments\n * @param {import('./types').State} state\n * @param {boolean} newlines\n */\nfunction prepend_comments(comments, state, newlines) {\n\tfor (const comment of comments) {\n\t\tstate.commands.push({ type: 'Comment', comment });\n\n\t\tif (newlines || comment.type === 'Line' || /\\n/.test(comment.value)) {\n\t\t\tstate.commands.push(newline);\n\t\t} else {\n\t\t\tstate.commands.push(' ');\n\t\t}\n\t}\n}\n\nconst OPERATOR_PRECEDENCE = {\n\t'||': 2,\n\t'&&': 3,\n\t'??': 4,\n\t'|': 5,\n\t'^': 6,\n\t'&': 7,\n\t'==': 8,\n\t'!=': 8,\n\t'===': 8,\n\t'!==': 8,\n\t'<': 9,\n\t'>': 9,\n\t'<=': 9,\n\t'>=': 9,\n\tin: 9,\n\tinstanceof: 9,\n\t'<<': 10,\n\t'>>': 10,\n\t'>>>': 10,\n\t'+': 11,\n\t'-': 11,\n\t'*': 12,\n\t'%': 12,\n\t'/': 12,\n\t'**': 13\n};\n\n/** @type {Record<import('estree').Expression['type'] | 'Super' | 'RestElement', number>} */\nconst EXPRESSIONS_PRECEDENCE = {\n\tArrayExpression: 20,\n\tTaggedTemplateExpression: 20,\n\tThisExpression: 20,\n\tIdentifier: 20,\n\tLiteral: 18,\n\tTemplateLiteral: 20,\n\tSuper: 20,\n\tSequenceExpression: 20,\n\tMemberExpression: 19,\n\tMetaProperty: 19,\n\tCallExpression: 19,\n\tChainExpression: 19,\n\tImportExpression: 19,\n\tNewExpression: 19,\n\tAwaitExpression: 17,\n\tClassExpression: 17,\n\tFunctionExpression: 17,\n\tObjectExpression: 17,\n\tUpdateExpression: 16,\n\tUnaryExpression: 15,\n\tBinaryExpression: 14,\n\tLogicalExpression: 13,\n\tConditionalExpression: 4,\n\tArrowFunctionExpression: 3,\n\tAssignmentExpression: 3,\n\tYieldExpression: 2,\n\tRestElement: 1\n};\n\n/**\n *\n * @param {import('estree').Expression} node\n * @param {import('estree').BinaryExpression | import('estree').LogicalExpression} parent\n * @param {boolean} is_right\n * @returns\n */\nfunction needs_parens(node, parent, is_right) {\n\t// special case where logical expressions and coalesce expressions cannot be mixed,\n\t// either of them need to be wrapped with parentheses\n\tif (\n\t\tnode.type === 'LogicalExpression' &&\n\t\tparent.type === 'LogicalExpression' &&\n\t\t((parent.operator === '??' && node.operator !== '??') ||\n\t\t\t(parent.operator !== '??' && node.operator === '??'))\n\t) {\n\t\treturn true;\n\t}\n\n\tconst precedence = EXPRESSIONS_PRECEDENCE[node.type];\n\tconst parent_precedence = EXPRESSIONS_PRECEDENCE[parent.type];\n\n\tif (precedence !== parent_precedence) {\n\t\t// Different node types\n\t\treturn (\n\t\t\t(!is_right && precedence === 15 && parent_precedence === 14 && parent.operator === '**') ||\n\t\t\tprecedence < parent_precedence\n\t\t);\n\t}\n\n\tif (precedence !== 13 && precedence !== 14) {\n\t\t// Not a `LogicalExpression` or `BinaryExpression`\n\t\treturn false;\n\t}\n\n\tif (\n\t\t/** @type {import('estree').BinaryExpression} */ (node).operator === '**' &&\n\t\tparent.operator === '**'\n\t) {\n\t\t// Exponentiation operator has right-to-left associativity\n\t\treturn !is_right;\n\t}\n\n\tif (is_right) {\n\t\t// Parenthesis are used if both operators have the same precedence\n\t\treturn (\n\t\t\tOPERATOR_PRECEDENCE[/** @type {import('estree').BinaryExpression} */ (node).operator] <=\n\t\t\tOPERATOR_PRECEDENCE[parent.operator]\n\t\t);\n\t}\n\n\treturn (\n\t\tOPERATOR_PRECEDENCE[/** @type {import('estree').BinaryExpression} */ (node).operator] <\n\t\tOPERATOR_PRECEDENCE[parent.operator]\n\t);\n}\n\n/** @param {import('estree').Node} node */\nfunction has_call_expression(node) {\n\twhile (node) {\n\t\tif (node.type === 'CallExpression') {\n\t\t\treturn true;\n\t\t} else if (node.type === 'MemberExpression') {\n\t\t\tnode = node.object;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\nconst grouped_expression_types = [\n\t'ImportDeclaration',\n\t'VariableDeclaration',\n\t'ExportDefaultDeclaration',\n\t'ExportNamedDeclaration'\n];\n\n/**\n * @param {import('estree').Node[]} nodes\n * @param {import('./types').State} state\n */\nconst handle_body = (nodes, state) => {\n\tlet last_statement = /** @type {import('estree').Node} */ ({ type: 'EmptyStatement' });\n\tlet first = true;\n\tlet needs_margin = false;\n\n\tfor (const statement of nodes) {\n\t\tif (statement.type === 'EmptyStatement') continue;\n\n\t\tconst margin = create_sequence();\n\n\t\tif (!first) state.commands.push(margin, newline);\n\t\tfirst = false;\n\n\t\tconst leadingComments = statement.leadingComments;\n\t\tdelete statement.leadingComments;\n\n\t\tif (leadingComments && leadingComments.length > 0) {\n\t\t\tprepend_comments(leadingComments, state, true);\n\t\t}\n\n\t\tconst child_state = { ...state, multiline: false };\n\t\thandle(statement, child_state);\n\n\t\tif (\n\t\t\tchild_state.multiline ||\n\t\t\tneeds_margin ||\n\t\t\t((grouped_expression_types.includes(statement.type) ||\n\t\t\t\tgrouped_expression_types.includes(last_statement.type)) &&\n\t\t\t\tlast_statement.type !== statement.type)\n\t\t) {\n\t\t\tmargin.children.push('\\n');\n\t\t}\n\n\t\tlet add_newline = false;\n\n\t\twhile (state.comments.length) {\n\t\t\tconst comment = /** @type {import('estree').Comment} */ (state.comments.shift());\n\n\t\t\tstate.commands.push(add_newline ? newline : ' ', { type: 'Comment', comment });\n\t\t\tadd_newline = comment.type === 'Line';\n\t\t}\n\n\t\tneeds_margin = child_state.multiline;\n\t\tlast_statement = statement;\n\t}\n};\n\n/**\n * @param {import('estree').VariableDeclaration} node\n * @param {import('./types').State} state\n */\nconst handle_var_declaration = (node, state) => {\n\tconst index = state.commands.length;\n\n\tconst open = create_sequence();\n\tconst join = create_sequence();\n\tconst child_state = { ...state, multiline: false };\n\n\tstate.commands.push(`${node.kind} `, open);\n\n\tlet first = true;\n\n\tfor (const d of node.declarations) {\n\t\tif (!first) state.commands.push(join);\n\t\tfirst = false;\n\n\t\thandle(d, child_state);\n\t}\n\n\tconst multiline =\n\t\tchild_state.multiline || (node.declarations.length > 1 && measure(state.commands, index) > 50);\n\n\tif (multiline) {\n\t\tstate.multiline = true;\n\t\tif (node.declarations.length > 1) open.children.push(indent);\n\t\tjoin.children.push(',', newline);\n\t\tif (node.declarations.length > 1) state.commands.push(dedent);\n\t} else {\n\t\tjoin.children.push(', ');\n\t}\n};\n\n/**\n * @template {import('estree').Node} T\n * @param {Array<T | null>} nodes\n * @param {import('./types').State} state\n * @param {boolean} spaces\n * @param {(node: T, state: import('./types').State) => void} fn\n */\nfunction sequence(nodes, state, spaces, fn) {\n\tif (nodes.length === 0) return;\n\n\tconst index = state.commands.length;\n\n\tconst open = create_sequence();\n\tconst join = create_sequence();\n\tconst close = create_sequence();\n\n\tstate.commands.push(open);\n\n\tconst child_state = { ...state, multiline: false };\n\n\tlet prev;\n\n\tfor (let i = 0; i < nodes.length; i += 1) {\n\t\tconst node = nodes[i];\n\t\tconst is_first = i === 0;\n\t\tconst is_last = i === nodes.length - 1;\n\n\t\tif (node) {\n\t\t\tif (!is_first && !prev) {\n\t\t\t\tstate.commands.push(join);\n\t\t\t}\n\n\t\t\tfn(node, child_state);\n\n\t\t\tif (!is_last) {\n\t\t\t\tstate.commands.push(',');\n\t\t\t}\n\n\t\t\tif (state.comments.length > 0) {\n\t\t\t\tstate.commands.push(' ');\n\n\t\t\t\twhile (state.comments.length) {\n\t\t\t\t\tconst comment = /** @type {import('estree').Comment} */ (state.comments.shift());\n\t\t\t\t\tstate.commands.push({ type: 'Comment', comment });\n\t\t\t\t\tif (!is_last) state.commands.push(join);\n\t\t\t\t}\n\n\t\t\t\tchild_state.multiline = true;\n\t\t\t} else {\n\t\t\t\tif (!is_last) state.commands.push(join);\n\t\t\t}\n\t\t} else {\n\t\t\t// This is only used for ArrayPattern and ArrayExpression, but\n\t\t\t// it makes more sense to have the logic here than there, because\n\t\t\t// otherwise we'd duplicate a lot more stuff\n\t\t\tstate.commands.push(',');\n\t\t}\n\n\t\tprev = node;\n\t}\n\n\tstate.commands.push(close);\n\n\tconst multiline = child_state.multiline || measure(state.commands, index) > 50;\n\n\tif (multiline) {\n\t\tstate.multiline = true;\n\n\t\topen.children.push(indent, newline);\n\t\tjoin.children.push(newline);\n\t\tclose.children.push(dedent, newline);\n\t} else {\n\t\tif (spaces) open.children.push(' ');\n\t\tjoin.children.push(' ');\n\t\tif (spaces) close.children.push(' ');\n\t}\n}\n\n/** @satisfies {Record<string, (node: any, state: import('./types').State) => undefined>} */\nconst shared = {\n\t/**\n\t * @param {import('estree').ArrayExpression | import('estree').ArrayPattern} node\n\t * @param {import('./types').State} state\n\t */\n\t'ArrayExpression|ArrayPattern': (node, state) => {\n\t\tstate.commands.push('[');\n\t\tsequence(/** @type {import('estree').Node[]} */ (node.elements), state, false, handle);\n\t\tstate.commands.push(']');\n\t},\n\n\t/**\n\t * @param {import('estree').BinaryExpression | import('estree').LogicalExpression} node\n\t * @param {import('./types').State} state\n\t */\n\t'BinaryExpression|LogicalExpression': (node, state) => {\n\t\t// TODO\n\t\t// const is_in = node.operator === 'in';\n\t\t// if (is_in) {\n\t\t// \t// Avoids confusion in `for` loops initializers\n\t\t// \tchunks.push(c('('));\n\t\t// }\n\n\t\tif (needs_parens(node.left, node, false)) {\n\t\t\tstate.commands.push('(');\n\t\t\thandle(node.left, state);\n\t\t\tstate.commands.push(')');\n\t\t} else {\n\t\t\thandle(node.left, state);\n\t\t}\n\n\t\tstate.commands.push(` ${node.operator} `);\n\n\t\tif (needs_parens(node.right, node, true)) {\n\t\t\tstate.commands.push('(');\n\t\t\thandle(node.right, state);\n\t\t\tstate.commands.push(')');\n\t\t} else {\n\t\t\thandle(node.right, state);\n\t\t}\n\t},\n\n\t/**\n\t * @param {import('estree').BlockStatement | import('estree').ClassBody} node\n\t * @param {import('./types').State} state\n\t */\n\t'BlockStatement|ClassBody': (node, state) => {\n\t\tif (node.body.length === 0) {\n\t\t\tstate.commands.push('{}');\n\t\t\treturn;\n\t\t}\n\n\t\tstate.multiline = true;\n\n\t\tstate.commands.push('{', indent, newline);\n\t\thandle_body(node.body, state);\n\t\tstate.commands.push(dedent, newline, '}');\n\t},\n\n\t/**\n\t * @param {import('estree').CallExpression | import('estree').NewExpression} node\n\t * @param {import('./types').State} state\n\t */\n\t'CallExpression|NewExpression': (node, state) => {\n\t\tconst index = state.commands.length;\n\n\t\tif (node.type === 'NewExpression') {\n\t\t\tstate.commands.push('new ');\n\t\t}\n\n\t\tconst needs_parens =\n\t\t\tEXPRESSIONS_PRECEDENCE[node.callee.type] < EXPRESSIONS_PRECEDENCE.CallExpression ||\n\t\t\t(node.type === 'NewExpression' && has_call_expression(node.callee));\n\n\t\tif (needs_parens) {\n\t\t\tstate.commands.push('(');\n\t\t\thandle(node.callee, state);\n\t\t\tstate.commands.push(')');\n\t\t} else {\n\t\t\thandle(node.callee, state);\n\t\t}\n\n\t\tif (/** @type {import('estree').SimpleCallExpression} */ (node).optional) {\n\t\t\tstate.commands.push('?.');\n\t\t}\n\n\t\tconst open = create_sequence();\n\t\tconst join = create_sequence();\n\t\tconst close = create_sequence();\n\n\t\tstate.commands.push('(', open);\n\n\t\t// if the final argument is multiline, it doesn't need to force all the\n\t\t// other arguments to also be multiline\n\t\tconst child_state = { ...state, multiline: false };\n\t\tconst final_state = { ...state, multiline: false };\n\n\t\tfor (let i = 0; i < node.arguments.length; i += 1) {\n\t\t\tif (i > 0) {\n\t\t\t\tif (state.comments.length > 0) {\n\t\t\t\t\tstate.commands.push(', ');\n\n\t\t\t\t\twhile (state.comments.length) {\n\t\t\t\t\t\tconst comment = /** @type {import('estree').Comment} */ (state.comments.shift());\n\n\t\t\t\t\t\tstate.commands.push({ type: 'Comment', comment });\n\n\t\t\t\t\t\tif (comment.type === 'Line') {\n\t\t\t\t\t\t\tchild_state.multiline = true;\n\t\t\t\t\t\t\tstate.commands.push(newline);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstate.commands.push(' ');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstate.commands.push(join);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst p = node.arguments[i];\n\n\t\t\thandle(p, i === node.arguments.length - 1 ? final_state : child_state);\n\t\t}\n\n\t\tstate.commands.push(close, ')');\n\n\t\tconst multiline = child_state.multiline;\n\n\t\tif (multiline || final_state.multiline) {\n\t\t\tstate.multiline = true;\n\t\t}\n\n\t\tif (multiline) {\n\t\t\topen.children.push(indent, newline);\n\t\t\tjoin.children.push(',', newline);\n\t\t\tclose.children.push(dedent, newline);\n\t\t} else {\n\t\t\tjoin.children.push(', ');\n\t\t}\n\t},\n\n\t/**\n\t * @param {import('estree').ClassDeclaration | import('estree').ClassExpression} node\n\t * @param {import('./types').State} state\n\t */\n\t'ClassDeclaration|ClassExpression': (node, state) => {\n\t\tstate.commands.push('class ');\n\n\t\tif (node.id) {\n\t\t\thandle(node.id, state);\n\t\t\tstate.commands.push(' ');\n\t\t}\n\n\t\tif (node.superClass) {\n\t\t\tstate.commands.push('extends ');\n\t\t\thandle(node.superClass, state);\n\t\t\tstate.commands.push(' ');\n\t\t}\n\n\t\thandle(node.body, state);\n\t},\n\n\t/**\n\t * @param {import('estree').ForInStatement | import('estree').ForOfStatement} node\n\t * @param {import('./types').State} state\n\t */\n\t'ForInStatement|ForOfStatement': (node, state) => {\n\t\tstate.commands.push('for ');\n\t\tif (node.type === 'ForOfStatement' && node.await) state.commands.push('await ');\n\t\tstate.commands.push('(');\n\n\t\tif (node.left.type === 'VariableDeclaration') {\n\t\t\thandle_var_declaration(node.left, state);\n\t\t} else {\n\t\t\thandle(node.left, state);\n\t\t}\n\n\t\tstate.commands.push(node.type === 'ForInStatement' ? ` in ` : ` of `);\n\t\thandle(node.right, state);\n\t\tstate.commands.push(') ');\n\t\thandle(node.body, state);\n\t},\n\n\t/**\n\t * @param {import('estree').FunctionDeclaration | import('estree').FunctionExpression} node\n\t * @param {import('./types').State} state\n\t */\n\t'FunctionDeclaration|FunctionExpression': (node, state) => {\n\t\tif (node.async) state.commands.push('async ');\n\t\tstate.commands.push(node.generator ? 'function* ' : 'function ');\n\t\tif (node.id) handle(node.id, state);\n\n\t\tstate.commands.push('(');\n\t\tsequence(node.params, state, false, handle);\n\t\tstate.commands.push(') ');\n\n\t\thandle(node.body, state);\n\t},\n\n\t/**\n\t * @param {import('estree').RestElement | import('estree').SpreadElement} node\n\t * @param {import('./types').State} state\n\t */\n\t'RestElement|SpreadElement': (node, state) => {\n\t\tstate.commands.push('...');\n\t\thandle(node.argument, state);\n\t}\n};\n\n/** @type {import('./types').Handlers} */\nconst handlers = {\n\tArrayExpression: shared['ArrayExpression|ArrayPattern'],\n\n\tArrayPattern: shared['ArrayExpression|ArrayPattern'],\n\n\tArrowFunctionExpression: (node, state) => {\n\t\tif (node.async) state.commands.push('async ');\n\n\t\tstate.commands.push('(');\n\t\tsequence(node.params, state, false, handle);\n\t\tstate.commands.push(') => ');\n\n\t\tif (\n\t\t\tnode.body.type === 'ObjectExpression' ||\n\t\t\t(node.body.type === 'AssignmentExpression' && node.body.left.type === 'ObjectPattern') ||\n\t\t\t(node.body.type === 'LogicalExpression' && node.body.left.type === 'ObjectExpression') ||\n\t\t\t(node.body.type === 'ConditionalExpression' && node.body.test.type === 'ObjectExpression')\n\t\t) {\n\t\t\tstate.commands.push('(');\n\t\t\thandle(node.body, state);\n\t\t\tstate.commands.push(')');\n\t\t} else {\n\t\t\thandle(node.body, state);\n\t\t}\n\t},\n\n\tAssignmentExpression(node, state) {\n\t\thandle(node.left, state);\n\t\tstate.commands.push(` ${node.operator} `);\n\t\thandle(node.right, state);\n\t},\n\n\tAssignmentPattern(node, state) {\n\t\thandle(node.left, state);\n\t\tstate.commands.push(' = ');\n\t\thandle(node.right, state);\n\t},\n\n\tAwaitExpression(node, state) {\n\t\tif (node.argument) {\n\t\t\tconst precedence = EXPRESSIONS_PRECEDENCE[node.argument.type];\n\n\t\t\tif (precedence && precedence < EXPRESSIONS_PRECEDENCE.AwaitExpression) {\n\t\t\t\tstate.commands.push('await (');\n\t\t\t\thandle(node.argument, state);\n\t\t\t\tstate.commands.push(')');\n\t\t\t} else {\n\t\t\t\tstate.commands.push('await ');\n\t\t\t\thandle(node.argument, state);\n\t\t\t}\n\t\t} else {\n\t\t\tstate.commands.push('await');\n\t\t}\n\t},\n\n\tBinaryExpression: shared['BinaryExpression|LogicalExpression'],\n\n\tBlockStatement: shared['BlockStatement|ClassBody'],\n\n\tBreakStatement(node, state) {\n\t\tif (node.label) {\n\t\t\tstate.commands.push('break ');\n\t\t\thandle(node.label, state);\n\t\t\tstate.commands.push(';');\n\t\t} else {\n\t\t\tstate.commands.push('break;');\n\t\t}\n\t},\n\n\tCallExpression: shared['CallExpression|NewExpression'],\n\n\tChainExpression(node, state) {\n\t\thandle(node.expression, state);\n\t},\n\n\tClassBody: shared['BlockStatement|ClassBody'],\n\n\tClassDeclaration: shared['ClassDeclaration|ClassExpression'],\n\n\tClassExpression: shared['ClassDeclaration|ClassExpression'],\n\n\tConditionalExpression(node, state) {\n\t\tif (EXPRESSIONS_PRECEDENCE[node.test.type] > EXPRESSIONS_PRECEDENCE.ConditionalExpression) {\n\t\t\thandle(node.test, state);\n\t\t} else {\n\t\t\tstate.commands.push('(');\n\t\t\thandle(node.test, state);\n\t\t\tstate.commands.push(')');\n\t\t}\n\n\t\tconst if_true = create_sequence();\n\t\tconst if_false = create_sequence();\n\n\t\tconst child_state = { ...state, multiline: false };\n\n\t\tstate.commands.push(if_true);\n\t\thandle(node.consequent, child_state);\n\t\tstate.commands.push(if_false);\n\t\thandle(node.alternate, child_state);\n\n\t\tconst multiline = child_state.multiline;\n\n\t\tif (multiline) {\n\t\t\tif_true.children.push(indent, newline, '? ');\n\t\t\tif_false.children.push(newline, ': ');\n\t\t\tstate.commands.push(dedent);\n\t\t} else {\n\t\t\tif_true.children.push(' ? ');\n\t\t\tif_false.children.push(' : ');\n\t\t}\n\t},\n\n\tContinueStatement(node, state) {\n\t\tif (node.label) {\n\t\t\tstate.commands.push('continue ');\n\t\t\thandle(node.label, state);\n\t\t\tstate.commands.push(';');\n\t\t} else {\n\t\t\tstate.commands.push('continue;');\n\t\t}\n\t},\n\n\tDebuggerStatement(node, state) {\n\t\tstate.commands.push(c('debugger', node), ';');\n\t},\n\n\tDoWhileStatement(node, state) {\n\t\tstate.commands.push('do ');\n\t\thandle(node.body, state);\n\t\tstate.commands.push(' while (');\n\t\thandle(node.test, state);\n\t\tstate.commands.push(');');\n\t},\n\n\tEmptyStatement(node, state) {\n\t\tstate.commands.push(';');\n\t},\n\n\tExportAllDeclaration(node, state) {\n\t\tstate.commands.push('export * from ');\n\t\thandle(node.source, state);\n\t\tstate.commands.push(';');\n\t},\n\n\tExportDefaultDeclaration(node, state) {\n\t\tstate.commands.push('export default ');\n\n\t\thandle(node.declaration, state);\n\n\t\tif (node.declaration.type !== 'FunctionDeclaration') {\n\t\t\tstate.commands.push(';');\n\t\t}\n\t},\n\n\tExportNamedDeclaration(node, state) {\n\t\tstate.commands.push('export ');\n\n\t\tif (node.declaration) {\n\t\t\thandle(node.declaration, state);\n\t\t\treturn;\n\t\t}\n\n\t\tstate.commands.push('{');\n\t\tsequence(node.specifiers, state, true, (s, state) => {\n\t\t\thandle(s.local, state);\n\n\t\t\tif (s.local.name !== s.exported.name) {\n\t\t\t\tstate.commands.push(' as ');\n\t\t\t\thandle(s.exported, state);\n\t\t\t}\n\t\t});\n\t\tstate.commands.push('}');\n\n\t\tif (node.source) {\n\t\t\tstate.commands.push(' from ');\n\t\t\thandle(node.source, state);\n\t\t}\n\n\t\tstate.commands.push(';');\n\t},\n\n\tExpressionStatement(node, state) {\n\t\tif (\n\t\t\tnode.expression.type === 'AssignmentExpression' &&\n\t\t\tnode.expression.left.type === 'ObjectPattern'\n\t\t) {\n\t\t\t// is an AssignmentExpression to an ObjectPattern\n\t\t\tstate.commands.push('(');\n\t\t\thandle(node.expression, state);\n\t\t\tstate.commands.push(');');\n\t\t\treturn;\n\t\t}\n\n\t\thandle(node.expression, state);\n\t\tstate.commands.push(';');\n\t},\n\n\tForStatement: (node, state) => {\n\t\tstate.commands.push('for (');\n\n\t\tif (node.init) {\n\t\t\tif (node.init.type === 'VariableDeclaration') {\n\t\t\t\thandle_var_declaration(node.init, state);\n\t\t\t} else {\n\t\t\t\thandle(node.init, state);\n\t\t\t}\n\t\t}\n\n\t\tstate.commands.push('; ');\n\t\tif (node.test) handle(node.test, state);\n\t\tstate.commands.push('; ');\n\t\tif (node.update) handle(node.update, state);\n\n\t\tstate.commands.push(') ');\n\t\thandle(node.body, state);\n\t},\n\n\tForInStatement: shared['ForInStatement|ForOfStatement'],\n\n\tForOfStatement: shared['ForInStatement|ForOfStatement'],\n\n\tFunctionDeclaration: shared['FunctionDeclaration|FunctionExpression'],\n\n\tFunctionExpression: shared['FunctionDeclaration|FunctionExpression'],\n\n\tIdentifier(node, state) {\n\t\tlet name = node.name;\n\t\tstate.commands.push(c(name, node));\n\t},\n\n\tIfStatement(node, state) {\n\t\tstate.commands.push('if (');\n\t\thandle(node.test, state);\n\t\tstate.commands.push(') ');\n\t\thandle(node.consequent, state);\n\n\t\tif (node.alternate) {\n\t\t\tstate.commands.push(' else ');\n\t\t\thandle(node.alternate, state);\n\t\t}\n\t},\n\n\tImportDeclaration(node, state) {\n\t\tif (node.specifiers.length === 0) {\n\t\t\tstate.commands.push('import ');\n\t\t\thandle(node.source, state);\n\t\t\tstate.commands.push(';');\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {import('estree').ImportNamespaceSpecifier | null} */\n\t\tlet namespace_specifier = null;\n\n\t\t/** @type {import('estree').ImportDefaultSpecifier | null} */\n\t\tlet default_specifier = null;\n\n\t\t/** @type {import('estree').ImportSpecifier[]} */\n\t\tconst named_specifiers = [];\n\n\t\tfor (const s of node.specifiers) {\n\t\t\tif (s.type === 'ImportNamespaceSpecifier') {\n\t\t\t\tnamespace_specifier = s;\n\t\t\t} else if (s.type === 'ImportDefaultSpecifier') {\n\t\t\t\tdefault_specifier = s;\n\t\t\t} else {\n\t\t\t\tnamed_specifiers.push(s);\n\t\t\t}\n\t\t}\n\n\t\tstate.commands.push('import ');\n\n\t\tif (default_specifier) {\n\t\t\tstate.commands.push(c(default_specifier.local.name, default_specifier));\n\t\t\tif (namespace_specifier || named_specifiers.length > 0) state.commands.push(', ');\n\t\t}\n\n\t\tif (namespace_specifier) {\n\t\t\tstate.commands.push(c('* as ' + namespace_specifier.local.name, namespace_specifier));\n\t\t}\n\n\t\tif (named_specifiers.length > 0) {\n\t\t\tstate.commands.push('{');\n\t\t\tsequence(named_specifiers, state, true, (s, state) => {\n\t\t\t\tif (s.local.name !== s.imported.name) {\n\t\t\t\t\thandle(s.imported, state);\n\t\t\t\t\tstate.commands.push(' as ');\n\t\t\t\t}\n\n\t\t\t\thandle(s.local, state);\n\t\t\t});\n\t\t\tstate.commands.push('}');\n\t\t}\n\n\t\tstate.commands.push(' from ');\n\t\thandle(node.source, state);\n\t\tstate.commands.push(';');\n\t},\n\n\tImportExpression(node, state) {\n\t\tstate.commands.push('import(');\n\t\thandle(node.source, state);\n\t\tstate.commands.push(')');\n\t},\n\n\tLabeledStatement(node, state) {\n\t\thandle(node.label, state);\n\t\tstate.commands.push(': ');\n\t\thandle(node.body, state);\n\t},\n\n\tLiteral(node, state) {\n\t\t// TODO do we need to handle weird unicode characters somehow?\n\t\t// str.replace(/\\\\u(\\d{4})/g, (m, n) => String.fromCharCode(+n))\n\t\tconst value =\n\t\t\tnode.raw ??\n\t\t\t(typeof node.value === 'string' ? JSON.stringify(node.value) : String(node.value));\n\n\t\tstate.commands.push(c(value, node));\n\t},\n\n\tLogicalExpression: shared['BinaryExpression|LogicalExpression'],\n\n\tMemberExpression(node, state) {\n\t\tif (EXPRESSIONS_PRECEDENCE[node.object.type] < EXPRESSIONS_PRECEDENCE.MemberExpression) {\n\t\t\tstate.commands.push('(');\n\t\t\thandle(node.object, state);\n\t\t\tstate.commands.push(')');\n\t\t} else {\n\t\t\thandle(node.object, state);\n\t\t}\n\n\t\tif (node.computed) {\n\t\t\tif (node.optional) {\n\t\t\t\tstate.commands.push('?.');\n\t\t\t}\n\t\t\tstate.commands.push('[');\n\t\t\thandle(node.property, state);\n\t\t\tstate.commands.push(']');\n\t\t} else {\n\t\t\tstate.commands.push(node.optional ? '?.' : '.');\n\t\t\thandle(node.property, state);\n\t\t}\n\t},\n\n\tMetaProperty(node, state) {\n\t\thandle(node.meta, state);\n\t\tstate.commands.push('.');\n\t\thandle(node.property, state);\n\t},\n\n\tMethodDefinition(node, state) {\n\t\tif (node.static) {\n\t\t\tstate.commands.push('static ');\n\t\t}\n\n\t\tif (node.kind === 'get' || node.kind === 'set') {\n\t\t\t// Getter or setter\n\t\t\tstate.commands.push(node.kind + ' ');\n\t\t}\n\n\t\tif (node.value.async) {\n\t\t\tstate.commands.push('async ');\n\t\t}\n\n\t\tif (node.value.generator) {\n\t\t\tstate.commands.push('*');\n\t\t}\n\n\t\tif (node.computed) state.commands.push('[');\n\t\thandle(node.key, state);\n\t\tif (node.computed) state.commands.push(']');\n\n\t\tstate.commands.push('(');\n\t\tsequence(node.value.params, state, false, handle);\n\t\tstate.commands.push(') ');\n\n\t\thandle(node.value.body, state);\n\t},\n\n\tNewExpression: shared['CallExpression|NewExpression'],\n\n\tObjectExpression(node, state) {\n\t\tstate.commands.push('{');\n\t\tsequence(node.properties, state, true, (p, state) => {\n\t\t\tif (p.type === 'Property' && p.value.type === 'FunctionExpression') {\n\t\t\t\tconst fn = /** @type {import('estree').FunctionExpression} */ (p.value);\n\n\t\t\t\tif (p.kind === 'get' || p.kind === 'set') {\n\t\t\t\t\tstate.commands.push(p.kind + ' ');\n\t\t\t\t} else {\n\t\t\t\t\tif (fn.async) state.commands.push('async ');\n\t\t\t\t\tif (fn.generator) state.commands.push('*');\n\t\t\t\t}\n\n\t\t\t\tif (p.computed) state.commands.push('[');\n\t\t\t\thandle(p.key, state);\n\t\t\t\tif (p.computed) state.commands.push(']');\n\n\t\t\t\tstate.commands.push('(');\n\t\t\t\tsequence(fn.params, state, false, handle);\n\t\t\t\tstate.commands.push(') ');\n\n\t\t\t\thandle(fn.body, state);\n\t\t\t} else {\n\t\t\t\thandle(p, state);\n\t\t\t}\n\t\t});\n\t\tstate.commands.push('}');\n\t},\n\n\tObjectPattern(node, state) {\n\t\tstate.commands.push('{');\n\t\tsequence(node.properties, state, true, handle);\n\t\tstate.commands.push('}');\n\t},\n\n\t// @ts-expect-error this isn't a real node type, but Acorn produces it\n\tParenthesizedExpression(node, state) {\n\t\treturn handle(node.expression, state);\n\t},\n\n\tPrivateIdentifier(node, state) {\n\t\tstate.commands.push('#', c(node.name, node));\n\t},\n\n\tProgram(node, state) {\n\t\thandle_body(node.body, state);\n\t},\n\n\tProperty(node, state) {\n\t\tconst value = node.value.type === 'AssignmentPattern' ? node.value.left : node.value;\n\n\t\tconst shorthand =\n\t\t\t!node.computed &&\n\t\t\tnode.kind === 'init' &&\n\t\t\tnode.key.type === 'Identifier' &&\n\t\t\tvalue.type === 'Identifier' &&\n\t\t\tnode.key.name === value.name;\n\n\t\tif (shorthand) {\n\t\t\thandle(node.value, state);\n\t\t\treturn;\n\t\t}\n\n\t\tif (node.computed) state.commands.push('[');\n\t\thandle(node.key, state);\n\t\tstate.commands.push(node.computed ? ']: ' : ': ');\n\t\thandle(node.value, state);\n\t},\n\n\tPropertyDefinition(node, state) {\n\t\tif (node.static) {\n\t\t\tstate.commands.push('static ');\n\t\t}\n\n\t\tif (node.computed) {\n\t\t\tstate.commands.push('[');\n\t\t\thandle(node.key, state);\n\t\t\tstate.commands.push(']');\n\t\t} else {\n\t\t\thandle(node.key, state);\n\t\t}\n\n\t\tif (node.value) {\n\t\t\tstate.commands.push(' = ');\n\n\t\t\thandle(node.value, state);\n\t\t}\n\n\t\tstate.commands.push(';');\n\t},\n\n\tRestElement: shared['RestElement|SpreadElement'],\n\n\tReturnStatement(node, state) {\n\t\tif (node.argument) {\n\t\t\tconst contains_comment =\n\t\t\t\tnode.argument.leadingComments &&\n\t\t\t\tnode.argument.leadingComments.some((comment) => comment.type === 'Line');\n\n\t\t\tstate.commands.push(contains_comment ? 'return (' : 'return ');\n\t\t\thandle(node.argument, state);\n\t\t\tstate.commands.push(contains_comment ? ');' : ';');\n\t\t} else {\n\t\t\tstate.commands.push('return;');\n\t\t}\n\t},\n\n\tSequenceExpression(node, state) {\n\t\tstate.commands.push('(');\n\t\tsequence(node.expressions, state, false, handle);\n\t\tstate.commands.push(')');\n\t},\n\n\tSpreadElement: shared['RestElement|SpreadElement'],\n\n\tStaticBlock(node, state) {\n\t\tstate.commands.push(indent, 'static {', newline);\n\n\t\thandle_body(node.body, state);\n\n\t\tstate.commands.push(dedent, newline, '}');\n\t},\n\n\tSuper(node, state) {\n\t\tstate.commands.push(c('super', node));\n\t},\n\n\tSwitchStatement(node, state) {\n\t\tstate.commands.push('switch (');\n\t\thandle(node.discriminant, state);\n\t\tstate.commands.push(') {', indent);\n\n\t\tlet first = true;\n\n\t\tfor (const block of node.cases) {\n\t\t\tif (!first) state.commands.push('\\n');\n\t\t\tfirst = false;\n\n\t\t\tif (block.test) {\n\t\t\t\tstate.commands.push(newline, `case `);\n\t\t\t\thandle(block.test, state);\n\t\t\t\tstate.commands.push(':');\n\t\t\t} else {\n\t\t\t\tstate.commands.push(newline, `default:`);\n\t\t\t}\n\n\t\t\tstate.commands.push(indent);\n\n\t\t\tfor (const statement of block.consequent) {\n\t\t\t\tstate.commands.push(newline);\n\t\t\t\thandle(statement, state);\n\t\t\t}\n\n\t\t\tstate.commands.push(dedent);\n\t\t}\n\n\t\tstate.commands.push(dedent, newline, `}`);\n\t},\n\n\tTaggedTemplateExpression(node, state) {\n\t\thandle(node.tag, state);\n\t\thandle(node.quasi, state);\n\t},\n\n\tTemplateLiteral(node, state) {\n\t\tstate.commands.push('`');\n\n\t\tconst { quasis, expressions } = node;\n\n\t\tfor (let i = 0; i < expressions.length; i++) {\n\t\t\tconst raw = quasis[i].value.raw;\n\n\t\t\tstate.commands.push(raw, '${');\n\t\t\thandle(expressions[i], state);\n\t\t\tstate.commands.push('}');\n\n\t\t\tif (/\\n/.test(raw)) state.multiline = true;\n\t\t}\n\n\t\tconst raw = quasis[quasis.length - 1].value.raw;\n\n\t\tstate.commands.push(raw, '`');\n\t\tif (/\\n/.test(raw)) state.multiline = true;\n\t},\n\n\tThisExpression(node, state) {\n\t\tstate.commands.push(c('this', node));\n\t},\n\n\tThrowStatement(node, state) {\n\t\tstate.commands.push('throw ');\n\t\thandle(node.argument, state);\n\t\tstate.commands.push(';');\n\t},\n\n\tTryStatement(node, state) {\n\t\tstate.commands.push('try ');\n\t\thandle(node.block, state);\n\n\t\tif (node.handler) {\n\t\t\tif (node.handler.param) {\n\t\t\t\tstate.commands.push(' catch(');\n\t\t\t\thandle(node.handler.param, state);\n\t\t\t\tstate.commands.push(') ');\n\t\t\t} else {\n\t\t\t\tstate.commands.push(' catch ');\n\t\t\t}\n\n\t\t\thandle(node.handler.body, state);\n\t\t}\n\n\t\tif (node.finalizer) {\n\t\t\tstate.commands.push(' finally ');\n\t\t\thandle(node.finalizer, state);\n\t\t}\n\t},\n\n\tUnaryExpression(node, state) {\n\t\tstate.commands.push(node.operator);\n\n\t\tif (node.operator.length > 1) {\n\t\t\tstate.commands.push(' ');\n\t\t}\n\n\t\tif (EXPRESSIONS_PRECEDENCE[node.argument.type] < EXPRESSIONS_PRECEDENCE.UnaryExpression) {\n\t\t\tstate.commands.push('(');\n\t\t\thandle(node.argument, state);\n\t\t\tstate.commands.push(')');\n\t\t} else {\n\t\t\thandle(node.argument, state);\n\t\t}\n\t},\n\n\tUpdateExpression(node, state) {\n\t\tif (node.prefix) {\n\t\t\tstate.commands.push(node.operator);\n\t\t\thandle(node.argument, state);\n\t\t} else {\n\t\t\thandle(node.argument, state);\n\t\t\tstate.commands.push(node.operator);\n\t\t}\n\t},\n\n\tVariableDeclaration(node, state) {\n\t\thandle_var_declaration(node, state);\n\t\tstate.commands.push(';');\n\t},\n\n\tVariableDeclarator(node, state) {\n\t\thandle(node.id, state);\n\n\t\tif (node.init) {\n\t\t\tstate.commands.push(' = ');\n\t\t\thandle(node.init, state);\n\t\t}\n\t},\n\n\tWhileStatement(node, state) {\n\t\tstate.commands.push('while (');\n\t\thandle(node.test, state);\n\t\tstate.commands.push(') ');\n\t\thandle(node.body, state);\n\t},\n\n\tWithStatement(node, state) {\n\t\tstate.commands.push('with (');\n\t\thandle(node.object, state);\n\t\tstate.commands.push(') ');\n\t\thandle(node.body, state);\n\t},\n\n\tYieldExpression(node, state) {\n\t\tif (node.argument) {\n\t\t\tstate.commands.push(node.delegate ? `yield* ` : `yield `);\n\t\t\thandle(node.argument, state);\n\t\t} else {\n\t\t\tstate.commands.push(node.delegate ? `yield*` : `yield`);\n\t\t}\n\t}\n};\n", "import { handle } from './handlers.js';\nimport { encode } from '@jridgewell/sourcemap-codec';\n\n/** @type {(str: string) => string} str */\nlet btoa = () => {\n\tthrow new Error('Unsupported environment: `window.btoa` or `Buffer` should be supported.');\n};\n\nif (typeof window !== 'undefined' && typeof window.btoa === 'function') {\n\tbtoa = (str) => window.btoa(unescape(encodeURIComponent(str)));\n\t// @ts-expect-error\n} else if (typeof Buffer === 'function') {\n\t// @ts-expect-error\n\tbtoa = (str) => Buffer.from(str, 'utf-8').toString('base64');\n}\n\n/**\n * @typedef {{\n *   sourceMapSource?: string;\n *   sourceMapContent?: string;\n *   sourceMapEncodeMappings?: boolean; // default true\n * }} PrintOptions\n */\n\n/**\n * @param {import('estree').Node} node\n * @param {PrintOptions} opts\n * @returns {{ code: string, map: any }} // TODO\n */\nexport function print(node, opts = {}) {\n\tif (Array.isArray(node)) {\n\t\treturn print(\n\t\t\t{\n\t\t\t\ttype: 'Program',\n\t\t\t\tbody: node,\n\t\t\t\tsourceType: 'module'\n\t\t\t},\n\t\t\topts\n\t\t);\n\t}\n\n\t/** @type {import('./types').State} */\n\tconst state = {\n\t\tcommands: [],\n\t\tcomments: [],\n\t\tmultiline: false\n\t};\n\n\thandle(node, state);\n\n\t/** @typedef {[number, number, number, number]} Segment */\n\n\tlet code = '';\n\tlet current_column = 0;\n\n\t/** @type {Segment[][]} */\n\tlet mappings = [];\n\n\t/** @type {Segment[]} */\n\tlet current_line = [];\n\n\t/** @param {string} str */\n\tfunction append(str) {\n\t\tcode += str;\n\n\t\tfor (let i = 0; i < str.length; i += 1) {\n\t\t\tif (str[i] === '\\n') {\n\t\t\t\tmappings.push(current_line);\n\t\t\t\tcurrent_line = [];\n\t\t\t\tcurrent_column = 0;\n\t\t\t} else {\n\t\t\t\tcurrent_column += 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tlet newline = '\\n';\n\n\t/** @param {import('./types').Command} command */\n\tfunction run(command) {\n\t\tif (typeof command === 'string') {\n\t\t\tappend(command);\n\t\t\treturn;\n\t\t}\n\n\t\tswitch (command.type) {\n\t\t\tcase 'Chunk':\n\t\t\t\tconst loc = command.loc;\n\n\t\t\t\tif (loc) {\n\t\t\t\t\tcurrent_line.push([\n\t\t\t\t\t\tcurrent_column,\n\t\t\t\t\t\t0, // source index is always zero\n\t\t\t\t\t\tloc.start.line - 1,\n\t\t\t\t\t\tloc.start.column\n\t\t\t\t\t]);\n\t\t\t\t}\n\n\t\t\t\tappend(command.content);\n\n\t\t\t\tif (loc) {\n\t\t\t\t\tcurrent_line.push([\n\t\t\t\t\t\tcurrent_column,\n\t\t\t\t\t\t0, // source index is always zero\n\t\t\t\t\t\tloc.end.line - 1,\n\t\t\t\t\t\tloc.end.column\n\t\t\t\t\t]);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Newline':\n\t\t\t\tappend(newline);\n\t\t\t\tbreak;\n\n\t\t\tcase 'Indent':\n\t\t\t\tnewline += '\\t';\n\t\t\t\tbreak;\n\n\t\t\tcase 'Dedent':\n\t\t\t\tnewline = newline.slice(0, -1);\n\t\t\t\tbreak;\n\n\t\t\tcase 'Sequence':\n\t\t\t\tfor (let i = 0; i < command.children.length; i += 1) {\n\t\t\t\t\trun(command.children[i]);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Comment':\n\t\t\t\tif (command.comment.type === 'Line') {\n\t\t\t\t\tappend(`//${command.comment.value}`);\n\t\t\t\t} else {\n\t\t\t\t\tappend(`/*${command.comment.value.replace(/\\n/g, newline)}*/`);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tfor (let i = 0; i < state.commands.length; i += 1) {\n\t\trun(state.commands[i]);\n\t}\n\n\tmappings.push(current_line);\n\n\tconst map = {\n\t\tversion: 3,\n\t\t/** @type {string[]} */\n\t\tnames: [],\n\t\tsources: [opts.sourceMapSource || null],\n\t\tsourcesContent: [opts.sourceMapContent || null],\n\t\tmappings:\n\t\t\topts.sourceMapEncodeMappings == undefined || opts.sourceMapEncodeMappings\n\t\t\t\t? encode(mappings)\n\t\t\t\t: mappings\n\t};\n\n\tObject.defineProperties(map, {\n\t\ttoString: {\n\t\t\tenumerable: false,\n\t\t\tvalue: function toString() {\n\t\t\t\treturn JSON.stringify(this);\n\t\t\t}\n\t\t},\n\t\ttoUrl: {\n\t\t\tenumerable: false,\n\t\t\tvalue: function toUrl() {\n\t\t\t\treturn 'data:application/json;charset=utf-8;base64,' + btoa(this.toString());\n\t\t\t}\n\t\t}\n\t});\n\n\treturn {\n\t\tcode,\n\t\tmap\n\t};\n}\n"],
  "mappings": "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",
  "names": ["needs_parens", "state", "raw", "newline"]
}
